{"ast":null,"code":"const awsIam = require('../../protocol/sasl/awsIam');\n\nconst {\n  KafkaJSSASLAuthenticationError\n} = require('../../errors');\n\nmodule.exports = class AWSIAMAuthenticator {\n  constructor(connection, logger, saslAuthenticate) {\n    this.connection = connection;\n    this.logger = logger.namespace('SASLAWSIAMAuthenticator');\n    this.saslAuthenticate = saslAuthenticate;\n  }\n\n  async authenticate() {\n    const {\n      sasl\n    } = this.connection;\n\n    if (!sasl.authorizationIdentity) {\n      throw new KafkaJSSASLAuthenticationError('SASL AWS-IAM: Missing authorizationIdentity');\n    }\n\n    if (!sasl.accessKeyId) {\n      throw new KafkaJSSASLAuthenticationError('SASL AWS-IAM: Missing accessKeyId');\n    }\n\n    if (!sasl.secretAccessKey) {\n      throw new KafkaJSSASLAuthenticationError('SASL AWS-IAM: Missing secretAccessKey');\n    }\n\n    if (!sasl.sessionToken) {\n      sasl.sessionToken = '';\n    }\n\n    const request = awsIam.request(sasl);\n    const response = awsIam.response;\n    const {\n      host,\n      port\n    } = this.connection;\n    const broker = `${host}:${port}`;\n\n    try {\n      this.logger.debug('Authenticate with SASL AWS-IAM', {\n        broker\n      });\n      await this.saslAuthenticate({\n        request,\n        response\n      });\n      this.logger.debug('SASL AWS-IAM authentication successful', {\n        broker\n      });\n    } catch (e) {\n      const error = new KafkaJSSASLAuthenticationError(`SASL AWS-IAM authentication failed: ${e.message}`);\n      this.logger.error(error.message, {\n        broker\n      });\n      throw error;\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/broker/saslAuthenticator/awsIam.js"],"names":["awsIam","require","KafkaJSSASLAuthenticationError","module","exports","AWSIAMAuthenticator","constructor","connection","logger","saslAuthenticate","namespace","authenticate","sasl","authorizationIdentity","accessKeyId","secretAccessKey","sessionToken","request","response","host","port","broker","debug","e","error","message"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,4BAAD,CAAtB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAqCD,OAAO,CAAC,cAAD,CAAlD;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,mBAAN,CAA0B;AACzCC,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,gBAArB,EAAuC;AAChD,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAM,CAACE,SAAP,CAAiB,yBAAjB,CAAd;AACA,SAAKD,gBAAL,GAAwBA,gBAAxB;AACD;;AAED,QAAME,YAAN,GAAqB;AACnB,UAAM;AAAEC,MAAAA;AAAF,QAAW,KAAKL,UAAtB;;AACA,QAAI,CAACK,IAAI,CAACC,qBAAV,EAAiC;AAC/B,YAAM,IAAIX,8BAAJ,CAAmC,6CAAnC,CAAN;AACD;;AACD,QAAI,CAACU,IAAI,CAACE,WAAV,EAAuB;AACrB,YAAM,IAAIZ,8BAAJ,CAAmC,mCAAnC,CAAN;AACD;;AACD,QAAI,CAACU,IAAI,CAACG,eAAV,EAA2B;AACzB,YAAM,IAAIb,8BAAJ,CAAmC,uCAAnC,CAAN;AACD;;AACD,QAAI,CAACU,IAAI,CAACI,YAAV,EAAwB;AACtBJ,MAAAA,IAAI,CAACI,YAAL,GAAoB,EAApB;AACD;;AAED,UAAMC,OAAO,GAAGjB,MAAM,CAACiB,OAAP,CAAeL,IAAf,CAAhB;AACA,UAAMM,QAAQ,GAAGlB,MAAM,CAACkB,QAAxB;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiB,KAAKb,UAA5B;AACA,UAAMc,MAAM,GAAI,GAAEF,IAAK,IAAGC,IAAK,EAA/B;;AAEA,QAAI;AACF,WAAKZ,MAAL,CAAYc,KAAZ,CAAkB,gCAAlB,EAAoD;AAAED,QAAAA;AAAF,OAApD;AACA,YAAM,KAAKZ,gBAAL,CAAsB;AAAEQ,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAAtB,CAAN;AACA,WAAKV,MAAL,CAAYc,KAAZ,CAAkB,wCAAlB,EAA4D;AAAED,QAAAA;AAAF,OAA5D;AACD,KAJD,CAIE,OAAOE,CAAP,EAAU;AACV,YAAMC,KAAK,GAAG,IAAItB,8BAAJ,CACX,uCAAsCqB,CAAC,CAACE,OAAQ,EADrC,CAAd;AAGA,WAAKjB,MAAL,CAAYgB,KAAZ,CAAkBA,KAAK,CAACC,OAAxB,EAAiC;AAAEJ,QAAAA;AAAF,OAAjC;AACA,YAAMG,KAAN;AACD;AACF;;AAtCwC,CAA3C","sourcesContent":["const awsIam = require('../../protocol/sasl/awsIam')\nconst { KafkaJSSASLAuthenticationError } = require('../../errors')\n\nmodule.exports = class AWSIAMAuthenticator {\n  constructor(connection, logger, saslAuthenticate) {\n    this.connection = connection\n    this.logger = logger.namespace('SASLAWSIAMAuthenticator')\n    this.saslAuthenticate = saslAuthenticate\n  }\n\n  async authenticate() {\n    const { sasl } = this.connection\n    if (!sasl.authorizationIdentity) {\n      throw new KafkaJSSASLAuthenticationError('SASL AWS-IAM: Missing authorizationIdentity')\n    }\n    if (!sasl.accessKeyId) {\n      throw new KafkaJSSASLAuthenticationError('SASL AWS-IAM: Missing accessKeyId')\n    }\n    if (!sasl.secretAccessKey) {\n      throw new KafkaJSSASLAuthenticationError('SASL AWS-IAM: Missing secretAccessKey')\n    }\n    if (!sasl.sessionToken) {\n      sasl.sessionToken = ''\n    }\n\n    const request = awsIam.request(sasl)\n    const response = awsIam.response\n    const { host, port } = this.connection\n    const broker = `${host}:${port}`\n\n    try {\n      this.logger.debug('Authenticate with SASL AWS-IAM', { broker })\n      await this.saslAuthenticate({ request, response })\n      this.logger.debug('SASL AWS-IAM authentication successful', { broker })\n    } catch (e) {\n      const error = new KafkaJSSASLAuthenticationError(\n        `SASL AWS-IAM authentication failed: ${e.message}`\n      )\n      this.logger.error(error.message, { broker })\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}