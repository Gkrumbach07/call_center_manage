{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failIfVersionNotSupported\n} = require('../../../error');\n\nconst {\n  parse: parseV0\n} = require('../v0/response');\n/**\n * ApiVersions Response (Version: 1) => error_code [api_versions] throttle_time_ms\n *   error_code => INT16\n *   api_versions => api_key min_version max_version\n *     api_key => INT16\n *     min_version => INT16\n *     max_version => INT16\n *   throttle_time_ms => INT32\n */\n\n\nconst apiVersion = decoder => ({\n  apiKey: decoder.readInt16(),\n  minVersion: decoder.readInt16(),\n  maxVersion: decoder.readInt16()\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const errorCode = decoder.readInt16();\n  failIfVersionNotSupported(errorCode);\n  const apiVersions = decoder.readArray(apiVersion);\n  /**\n   * The Java client defaults this value to 0 if not present,\n   * even though it is required in the protocol. This is to\n   * work around https://github.com/tulios/kafkajs/issues/491\n   *\n   * See:\n   * https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/protocol/CommonFields.java#L23-L25\n   */\n\n  const throttleTime = decoder.canReadInt32() ? decoder.readInt32() : 0;\n  return {\n    errorCode,\n    apiVersions,\n    throttleTime\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/apiVersions/v1/response.js"],"names":["Decoder","require","failIfVersionNotSupported","parse","parseV0","apiVersion","decoder","apiKey","readInt16","minVersion","maxVersion","decode","rawData","errorCode","apiVersions","readArray","throttleTime","canReadInt32","readInt32","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgCD,OAAO,CAAC,gBAAD,CAA7C;;AACA,MAAM;AAAEE,EAAAA,KAAK,EAAEC;AAAT,IAAqBH,OAAO,CAAC,gBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,UAAU,GAAGC,OAAO,KAAK;AAC7BC,EAAAA,MAAM,EAAED,OAAO,CAACE,SAAR,EADqB;AAE7BC,EAAAA,UAAU,EAAEH,OAAO,CAACE,SAAR,EAFiB;AAG7BE,EAAAA,UAAU,EAAEJ,OAAO,CAACE,SAAR;AAHiB,CAAL,CAA1B;;AAMA,MAAMG,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMN,OAAO,GAAG,IAAIN,OAAJ,CAAYY,OAAZ,CAAhB;AACA,QAAMC,SAAS,GAAGP,OAAO,CAACE,SAAR,EAAlB;AAEAN,EAAAA,yBAAyB,CAACW,SAAD,CAAzB;AAEA,QAAMC,WAAW,GAAGR,OAAO,CAACS,SAAR,CAAkBV,UAAlB,CAApB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,QAAMW,YAAY,GAAGV,OAAO,CAACW,YAAR,KAAyBX,OAAO,CAACY,SAAR,EAAzB,GAA+C,CAApE;AAEA,SAAO;AACLL,IAAAA,SADK;AAELC,IAAAA,WAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAvBD;;AAyBAG,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,MADe;AAEfR,EAAAA,KAAK,EAAEC;AAFQ,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failIfVersionNotSupported } = require('../../../error')\nconst { parse: parseV0 } = require('../v0/response')\n\n/**\n * ApiVersions Response (Version: 1) => error_code [api_versions] throttle_time_ms\n *   error_code => INT16\n *   api_versions => api_key min_version max_version\n *     api_key => INT16\n *     min_version => INT16\n *     max_version => INT16\n *   throttle_time_ms => INT32\n */\n\nconst apiVersion = decoder => ({\n  apiKey: decoder.readInt16(),\n  minVersion: decoder.readInt16(),\n  maxVersion: decoder.readInt16(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const errorCode = decoder.readInt16()\n\n  failIfVersionNotSupported(errorCode)\n\n  const apiVersions = decoder.readArray(apiVersion)\n\n  /**\n   * The Java client defaults this value to 0 if not present,\n   * even though it is required in the protocol. This is to\n   * work around https://github.com/tulios/kafkajs/issues/491\n   *\n   * See:\n   * https://github.com/apache/kafka/blob/trunk/clients/src/main/java/org/apache/kafka/common/protocol/CommonFields.java#L23-L25\n   */\n  const throttleTime = decoder.canReadInt32() ? decoder.readInt32() : 0\n\n  return {\n    errorCode,\n    apiVersions,\n    throttleTime,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"]},"metadata":{},"sourceType":"script"}