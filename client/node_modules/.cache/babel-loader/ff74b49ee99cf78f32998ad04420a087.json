{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode,\n  failIfVersionNotSupported\n} = require('../../../error');\n/**\n * FindCoordinator Response (Version: 1) => throttle_time_ms error_code error_message coordinator\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   coordinator => node_id host port\n *     node_id => INT32\n *     host => STRING\n *     port => INT32\n */\n\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const errorCode = decoder.readInt16();\n  failIfVersionNotSupported(errorCode);\n  const errorMessage = decoder.readString();\n  const coordinator = {\n    nodeId: decoder.readInt32(),\n    host: decoder.readString(),\n    port: decoder.readInt32()\n  };\n  return {\n    throttleTime,\n    errorCode,\n    errorMessage,\n    coordinator\n  };\n};\n\nconst parse = async data => {\n  if (failure(data.errorCode)) {\n    throw createErrorFromCode(data.errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/findCoordinator/v1/response.js"],"names":["Decoder","require","failure","createErrorFromCode","failIfVersionNotSupported","decode","rawData","decoder","throttleTime","readInt32","errorCode","readInt16","errorMessage","readString","coordinator","nodeId","host","port","parse","data","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,mBAAX;AAAgCC,EAAAA;AAAhC,IAA8DH,OAAO,CAAC,gBAAD,CAA3E;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,OAAO,GAAG,IAAIP,OAAJ,CAAYM,OAAZ,CAAhB;AACA,QAAME,YAAY,GAAGD,OAAO,CAACE,SAAR,EAArB;AACA,QAAMC,SAAS,GAAGH,OAAO,CAACI,SAAR,EAAlB;AAEAP,EAAAA,yBAAyB,CAACM,SAAD,CAAzB;AAEA,QAAME,YAAY,GAAGL,OAAO,CAACM,UAAR,EAArB;AACA,QAAMC,WAAW,GAAG;AAClBC,IAAAA,MAAM,EAAER,OAAO,CAACE,SAAR,EADU;AAElBO,IAAAA,IAAI,EAAET,OAAO,CAACM,UAAR,EAFY;AAGlBI,IAAAA,IAAI,EAAEV,OAAO,CAACE,SAAR;AAHY,GAApB;AAMA,SAAO;AACLD,IAAAA,YADK;AAELE,IAAAA,SAFK;AAGLE,IAAAA,YAHK;AAILE,IAAAA;AAJK,GAAP;AAMD,CApBD;;AAsBA,MAAMI,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,MAAIjB,OAAO,CAACiB,IAAI,CAACT,SAAN,CAAX,EAA6B;AAC3B,UAAMP,mBAAmB,CAACgB,IAAI,CAACT,SAAN,CAAzB;AACD;;AAED,SAAOS,IAAP;AACD,CAND;;AAQAC,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,MADe;AAEfa,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode, failIfVersionNotSupported } = require('../../../error')\n\n/**\n * FindCoordinator Response (Version: 1) => throttle_time_ms error_code error_message coordinator\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   coordinator => node_id host port\n *     node_id => INT32\n *     host => STRING\n *     port => INT32\n */\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const errorCode = decoder.readInt16()\n\n  failIfVersionNotSupported(errorCode)\n\n  const errorMessage = decoder.readString()\n  const coordinator = {\n    nodeId: decoder.readInt32(),\n    host: decoder.readString(),\n    port: decoder.readInt32(),\n  }\n\n  return {\n    throttleTime,\n    errorCode,\n    errorMessage,\n    coordinator,\n  }\n}\n\nconst parse = async data => {\n  if (failure(data.errorCode)) {\n    throw createErrorFromCode(data.errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}