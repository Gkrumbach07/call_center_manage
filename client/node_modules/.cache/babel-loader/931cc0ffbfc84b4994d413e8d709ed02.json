{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n/**\n * DeleteAcls Response (Version: 0) => throttle_time_ms [filter_responses]\n *   throttle_time_ms => INT32\n *   filter_responses => error_code error_message [matching_acls]\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n *     matching_acls => error_code error_message resource_type resource_name principal host operation permission_type\n *       error_code => INT16\n *       error_message => NULLABLE_STRING\n *       resource_type => INT8\n *       resource_name => STRING\n *       principal => STRING\n *       host => STRING\n *       operation => INT8\n *       permission_type => INT8\n */\n\n\nconst decodeMatchingAcls = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  principal: decoder.readString(),\n  host: decoder.readString(),\n  operation: decoder.readInt8(),\n  permissionType: decoder.readInt8()\n});\n\nconst decodeFilterResponse = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  matchingAcls: decoder.readArray(decodeMatchingAcls)\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const filterResponses = decoder.readArray(decodeFilterResponse);\n  return {\n    throttleTime,\n    filterResponses\n  };\n};\n\nconst parse = async data => {\n  const filterResponsesWithError = data.filterResponses.filter(({\n    errorCode\n  }) => failure(errorCode));\n\n  if (filterResponsesWithError.length > 0) {\n    throw createErrorFromCode(filterResponsesWithError[0].errorCode);\n  }\n\n  for (const filterResponse of data.filterResponses) {\n    const matchingAcls = filterResponse.matchingAcls;\n    const matchingAclsWithError = matchingAcls.filter(({\n      errorCode\n    }) => failure(errorCode));\n\n    if (matchingAclsWithError.length > 0) {\n      throw createErrorFromCode(matchingAclsWithError[0].errorCode);\n    }\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decodeMatchingAcls,\n  decodeFilterResponse,\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/deleteAcls/v0/response.js"],"names":["Decoder","require","failure","createErrorFromCode","decodeMatchingAcls","decoder","errorCode","readInt16","errorMessage","readString","resourceType","readInt8","resourceName","principal","host","operation","permissionType","decodeFilterResponse","matchingAcls","readArray","decode","rawData","throttleTime","readInt32","filterResponses","parse","data","filterResponsesWithError","filter","length","filterResponse","matchingAclsWithError","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAmCF,OAAO,CAAC,gBAAD,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,kBAAkB,GAAGC,OAAO,KAAK;AACrCC,EAAAA,SAAS,EAAED,OAAO,CAACE,SAAR,EAD0B;AAErCC,EAAAA,YAAY,EAAEH,OAAO,CAACI,UAAR,EAFuB;AAGrCC,EAAAA,YAAY,EAAEL,OAAO,CAACM,QAAR,EAHuB;AAIrCC,EAAAA,YAAY,EAAEP,OAAO,CAACI,UAAR,EAJuB;AAKrCI,EAAAA,SAAS,EAAER,OAAO,CAACI,UAAR,EAL0B;AAMrCK,EAAAA,IAAI,EAAET,OAAO,CAACI,UAAR,EAN+B;AAOrCM,EAAAA,SAAS,EAAEV,OAAO,CAACM,QAAR,EAP0B;AAQrCK,EAAAA,cAAc,EAAEX,OAAO,CAACM,QAAR;AARqB,CAAL,CAAlC;;AAWA,MAAMM,oBAAoB,GAAGZ,OAAO,KAAK;AACvCC,EAAAA,SAAS,EAAED,OAAO,CAACE,SAAR,EAD4B;AAEvCC,EAAAA,YAAY,EAAEH,OAAO,CAACI,UAAR,EAFyB;AAGvCS,EAAAA,YAAY,EAAEb,OAAO,CAACc,SAAR,CAAkBf,kBAAlB;AAHyB,CAAL,CAApC;;AAMA,MAAMgB,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMhB,OAAO,GAAG,IAAIL,OAAJ,CAAYqB,OAAZ,CAAhB;AACA,QAAMC,YAAY,GAAGjB,OAAO,CAACkB,SAAR,EAArB;AACA,QAAMC,eAAe,GAAGnB,OAAO,CAACc,SAAR,CAAkBF,oBAAlB,CAAxB;AAEA,SAAO;AACLK,IAAAA,YADK;AAELE,IAAAA;AAFK,GAAP;AAID,CATD;;AAWA,MAAMC,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,QAAMC,wBAAwB,GAAGD,IAAI,CAACF,eAAL,CAAqBI,MAArB,CAA4B,CAAC;AAAEtB,IAAAA;AAAF,GAAD,KAC3DJ,OAAO,CAACI,SAAD,CADwB,CAAjC;;AAIA,MAAIqB,wBAAwB,CAACE,MAAzB,GAAkC,CAAtC,EAAyC;AACvC,UAAM1B,mBAAmB,CAACwB,wBAAwB,CAAC,CAAD,CAAxB,CAA4BrB,SAA7B,CAAzB;AACD;;AAED,OAAK,MAAMwB,cAAX,IAA6BJ,IAAI,CAACF,eAAlC,EAAmD;AACjD,UAAMN,YAAY,GAAGY,cAAc,CAACZ,YAApC;AACA,UAAMa,qBAAqB,GAAGb,YAAY,CAACU,MAAb,CAAoB,CAAC;AAAEtB,MAAAA;AAAF,KAAD,KAAmBJ,OAAO,CAACI,SAAD,CAA9C,CAA9B;;AAEA,QAAIyB,qBAAqB,CAACF,MAAtB,GAA+B,CAAnC,EAAsC;AACpC,YAAM1B,mBAAmB,CAAC4B,qBAAqB,CAAC,CAAD,CAArB,CAAyBzB,SAA1B,CAAzB;AACD;AACF;;AAED,SAAOoB,IAAP;AACD,CAnBD;;AAqBAM,MAAM,CAACC,OAAP,GAAiB;AACf7B,EAAAA,kBADe;AAEfa,EAAAA,oBAFe;AAGfG,EAAAA,MAHe;AAIfK,EAAAA;AAJe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * DeleteAcls Response (Version: 0) => throttle_time_ms [filter_responses]\n *   throttle_time_ms => INT32\n *   filter_responses => error_code error_message [matching_acls]\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n *     matching_acls => error_code error_message resource_type resource_name principal host operation permission_type\n *       error_code => INT16\n *       error_message => NULLABLE_STRING\n *       resource_type => INT8\n *       resource_name => STRING\n *       principal => STRING\n *       host => STRING\n *       operation => INT8\n *       permission_type => INT8\n */\n\nconst decodeMatchingAcls = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  principal: decoder.readString(),\n  host: decoder.readString(),\n  operation: decoder.readInt8(),\n  permissionType: decoder.readInt8(),\n})\n\nconst decodeFilterResponse = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  matchingAcls: decoder.readArray(decodeMatchingAcls),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const filterResponses = decoder.readArray(decodeFilterResponse)\n\n  return {\n    throttleTime,\n    filterResponses,\n  }\n}\n\nconst parse = async data => {\n  const filterResponsesWithError = data.filterResponses.filter(({ errorCode }) =>\n    failure(errorCode)\n  )\n\n  if (filterResponsesWithError.length > 0) {\n    throw createErrorFromCode(filterResponsesWithError[0].errorCode)\n  }\n\n  for (const filterResponse of data.filterResponses) {\n    const matchingAcls = filterResponse.matchingAcls\n    const matchingAclsWithError = matchingAcls.filter(({ errorCode }) => failure(errorCode))\n\n    if (matchingAclsWithError.length > 0) {\n      throw createErrorFromCode(matchingAclsWithError[0].errorCode)\n    }\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decodeMatchingAcls,\n  decodeFilterResponse,\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}