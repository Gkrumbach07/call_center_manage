{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n\nconst flatten = require('../../../../utils/flatten');\n/**\n * v0\n * ProduceResponse => [TopicName [Partition ErrorCode Offset]]\n *   TopicName => string\n *   Partition => int32\n *   ErrorCode => int16\n *   Offset => int64\n */\n\n\nconst partition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  offset: decoder.readInt64().toString()\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const topics = decoder.readArray(decoder => ({\n    topicName: decoder.readString(),\n    partitions: decoder.readArray(partition)\n  }));\n  return {\n    topics\n  };\n};\n\nconst parse = async data => {\n  const partitionsWithError = data.topics.map(topic => {\n    return topic.partitions.filter(partition => failure(partition.errorCode));\n  });\n  const errors = flatten(partitionsWithError);\n\n  if (errors.length > 0) {\n    const {\n      errorCode\n    } = errors[0];\n    throw createErrorFromCode(errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/produce/v0/response.js"],"names":["Decoder","require","failure","createErrorFromCode","flatten","partition","decoder","readInt32","errorCode","readInt16","offset","readInt64","toString","decode","rawData","topics","readArray","topicName","readString","partitions","parse","data","partitionsWithError","map","topic","filter","errors","length","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAmCF,OAAO,CAAC,gBAAD,CAAhD;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,2BAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,SAAS,GAAGC,OAAO,KAAK;AAC5BD,EAAAA,SAAS,EAAEC,OAAO,CAACC,SAAR,EADiB;AAE5BC,EAAAA,SAAS,EAAEF,OAAO,CAACG,SAAR,EAFiB;AAG5BC,EAAAA,MAAM,EAAEJ,OAAO,CAACK,SAAR,GAAoBC,QAApB;AAHoB,CAAL,CAAzB;;AAMA,MAAMC,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMR,OAAO,GAAG,IAAIN,OAAJ,CAAYc,OAAZ,CAAhB;AACA,QAAMC,MAAM,GAAGT,OAAO,CAACU,SAAR,CAAkBV,OAAO,KAAK;AAC3CW,IAAAA,SAAS,EAAEX,OAAO,CAACY,UAAR,EADgC;AAE3CC,IAAAA,UAAU,EAAEb,OAAO,CAACU,SAAR,CAAkBX,SAAlB;AAF+B,GAAL,CAAzB,CAAf;AAKA,SAAO;AACLU,IAAAA;AADK,GAAP;AAGD,CAVD;;AAYA,MAAMK,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,QAAMC,mBAAmB,GAAGD,IAAI,CAACN,MAAL,CAAYQ,GAAZ,CAAgBC,KAAK,IAAI;AACnD,WAAOA,KAAK,CAACL,UAAN,CAAiBM,MAAjB,CAAwBpB,SAAS,IAAIH,OAAO,CAACG,SAAS,CAACG,SAAX,CAA5C,CAAP;AACD,GAF2B,CAA5B;AAIA,QAAMkB,MAAM,GAAGtB,OAAO,CAACkB,mBAAD,CAAtB;;AACA,MAAII,MAAM,CAACC,MAAP,GAAgB,CAApB,EAAuB;AACrB,UAAM;AAAEnB,MAAAA;AAAF,QAAgBkB,MAAM,CAAC,CAAD,CAA5B;AACA,UAAMvB,mBAAmB,CAACK,SAAD,CAAzB;AACD;;AAED,SAAOa,IAAP;AACD,CAZD;;AAcAO,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,MADe;AAEfO,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\nconst flatten = require('../../../../utils/flatten')\n\n/**\n * v0\n * ProduceResponse => [TopicName [Partition ErrorCode Offset]]\n *   TopicName => string\n *   Partition => int32\n *   ErrorCode => int16\n *   Offset => int64\n */\n\nconst partition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  offset: decoder.readInt64().toString(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const topics = decoder.readArray(decoder => ({\n    topicName: decoder.readString(),\n    partitions: decoder.readArray(partition),\n  }))\n\n  return {\n    topics,\n  }\n}\n\nconst parse = async data => {\n  const partitionsWithError = data.topics.map(topic => {\n    return topic.partitions.filter(partition => failure(partition.errorCode))\n  })\n\n  const errors = flatten(partitionsWithError)\n  if (errors.length > 0) {\n    const { errorCode } = errors[0]\n    throw createErrorFromCode(errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}