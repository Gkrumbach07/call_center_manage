{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  parse: parseV0\n} = require('../v0/response');\n/**\n * Starting in version 1, on quota violation, brokers send out responses before throttling.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication\n * Version 1 also introduces a new resource pattern type field.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-290%3A+Support+for+Prefixed+ACLs\n *\n * DeleteAcls Response (Version: 1) => throttle_time_ms [filter_responses]\n *   throttle_time_ms => INT32\n *   filter_responses => error_code error_message [matching_acls]\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n *     matching_acls => error_code error_message resource_type resource_name resource_pattern_type principal host operation permission_type\n *       error_code => INT16\n *       error_message => NULLABLE_STRING\n *       resource_type => INT8\n *       resource_name => STRING\n *       resource_pattern_type => INT8\n *       principal => STRING\n *       host => STRING\n *       operation => INT8\n *       permission_type => INT8\n */\n\n\nconst decodeMatchingAcls = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  resourcePatternType: decoder.readInt8(),\n  principal: decoder.readString(),\n  host: decoder.readString(),\n  operation: decoder.readInt8(),\n  permissionType: decoder.readInt8()\n});\n\nconst decodeFilterResponse = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  matchingAcls: decoder.readArray(decodeMatchingAcls)\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const filterResponses = decoder.readArray(decodeFilterResponse);\n  return {\n    throttleTime: 0,\n    clientSideThrottleTime: throttleTime,\n    filterResponses\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/deleteAcls/v1/response.js"],"names":["Decoder","require","parse","parseV0","decodeMatchingAcls","decoder","errorCode","readInt16","errorMessage","readString","resourceType","readInt8","resourceName","resourcePatternType","principal","host","operation","permissionType","decodeFilterResponse","matchingAcls","readArray","decode","rawData","throttleTime","readInt32","filterResponses","clientSideThrottleTime","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,KAAK,EAAEC;AAAT,IAAqBF,OAAO,CAAC,gBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,kBAAkB,GAAGC,OAAO,KAAK;AACrCC,EAAAA,SAAS,EAAED,OAAO,CAACE,SAAR,EAD0B;AAErCC,EAAAA,YAAY,EAAEH,OAAO,CAACI,UAAR,EAFuB;AAGrCC,EAAAA,YAAY,EAAEL,OAAO,CAACM,QAAR,EAHuB;AAIrCC,EAAAA,YAAY,EAAEP,OAAO,CAACI,UAAR,EAJuB;AAKrCI,EAAAA,mBAAmB,EAAER,OAAO,CAACM,QAAR,EALgB;AAMrCG,EAAAA,SAAS,EAAET,OAAO,CAACI,UAAR,EAN0B;AAOrCM,EAAAA,IAAI,EAAEV,OAAO,CAACI,UAAR,EAP+B;AAQrCO,EAAAA,SAAS,EAAEX,OAAO,CAACM,QAAR,EAR0B;AASrCM,EAAAA,cAAc,EAAEZ,OAAO,CAACM,QAAR;AATqB,CAAL,CAAlC;;AAYA,MAAMO,oBAAoB,GAAGb,OAAO,KAAK;AACvCC,EAAAA,SAAS,EAAED,OAAO,CAACE,SAAR,EAD4B;AAEvCC,EAAAA,YAAY,EAAEH,OAAO,CAACI,UAAR,EAFyB;AAGvCU,EAAAA,YAAY,EAAEd,OAAO,CAACe,SAAR,CAAkBhB,kBAAlB;AAHyB,CAAL,CAApC;;AAMA,MAAMiB,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMjB,OAAO,GAAG,IAAIL,OAAJ,CAAYsB,OAAZ,CAAhB;AACA,QAAMC,YAAY,GAAGlB,OAAO,CAACmB,SAAR,EAArB;AACA,QAAMC,eAAe,GAAGpB,OAAO,CAACe,SAAR,CAAkBF,oBAAlB,CAAxB;AAEA,SAAO;AACLK,IAAAA,YAAY,EAAE,CADT;AAELG,IAAAA,sBAAsB,EAAEH,YAFnB;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAVD;;AAYAE,MAAM,CAACC,OAAP,GAAiB;AACfP,EAAAA,MADe;AAEfnB,EAAAA,KAAK,EAAEC;AAFQ,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV0 } = require('../v0/response')\n\n/**\n * Starting in version 1, on quota violation, brokers send out responses before throttling.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication\n * Version 1 also introduces a new resource pattern type field.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-290%3A+Support+for+Prefixed+ACLs\n *\n * DeleteAcls Response (Version: 1) => throttle_time_ms [filter_responses]\n *   throttle_time_ms => INT32\n *   filter_responses => error_code error_message [matching_acls]\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n *     matching_acls => error_code error_message resource_type resource_name resource_pattern_type principal host operation permission_type\n *       error_code => INT16\n *       error_message => NULLABLE_STRING\n *       resource_type => INT8\n *       resource_name => STRING\n *       resource_pattern_type => INT8\n *       principal => STRING\n *       host => STRING\n *       operation => INT8\n *       permission_type => INT8\n */\n\nconst decodeMatchingAcls = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  resourcePatternType: decoder.readInt8(),\n  principal: decoder.readString(),\n  host: decoder.readString(),\n  operation: decoder.readInt8(),\n  permissionType: decoder.readInt8(),\n})\n\nconst decodeFilterResponse = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  matchingAcls: decoder.readArray(decodeMatchingAcls),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const filterResponses = decoder.readArray(decodeFilterResponse)\n\n  return {\n    throttleTime: 0,\n    clientSideThrottleTime: throttleTime,\n    filterResponses,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"]},"metadata":{},"sourceType":"script"}