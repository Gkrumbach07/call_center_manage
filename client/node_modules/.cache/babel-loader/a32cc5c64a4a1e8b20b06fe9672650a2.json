{"ast":null,"code":"const Encoder = require('../../../encoder');\n\nconst {\n  ListOffsets: apiKey\n} = require('../../apiKeys');\n/**\n * ListOffsets Request (Version: 0) => replica_id [topics]\n *   replica_id => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition timestamp max_num_offsets\n *       partition => INT32\n *       timestamp => INT64\n *       max_num_offsets => INT32\n */\n\n/**\n * @param {number} replicaId\n * @param {object} topics use timestamp=-1 for latest offsets and timestamp=-2 for earliest.\n *                        Default timestamp=-1. Example:\n *                          {\n *                            topics: [\n *                              {\n *                                topic: 'topic-name',\n *                                partitions: [{ partition: 0, timestamp: -1 }]\n *                              }\n *                            ]\n *                          }\n */\n\n\nmodule.exports = ({\n  replicaId,\n  topics\n}) => ({\n  apiKey,\n  apiVersion: 0,\n  apiName: 'ListOffsets',\n  encode: async () => {\n    return new Encoder().writeInt32(replicaId).writeArray(topics.map(encodeTopic));\n  }\n});\n\nconst encodeTopic = ({\n  topic,\n  partitions\n}) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition));\n};\n\nconst encodePartition = ({\n  partition,\n  timestamp = -1,\n  maxNumOffsets = 1\n}) => {\n  return new Encoder().writeInt32(partition).writeInt64(timestamp).writeInt32(maxNumOffsets);\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/listOffsets/v0/request.js"],"names":["Encoder","require","ListOffsets","apiKey","module","exports","replicaId","topics","apiVersion","apiName","encode","writeInt32","writeArray","map","encodeTopic","topic","partitions","writeString","encodePartition","partition","timestamp","maxNumOffsets","writeInt64"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,WAAW,EAAEC;AAAf,IAA0BF,OAAO,CAAC,eAAD,CAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,MAA4B;AAC3CJ,EAAAA,MAD2C;AAE3CK,EAAAA,UAAU,EAAE,CAF+B;AAG3CC,EAAAA,OAAO,EAAE,aAHkC;AAI3CC,EAAAA,MAAM,EAAE,YAAY;AAClB,WAAO,IAAIV,OAAJ,GAAcW,UAAd,CAAyBL,SAAzB,EAAoCM,UAApC,CAA+CL,MAAM,CAACM,GAAP,CAAWC,WAAX,CAA/C,CAAP;AACD;AAN0C,CAA5B,CAAjB;;AASA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA2B;AAC7C,SAAO,IAAIhB,OAAJ,GAAciB,WAAd,CAA0BF,KAA1B,EAAiCH,UAAjC,CAA4CI,UAAU,CAACH,GAAX,CAAeK,eAAf,CAA5C,CAAP;AACD,CAFD;;AAIA,MAAMA,eAAe,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAS,GAAG,CAAC,CAA1B;AAA6BC,EAAAA,aAAa,GAAG;AAA7C,CAAD,KAAsD;AAC5E,SAAO,IAAIrB,OAAJ,GACJW,UADI,CACOQ,SADP,EAEJG,UAFI,CAEOF,SAFP,EAGJT,UAHI,CAGOU,aAHP,CAAP;AAID,CALD","sourcesContent":["const Encoder = require('../../../encoder')\nconst { ListOffsets: apiKey } = require('../../apiKeys')\n\n/**\n * ListOffsets Request (Version: 0) => replica_id [topics]\n *   replica_id => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition timestamp max_num_offsets\n *       partition => INT32\n *       timestamp => INT64\n *       max_num_offsets => INT32\n */\n\n/**\n * @param {number} replicaId\n * @param {object} topics use timestamp=-1 for latest offsets and timestamp=-2 for earliest.\n *                        Default timestamp=-1. Example:\n *                          {\n *                            topics: [\n *                              {\n *                                topic: 'topic-name',\n *                                partitions: [{ partition: 0, timestamp: -1 }]\n *                              }\n *                            ]\n *                          }\n */\nmodule.exports = ({ replicaId, topics }) => ({\n  apiKey,\n  apiVersion: 0,\n  apiName: 'ListOffsets',\n  encode: async () => {\n    return new Encoder().writeInt32(replicaId).writeArray(topics.map(encodeTopic))\n  },\n})\n\nconst encodeTopic = ({ topic, partitions }) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition))\n}\n\nconst encodePartition = ({ partition, timestamp = -1, maxNumOffsets = 1 }) => {\n  return new Encoder()\n    .writeInt32(partition)\n    .writeInt64(timestamp)\n    .writeInt32(maxNumOffsets)\n}\n"]},"metadata":{},"sourceType":"script"}