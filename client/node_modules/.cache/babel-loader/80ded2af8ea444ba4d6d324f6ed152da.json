{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode,\n  failIfVersionNotSupported\n} = require('../../../error');\n/**\n * ApiVersionResponse => ApiVersions\n *   ErrorCode = INT16\n *   ApiVersions = [ApiVersion]\n *     ApiVersion = ApiKey MinVersion MaxVersion\n *       ApiKey = INT16\n *       MinVersion = INT16\n *       MaxVersion = INT16\n */\n\n\nconst apiVersion = decoder => ({\n  apiKey: decoder.readInt16(),\n  minVersion: decoder.readInt16(),\n  maxVersion: decoder.readInt16()\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const errorCode = decoder.readInt16();\n  failIfVersionNotSupported(errorCode);\n  return {\n    errorCode,\n    apiVersions: decoder.readArray(apiVersion)\n  };\n};\n\nconst parse = async data => {\n  if (failure(data.errorCode)) {\n    throw createErrorFromCode(data.errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/apiVersions/v0/response.js"],"names":["Decoder","require","failure","createErrorFromCode","failIfVersionNotSupported","apiVersion","decoder","apiKey","readInt16","minVersion","maxVersion","decode","rawData","errorCode","apiVersions","readArray","parse","data","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,mBAAX;AAAgCC,EAAAA;AAAhC,IAA8DH,OAAO,CAAC,gBAAD,CAA3E;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,UAAU,GAAGC,OAAO,KAAK;AAC7BC,EAAAA,MAAM,EAAED,OAAO,CAACE,SAAR,EADqB;AAE7BC,EAAAA,UAAU,EAAEH,OAAO,CAACE,SAAR,EAFiB;AAG7BE,EAAAA,UAAU,EAAEJ,OAAO,CAACE,SAAR;AAHiB,CAAL,CAA1B;;AAMA,MAAMG,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMN,OAAO,GAAG,IAAIN,OAAJ,CAAYY,OAAZ,CAAhB;AACA,QAAMC,SAAS,GAAGP,OAAO,CAACE,SAAR,EAAlB;AAEAJ,EAAAA,yBAAyB,CAACS,SAAD,CAAzB;AAEA,SAAO;AACLA,IAAAA,SADK;AAELC,IAAAA,WAAW,EAAER,OAAO,CAACS,SAAR,CAAkBV,UAAlB;AAFR,GAAP;AAID,CAVD;;AAYA,MAAMW,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,MAAIf,OAAO,CAACe,IAAI,CAACJ,SAAN,CAAX,EAA6B;AAC3B,UAAMV,mBAAmB,CAACc,IAAI,CAACJ,SAAN,CAAzB;AACD;;AAED,SAAOI,IAAP;AACD,CAND;;AAQAC,MAAM,CAACC,OAAP,GAAiB;AACfR,EAAAA,MADe;AAEfK,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode, failIfVersionNotSupported } = require('../../../error')\n\n/**\n * ApiVersionResponse => ApiVersions\n *   ErrorCode = INT16\n *   ApiVersions = [ApiVersion]\n *     ApiVersion = ApiKey MinVersion MaxVersion\n *       ApiKey = INT16\n *       MinVersion = INT16\n *       MaxVersion = INT16\n */\n\nconst apiVersion = decoder => ({\n  apiKey: decoder.readInt16(),\n  minVersion: decoder.readInt16(),\n  maxVersion: decoder.readInt16(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const errorCode = decoder.readInt16()\n\n  failIfVersionNotSupported(errorCode)\n\n  return {\n    errorCode,\n    apiVersions: decoder.readArray(apiVersion),\n  }\n}\n\nconst parse = async data => {\n  if (failure(data.errorCode)) {\n    throw createErrorFromCode(data.errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}