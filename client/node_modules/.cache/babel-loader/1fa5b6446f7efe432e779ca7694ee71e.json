{"ast":null,"code":"const {\n  KafkaJSPartialMessageError,\n  KafkaJSUnsupportedMagicByteInMessageSet\n} = require('../../errors');\n\nconst V0Decoder = require('./v0/decoder');\n\nconst V1Decoder = require('./v1/decoder');\n\nconst decodeMessage = (decoder, magicByte) => {\n  switch (magicByte) {\n    case 0:\n      return V0Decoder(decoder);\n\n    case 1:\n      return V1Decoder(decoder);\n\n    default:\n      throw new KafkaJSUnsupportedMagicByteInMessageSet(`Unsupported MessageSet message version, magic byte: ${magicByte}`);\n  }\n};\n\nmodule.exports = (offset, size, decoder) => {\n  // Don't decrement decoder.offset because slice is already considering the current\n  // offset of the decoder\n  const remainingBytes = Buffer.byteLength(decoder.slice(size).buffer);\n\n  if (remainingBytes < size) {\n    throw new KafkaJSPartialMessageError(`Tried to decode a partial message: remainingBytes(${remainingBytes}) < messageSize(${size})`);\n  }\n\n  const crc = decoder.readInt32();\n  const magicByte = decoder.readInt8();\n  const message = decodeMessage(decoder, magicByte);\n  return Object.assign({\n    offset,\n    size,\n    crc,\n    magicByte\n  }, message);\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/message/decoder.js"],"names":["KafkaJSPartialMessageError","KafkaJSUnsupportedMagicByteInMessageSet","require","V0Decoder","V1Decoder","decodeMessage","decoder","magicByte","module","exports","offset","size","remainingBytes","Buffer","byteLength","slice","buffer","crc","readInt32","readInt8","message","Object","assign"],"mappings":"AAAA,MAAM;AACJA,EAAAA,0BADI;AAEJC,EAAAA;AAFI,IAGFC,OAAO,CAAC,cAAD,CAHX;;AAKA,MAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AACA,MAAME,SAAS,GAAGF,OAAO,CAAC,cAAD,CAAzB;;AAEA,MAAMG,aAAa,GAAG,CAACC,OAAD,EAAUC,SAAV,KAAwB;AAC5C,UAAQA,SAAR;AACE,SAAK,CAAL;AACE,aAAOJ,SAAS,CAACG,OAAD,CAAhB;;AACF,SAAK,CAAL;AACE,aAAOF,SAAS,CAACE,OAAD,CAAhB;;AACF;AACE,YAAM,IAAIL,uCAAJ,CACH,uDAAsDM,SAAU,EAD7D,CAAN;AANJ;AAUD,CAXD;;AAaAC,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAD,EAASC,IAAT,EAAeL,OAAf,KAA2B;AAC1C;AACA;AACA,QAAMM,cAAc,GAAGC,MAAM,CAACC,UAAP,CAAkBR,OAAO,CAACS,KAAR,CAAcJ,IAAd,EAAoBK,MAAtC,CAAvB;;AAEA,MAAIJ,cAAc,GAAGD,IAArB,EAA2B;AACzB,UAAM,IAAIX,0BAAJ,CACH,qDAAoDY,cAAe,mBAAkBD,IAAK,GADvF,CAAN;AAGD;;AAED,QAAMM,GAAG,GAAGX,OAAO,CAACY,SAAR,EAAZ;AACA,QAAMX,SAAS,GAAGD,OAAO,CAACa,QAAR,EAAlB;AACA,QAAMC,OAAO,GAAGf,aAAa,CAACC,OAAD,EAAUC,SAAV,CAA7B;AACA,SAAOc,MAAM,CAACC,MAAP,CAAc;AAAEZ,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBM,IAAAA,GAAhB;AAAqBV,IAAAA;AAArB,GAAd,EAAgDa,OAAhD,CAAP;AACD,CAfD","sourcesContent":["const {\n  KafkaJSPartialMessageError,\n  KafkaJSUnsupportedMagicByteInMessageSet,\n} = require('../../errors')\n\nconst V0Decoder = require('./v0/decoder')\nconst V1Decoder = require('./v1/decoder')\n\nconst decodeMessage = (decoder, magicByte) => {\n  switch (magicByte) {\n    case 0:\n      return V0Decoder(decoder)\n    case 1:\n      return V1Decoder(decoder)\n    default:\n      throw new KafkaJSUnsupportedMagicByteInMessageSet(\n        `Unsupported MessageSet message version, magic byte: ${magicByte}`\n      )\n  }\n}\n\nmodule.exports = (offset, size, decoder) => {\n  // Don't decrement decoder.offset because slice is already considering the current\n  // offset of the decoder\n  const remainingBytes = Buffer.byteLength(decoder.slice(size).buffer)\n\n  if (remainingBytes < size) {\n    throw new KafkaJSPartialMessageError(\n      `Tried to decode a partial message: remainingBytes(${remainingBytes}) < messageSize(${size})`\n    )\n  }\n\n  const crc = decoder.readInt32()\n  const magicByte = decoder.readInt8()\n  const message = decodeMessage(decoder, magicByte)\n  return Object.assign({ offset, size, crc, magicByte }, message)\n}\n"]},"metadata":{},"sourceType":"script"}