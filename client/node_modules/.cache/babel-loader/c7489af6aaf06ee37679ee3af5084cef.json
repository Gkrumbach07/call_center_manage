{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n/**\n * DeleteGroups Response (Version: 0) => throttle_time_ms [results]\n *  throttle_time_ms => INT32\n *  results => group_id error_code\n *    group_id => STRING\n *    error_code => INT16\n */\n\n\nconst decodeGroup = decoder => ({\n  groupId: decoder.readString(),\n  errorCode: decoder.readInt16()\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTimeMs = decoder.readInt32();\n  const results = decoder.readArray(decodeGroup);\n\n  for (const result of results) {\n    if (failure(result.errorCode)) {\n      result.error = createErrorFromCode(result.errorCode);\n    }\n  }\n\n  return {\n    throttleTimeMs,\n    results\n  };\n};\n\nconst parse = async data => {\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/deleteGroups/v0/response.js"],"names":["Decoder","require","failure","createErrorFromCode","decodeGroup","decoder","groupId","readString","errorCode","readInt16","decode","rawData","throttleTimeMs","readInt32","results","readArray","result","error","parse","data","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAmCF,OAAO,CAAC,gBAAD,CAAhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,WAAW,GAAGC,OAAO,KAAK;AAC9BC,EAAAA,OAAO,EAAED,OAAO,CAACE,UAAR,EADqB;AAE9BC,EAAAA,SAAS,EAAEH,OAAO,CAACI,SAAR;AAFmB,CAAL,CAA3B;;AAKA,MAAMC,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMN,OAAO,GAAG,IAAIL,OAAJ,CAAYW,OAAZ,CAAhB;AACA,QAAMC,cAAc,GAAGP,OAAO,CAACQ,SAAR,EAAvB;AACA,QAAMC,OAAO,GAAGT,OAAO,CAACU,SAAR,CAAkBX,WAAlB,CAAhB;;AAEA,OAAK,MAAMY,MAAX,IAAqBF,OAArB,EAA8B;AAC5B,QAAIZ,OAAO,CAACc,MAAM,CAACR,SAAR,CAAX,EAA+B;AAC7BQ,MAAAA,MAAM,CAACC,KAAP,GAAed,mBAAmB,CAACa,MAAM,CAACR,SAAR,CAAlC;AACD;AACF;;AACD,SAAO;AACLI,IAAAA,cADK;AAELE,IAAAA;AAFK,GAAP;AAID,CAdD;;AAgBA,MAAMI,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,SAAOA,IAAP;AACD,CAFD;;AAIAC,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,MADe;AAEfQ,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n/**\n * DeleteGroups Response (Version: 0) => throttle_time_ms [results]\n *  throttle_time_ms => INT32\n *  results => group_id error_code\n *    group_id => STRING\n *    error_code => INT16\n */\n\nconst decodeGroup = decoder => ({\n  groupId: decoder.readString(),\n  errorCode: decoder.readInt16(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTimeMs = decoder.readInt32()\n  const results = decoder.readArray(decodeGroup)\n\n  for (const result of results) {\n    if (failure(result.errorCode)) {\n      result.error = createErrorFromCode(result.errorCode)\n    }\n  }\n  return {\n    throttleTimeMs,\n    results,\n  }\n}\n\nconst parse = async data => {\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}