{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  parse: parseV2\n} = require('../v2/response');\n/**\n * OffsetFetch Response (Version: 3) => throttle_time_ms [responses] error_code\n *   throttle_time_ms => INT32\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition offset metadata error_code\n *       partition => INT32\n *       offset => INT64\n *       metadata => NULLABLE_STRING\n *       error_code => INT16\n *   error_code => INT16\n */\n\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  return {\n    throttleTime: decoder.readInt32(),\n    responses: decoder.readArray(decodeResponses),\n    errorCode: decoder.readInt16()\n  };\n};\n\nconst decodeResponses = decoder => ({\n  topic: decoder.readString(),\n  partitions: decoder.readArray(decodePartitions)\n});\n\nconst decodePartitions = decoder => ({\n  partition: decoder.readInt32(),\n  offset: decoder.readInt64().toString(),\n  metadata: decoder.readString(),\n  errorCode: decoder.readInt16()\n});\n\nmodule.exports = {\n  decode,\n  parse: parseV2\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/offsetFetch/v3/response.js"],"names":["Decoder","require","parse","parseV2","decode","rawData","decoder","throttleTime","readInt32","responses","readArray","decodeResponses","errorCode","readInt16","topic","readString","partitions","decodePartitions","partition","offset","readInt64","toString","metadata","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,KAAK,EAAEC;AAAT,IAAqBF,OAAO,CAAC,gBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,OAAO,GAAG,IAAIN,OAAJ,CAAYK,OAAZ,CAAhB;AACA,SAAO;AACLE,IAAAA,YAAY,EAAED,OAAO,CAACE,SAAR,EADT;AAELC,IAAAA,SAAS,EAAEH,OAAO,CAACI,SAAR,CAAkBC,eAAlB,CAFN;AAGLC,IAAAA,SAAS,EAAEN,OAAO,CAACO,SAAR;AAHN,GAAP;AAKD,CAPD;;AASA,MAAMF,eAAe,GAAGL,OAAO,KAAK;AAClCQ,EAAAA,KAAK,EAAER,OAAO,CAACS,UAAR,EAD2B;AAElCC,EAAAA,UAAU,EAAEV,OAAO,CAACI,SAAR,CAAkBO,gBAAlB;AAFsB,CAAL,CAA/B;;AAKA,MAAMA,gBAAgB,GAAGX,OAAO,KAAK;AACnCY,EAAAA,SAAS,EAAEZ,OAAO,CAACE,SAAR,EADwB;AAEnCW,EAAAA,MAAM,EAAEb,OAAO,CAACc,SAAR,GAAoBC,QAApB,EAF2B;AAGnCC,EAAAA,QAAQ,EAAEhB,OAAO,CAACS,UAAR,EAHyB;AAInCH,EAAAA,SAAS,EAAEN,OAAO,CAACO,SAAR;AAJwB,CAAL,CAAhC;;AAOAU,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,MADe;AAEfF,EAAAA,KAAK,EAAEC;AAFQ,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV2 } = require('../v2/response')\n\n/**\n * OffsetFetch Response (Version: 3) => throttle_time_ms [responses] error_code\n *   throttle_time_ms => INT32\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition offset metadata error_code\n *       partition => INT32\n *       offset => INT64\n *       metadata => NULLABLE_STRING\n *       error_code => INT16\n *   error_code => INT16\n */\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  return {\n    throttleTime: decoder.readInt32(),\n    responses: decoder.readArray(decodeResponses),\n    errorCode: decoder.readInt16(),\n  }\n}\n\nconst decodeResponses = decoder => ({\n  topic: decoder.readString(),\n  partitions: decoder.readArray(decodePartitions),\n})\n\nconst decodePartitions = decoder => ({\n  partition: decoder.readInt32(),\n  offset: decoder.readInt64().toString(),\n  metadata: decoder.readString(),\n  errorCode: decoder.readInt16(),\n})\n\nmodule.exports = {\n  decode,\n  parse: parseV2,\n}\n"]},"metadata":{},"sourceType":"script"}