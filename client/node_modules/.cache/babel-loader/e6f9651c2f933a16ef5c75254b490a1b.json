{"ast":null,"code":"const Encoder = require('../../encoder');\n\nconst crc32 = require('../../crc32');\n\nconst {\n  Types: Compression,\n  COMPRESSION_CODEC_MASK\n} = require('../compression');\n/**\n * v0\n * Message => Crc MagicByte Attributes Key Value\n *   Crc => int32\n *   MagicByte => int8\n *   Attributes => int8\n *   Key => bytes\n *   Value => bytes\n */\n\n\nmodule.exports = ({\n  compression = Compression.None,\n  key,\n  value\n}) => {\n  const content = new Encoder().writeInt8(0) // magicByte\n  .writeInt8(compression & COMPRESSION_CODEC_MASK).writeBytes(key).writeBytes(value);\n  const crc = crc32(content);\n  return new Encoder().writeInt32(crc).writeEncoder(content);\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/message/v0/index.js"],"names":["Encoder","require","crc32","Types","Compression","COMPRESSION_CODEC_MASK","module","exports","compression","None","key","value","content","writeInt8","writeBytes","crc","writeInt32","writeEncoder"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,aAAD,CAArB;;AACA,MAAM;AAAEE,EAAAA,KAAK,EAAEC,WAAT;AAAsBC,EAAAA;AAAtB,IAAiDJ,OAAO,CAAC,gBAAD,CAA9D;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAK,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,WAAW,GAAGJ,WAAW,CAACK,IAA5B;AAAkCC,EAAAA,GAAlC;AAAuCC,EAAAA;AAAvC,CAAD,KAAoD;AACnE,QAAMC,OAAO,GAAG,IAAIZ,OAAJ,GACba,SADa,CACH,CADG,EACA;AADA,GAEbA,SAFa,CAEHL,WAAW,GAAGH,sBAFX,EAGbS,UAHa,CAGFJ,GAHE,EAIbI,UAJa,CAIFH,KAJE,CAAhB;AAMA,QAAMI,GAAG,GAAGb,KAAK,CAACU,OAAD,CAAjB;AACA,SAAO,IAAIZ,OAAJ,GAAcgB,UAAd,CAAyBD,GAAzB,EAA8BE,YAA9B,CAA2CL,OAA3C,CAAP;AACD,CATD","sourcesContent":["const Encoder = require('../../encoder')\nconst crc32 = require('../../crc32')\nconst { Types: Compression, COMPRESSION_CODEC_MASK } = require('../compression')\n\n/**\n * v0\n * Message => Crc MagicByte Attributes Key Value\n *   Crc => int32\n *   MagicByte => int8\n *   Attributes => int8\n *   Key => bytes\n *   Value => bytes\n */\n\nmodule.exports = ({ compression = Compression.None, key, value }) => {\n  const content = new Encoder()\n    .writeInt8(0) // magicByte\n    .writeInt8(compression & COMPRESSION_CODEC_MASK)\n    .writeBytes(key)\n    .writeBytes(value)\n\n  const crc = crc32(content)\n  return new Encoder().writeInt32(crc).writeEncoder(content)\n}\n"]},"metadata":{},"sourceType":"script"}