{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  parse: parseV0\n} = require('../v0/response');\n\nconst MessageSetDecoder = require('../../../messageSet/decoder');\n/**\n * Fetch Response (Version: 1) => throttle_time_ms [responses]\n *   throttle_time_ms => INT32\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition_header record_set\n *       partition_header => partition error_code high_watermark\n *         partition => INT32\n *         error_code => INT16\n *         high_watermark => INT64\n *       record_set => RECORDS\n */\n\n\nconst decodePartition = async decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  highWatermark: decoder.readInt64().toString(),\n  messages: await MessageSetDecoder(decoder)\n});\n\nconst decodeResponse = async decoder => ({\n  topicName: decoder.readString(),\n  partitions: await decoder.readArrayAsync(decodePartition)\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const responses = await decoder.readArrayAsync(decodeResponse);\n  return {\n    throttleTime,\n    responses\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/fetch/v1/response.js"],"names":["Decoder","require","parse","parseV0","MessageSetDecoder","decodePartition","decoder","partition","readInt32","errorCode","readInt16","highWatermark","readInt64","toString","messages","decodeResponse","topicName","readString","partitions","readArrayAsync","decode","rawData","throttleTime","responses","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,KAAK,EAAEC;AAAT,IAAqBF,OAAO,CAAC,gBAAD,CAAlC;;AACA,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,6BAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,eAAe,GAAG,MAAMC,OAAN,KAAkB;AACxCC,EAAAA,SAAS,EAAED,OAAO,CAACE,SAAR,EAD6B;AAExCC,EAAAA,SAAS,EAAEH,OAAO,CAACI,SAAR,EAF6B;AAGxCC,EAAAA,aAAa,EAAEL,OAAO,CAACM,SAAR,GAAoBC,QAApB,EAHyB;AAIxCC,EAAAA,QAAQ,EAAE,MAAMV,iBAAiB,CAACE,OAAD;AAJO,CAAlB,CAAxB;;AAOA,MAAMS,cAAc,GAAG,MAAMT,OAAN,KAAkB;AACvCU,EAAAA,SAAS,EAAEV,OAAO,CAACW,UAAR,EAD4B;AAEvCC,EAAAA,UAAU,EAAE,MAAMZ,OAAO,CAACa,cAAR,CAAuBd,eAAvB;AAFqB,CAAlB,CAAvB;;AAKA,MAAMe,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMf,OAAO,GAAG,IAAIN,OAAJ,CAAYqB,OAAZ,CAAhB;AACA,QAAMC,YAAY,GAAGhB,OAAO,CAACE,SAAR,EAArB;AACA,QAAMe,SAAS,GAAG,MAAMjB,OAAO,CAACa,cAAR,CAAuBJ,cAAvB,CAAxB;AAEA,SAAO;AACLO,IAAAA,YADK;AAELC,IAAAA;AAFK,GAAP;AAID,CATD;;AAWAC,MAAM,CAACC,OAAP,GAAiB;AACfL,EAAAA,MADe;AAEflB,EAAAA,KAAK,EAAEC;AAFQ,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV0 } = require('../v0/response')\nconst MessageSetDecoder = require('../../../messageSet/decoder')\n\n/**\n * Fetch Response (Version: 1) => throttle_time_ms [responses]\n *   throttle_time_ms => INT32\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition_header record_set\n *       partition_header => partition error_code high_watermark\n *         partition => INT32\n *         error_code => INT16\n *         high_watermark => INT64\n *       record_set => RECORDS\n */\n\nconst decodePartition = async decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  highWatermark: decoder.readInt64().toString(),\n  messages: await MessageSetDecoder(decoder),\n})\n\nconst decodeResponse = async decoder => ({\n  topicName: decoder.readString(),\n  partitions: await decoder.readArrayAsync(decodePartition),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const responses = await decoder.readArrayAsync(decodeResponse)\n\n  return {\n    throttleTime,\n    responses,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"]},"metadata":{},"sourceType":"script"}