{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n/*\n * CreatePartitions Response (Version: 0) => throttle_time_ms [topic_errors]\n *   throttle_time_ms => INT32\n *   topic_errors => topic error_code error_message\n *     topic => STRING\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n */\n\n\nconst topicNameComparator = (a, b) => a.topic.localeCompare(b.topic);\n\nconst topicErrors = decoder => ({\n  topic: decoder.readString(),\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString()\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  return {\n    throttleTime,\n    topicErrors: decoder.readArray(topicErrors).sort(topicNameComparator)\n  };\n};\n\nconst parse = async data => {\n  const topicsWithError = data.topicErrors.filter(({\n    errorCode\n  }) => failure(errorCode));\n\n  if (topicsWithError.length > 0) {\n    throw createErrorFromCode(topicsWithError[0].errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/createPartitions/v0/response.js"],"names":["Decoder","require","failure","createErrorFromCode","topicNameComparator","a","b","topic","localeCompare","topicErrors","decoder","readString","errorCode","readInt16","errorMessage","decode","rawData","throttleTime","readInt32","readArray","sort","parse","data","topicsWithError","filter","length","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAmCF,OAAO,CAAC,gBAAD,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,mBAAmB,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,KAAF,CAAQC,aAAR,CAAsBF,CAAC,CAACC,KAAxB,CAAtC;;AAEA,MAAME,WAAW,GAAGC,OAAO,KAAK;AAC9BH,EAAAA,KAAK,EAAEG,OAAO,CAACC,UAAR,EADuB;AAE9BC,EAAAA,SAAS,EAAEF,OAAO,CAACG,SAAR,EAFmB;AAG9BC,EAAAA,YAAY,EAAEJ,OAAO,CAACC,UAAR;AAHgB,CAAL,CAA3B;;AAMA,MAAMI,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMN,OAAO,GAAG,IAAIV,OAAJ,CAAYgB,OAAZ,CAAhB;AACA,QAAMC,YAAY,GAAGP,OAAO,CAACQ,SAAR,EAArB;AACA,SAAO;AACLD,IAAAA,YADK;AAELR,IAAAA,WAAW,EAAEC,OAAO,CAACS,SAAR,CAAkBV,WAAlB,EAA+BW,IAA/B,CAAoChB,mBAApC;AAFR,GAAP;AAID,CAPD;;AASA,MAAMiB,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,QAAMC,eAAe,GAAGD,IAAI,CAACb,WAAL,CAAiBe,MAAjB,CAAwB,CAAC;AAAEZ,IAAAA;AAAF,GAAD,KAAmBV,OAAO,CAACU,SAAD,CAAlD,CAAxB;;AACA,MAAIW,eAAe,CAACE,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,UAAMtB,mBAAmB,CAACoB,eAAe,CAAC,CAAD,CAAf,CAAmBX,SAApB,CAAzB;AACD;;AAED,SAAOU,IAAP;AACD,CAPD;;AASAI,MAAM,CAACC,OAAP,GAAiB;AACfZ,EAAAA,MADe;AAEfM,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/*\n * CreatePartitions Response (Version: 0) => throttle_time_ms [topic_errors]\n *   throttle_time_ms => INT32\n *   topic_errors => topic error_code error_message\n *     topic => STRING\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n */\n\nconst topicNameComparator = (a, b) => a.topic.localeCompare(b.topic)\n\nconst topicErrors = decoder => ({\n  topic: decoder.readString(),\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  return {\n    throttleTime,\n    topicErrors: decoder.readArray(topicErrors).sort(topicNameComparator),\n  }\n}\n\nconst parse = async data => {\n  const topicsWithError = data.topicErrors.filter(({ errorCode }) => failure(errorCode))\n  if (topicsWithError.length > 0) {\n    throw createErrorFromCode(topicsWithError[0].errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}