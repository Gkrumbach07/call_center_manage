{"ast":null,"code":"const {\n  assign\n} = Object;\nconst LEVELS = {\n  NOTHING: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 4,\n  DEBUG: 5\n};\n\nconst createLevel = (label, level, currentLevel, namespace, logFunction) => (message, extra = {}) => {\n  if (level > currentLevel()) return;\n  logFunction({\n    namespace,\n    level,\n    label,\n    log: assign({\n      timestamp: new Date().toISOString(),\n      logger: 'kafkajs',\n      message\n    }, extra)\n  });\n};\n\nconst evaluateLogLevel = logLevel => {\n  const envLogLevel = (process.env.KAFKAJS_LOG_LEVEL || '').toUpperCase();\n  return LEVELS[envLogLevel] == null ? logLevel : LEVELS[envLogLevel];\n};\n\nconst createLogger = ({\n  level = LEVELS.INFO,\n  logCreator\n} = {}) => {\n  let logLevel = evaluateLogLevel(level);\n  const logFunction = logCreator(logLevel);\n\n  const createNamespace = (namespace, logLevel = null) => {\n    const namespaceLogLevel = evaluateLogLevel(logLevel);\n    return createLogFunctions(namespace, namespaceLogLevel);\n  };\n\n  const createLogFunctions = (namespace, namespaceLogLevel = null) => {\n    const currentLogLevel = () => namespaceLogLevel == null ? logLevel : namespaceLogLevel;\n\n    const logger = {\n      info: createLevel('INFO', LEVELS.INFO, currentLogLevel, namespace, logFunction),\n      error: createLevel('ERROR', LEVELS.ERROR, currentLogLevel, namespace, logFunction),\n      warn: createLevel('WARN', LEVELS.WARN, currentLogLevel, namespace, logFunction),\n      debug: createLevel('DEBUG', LEVELS.DEBUG, currentLogLevel, namespace, logFunction)\n    };\n    return assign(logger, {\n      namespace: createNamespace,\n      setLogLevel: newLevel => {\n        logLevel = newLevel;\n      }\n    });\n  };\n\n  return createLogFunctions();\n};\n\nmodule.exports = {\n  LEVELS,\n  createLogger\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/loggers/index.js"],"names":["assign","Object","LEVELS","NOTHING","ERROR","WARN","INFO","DEBUG","createLevel","label","level","currentLevel","namespace","logFunction","message","extra","log","timestamp","Date","toISOString","logger","evaluateLogLevel","logLevel","envLogLevel","process","env","KAFKAJS_LOG_LEVEL","toUpperCase","createLogger","logCreator","createNamespace","namespaceLogLevel","createLogFunctions","currentLogLevel","info","error","warn","debug","setLogLevel","newLevel","module","exports"],"mappings":"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","sourcesContent":["const { assign } = Object\n\nconst LEVELS = {\n  NOTHING: 0,\n  ERROR: 1,\n  WARN: 2,\n  INFO: 4,\n  DEBUG: 5,\n}\n\nconst createLevel = (label, level, currentLevel, namespace, logFunction) => (\n  message,\n  extra = {}\n) => {\n  if (level > currentLevel()) return\n  logFunction({\n    namespace,\n    level,\n    label,\n    log: assign(\n      {\n        timestamp: new Date().toISOString(),\n        logger: 'kafkajs',\n        message,\n      },\n      extra\n    ),\n  })\n}\n\nconst evaluateLogLevel = logLevel => {\n  const envLogLevel = (process.env.KAFKAJS_LOG_LEVEL || '').toUpperCase()\n  return LEVELS[envLogLevel] == null ? logLevel : LEVELS[envLogLevel]\n}\n\nconst createLogger = ({ level = LEVELS.INFO, logCreator } = {}) => {\n  let logLevel = evaluateLogLevel(level)\n  const logFunction = logCreator(logLevel)\n\n  const createNamespace = (namespace, logLevel = null) => {\n    const namespaceLogLevel = evaluateLogLevel(logLevel)\n    return createLogFunctions(namespace, namespaceLogLevel)\n  }\n\n  const createLogFunctions = (namespace, namespaceLogLevel = null) => {\n    const currentLogLevel = () => (namespaceLogLevel == null ? logLevel : namespaceLogLevel)\n    const logger = {\n      info: createLevel('INFO', LEVELS.INFO, currentLogLevel, namespace, logFunction),\n      error: createLevel('ERROR', LEVELS.ERROR, currentLogLevel, namespace, logFunction),\n      warn: createLevel('WARN', LEVELS.WARN, currentLogLevel, namespace, logFunction),\n      debug: createLevel('DEBUG', LEVELS.DEBUG, currentLogLevel, namespace, logFunction),\n    }\n\n    return assign(logger, {\n      namespace: createNamespace,\n      setLogLevel: newLevel => {\n        logLevel = newLevel\n      },\n    })\n  }\n\n  return createLogFunctions()\n}\n\nmodule.exports = {\n  LEVELS,\n  createLogger,\n}\n"]},"metadata":{},"sourceType":"script"}