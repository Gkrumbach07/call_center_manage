{"ast":null,"code":"const Long = require('../utils/long');\n\nconst INT8_SIZE = 1;\nconst INT16_SIZE = 2;\nconst INT32_SIZE = 4;\nconst INT64_SIZE = 8;\nconst MOST_SIGNIFICANT_BIT = 0x80; // 128\n\nconst OTHER_BITS = 0x7f; // 127\n\nmodule.exports = class Decoder {\n  static int32Size() {\n    return INT32_SIZE;\n  }\n\n  static decodeZigZag(value) {\n    return value >>> 1 ^ -(value & 1);\n  }\n\n  static decodeZigZag64(longValue) {\n    return longValue.shiftRightUnsigned(1).xor(longValue.and(Long.fromInt(1)).negate());\n  }\n\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.offset = 0;\n  }\n\n  readInt8() {\n    const value = this.buffer.readInt8(this.offset);\n    this.offset += INT8_SIZE;\n    return value;\n  }\n\n  canReadInt16() {\n    return this.canReadBytes(INT16_SIZE);\n  }\n\n  readInt16() {\n    const value = this.buffer.readInt16BE(this.offset);\n    this.offset += INT16_SIZE;\n    return value;\n  }\n\n  canReadInt32() {\n    return this.canReadBytes(INT32_SIZE);\n  }\n\n  readInt32() {\n    const value = this.buffer.readInt32BE(this.offset);\n    this.offset += INT32_SIZE;\n    return value;\n  }\n\n  canReadInt64() {\n    return this.canReadBytes(INT64_SIZE);\n  }\n\n  readInt64() {\n    const first = this.buffer[this.offset];\n    const last = this.buffer[this.offset + 7];\n    const low = (first << 24) + // Overflow\n    this.buffer[this.offset + 1] * 2 ** 16 + this.buffer[this.offset + 2] * 2 ** 8 + this.buffer[this.offset + 3];\n    const high = this.buffer[this.offset + 4] * 2 ** 24 + this.buffer[this.offset + 5] * 2 ** 16 + this.buffer[this.offset + 6] * 2 ** 8 + last;\n    this.offset += INT64_SIZE;\n    return (BigInt(low) << 32n) + BigInt(high);\n  }\n\n  readString() {\n    const byteLength = this.readInt16();\n\n    if (byteLength === -1) {\n      return null;\n    }\n\n    const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength);\n    const value = stringBuffer.toString('utf8');\n    this.offset += byteLength;\n    return value;\n  }\n\n  readVarIntString() {\n    const byteLength = this.readVarInt();\n\n    if (byteLength === -1) {\n      return null;\n    }\n\n    const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength);\n    const value = stringBuffer.toString('utf8');\n    this.offset += byteLength;\n    return value;\n  }\n\n  canReadBytes(length) {\n    return Buffer.byteLength(this.buffer) - this.offset >= length;\n  }\n\n  readBytes(byteLength = this.readInt32()) {\n    if (byteLength === -1) {\n      return null;\n    }\n\n    const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength);\n    this.offset += byteLength;\n    return stringBuffer;\n  }\n\n  readVarIntBytes() {\n    const byteLength = this.readVarInt();\n\n    if (byteLength === -1) {\n      return null;\n    }\n\n    const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength);\n    this.offset += byteLength;\n    return stringBuffer;\n  }\n\n  readBoolean() {\n    return this.readInt8() === 1;\n  }\n\n  readAll() {\n    const result = this.buffer.slice(this.offset);\n    this.offset += Buffer.byteLength(this.buffer);\n    return result;\n  }\n\n  readArray(reader) {\n    const length = this.readInt32();\n\n    if (length === -1) {\n      return [];\n    }\n\n    const array = new Array(length);\n\n    for (let i = 0; i < length; i++) {\n      array[i] = reader(this);\n    }\n\n    return array;\n  }\n\n  readVarIntArray(reader) {\n    const length = this.readVarInt();\n\n    if (length === -1) {\n      return [];\n    }\n\n    const array = new Array(length);\n\n    for (let i = 0; i < length; i++) {\n      array[i] = reader(this);\n    }\n\n    return array;\n  }\n\n  async readArrayAsync(reader) {\n    const length = this.readInt32();\n\n    if (length === -1) {\n      return [];\n    }\n\n    const array = new Array(length);\n\n    for (let i = 0; i < length; i++) {\n      array[i] = await reader(this);\n    }\n\n    return array;\n  }\n\n  readVarInt() {\n    let currentByte;\n    let result = 0;\n    let i = 0;\n\n    do {\n      currentByte = this.buffer[this.offset++];\n      result += (currentByte & OTHER_BITS) << i;\n      i += 7;\n    } while (currentByte >= MOST_SIGNIFICANT_BIT);\n\n    return Decoder.decodeZigZag(result);\n  }\n\n  readVarLong() {\n    let currentByte;\n    let result = Long.fromInt(0);\n    let i = 0;\n\n    do {\n      currentByte = this.buffer[this.offset++];\n      result = result.add(Long.fromInt(currentByte & OTHER_BITS).shiftLeft(i));\n      i += 7;\n    } while (currentByte >= MOST_SIGNIFICANT_BIT);\n\n    return Decoder.decodeZigZag64(result);\n  }\n\n  slice(size) {\n    return new Decoder(this.buffer.slice(this.offset, this.offset + size));\n  }\n\n  forward(size) {\n    this.offset += size;\n  }\n\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/decoder.js"],"names":["Long","require","INT8_SIZE","INT16_SIZE","INT32_SIZE","INT64_SIZE","MOST_SIGNIFICANT_BIT","OTHER_BITS","module","exports","Decoder","int32Size","decodeZigZag","value","decodeZigZag64","longValue","shiftRightUnsigned","xor","and","fromInt","negate","constructor","buffer","offset","readInt8","canReadInt16","canReadBytes","readInt16","readInt16BE","canReadInt32","readInt32","readInt32BE","canReadInt64","readInt64","first","last","low","high","BigInt","readString","byteLength","stringBuffer","slice","toString","readVarIntString","readVarInt","length","Buffer","readBytes","readVarIntBytes","readBoolean","readAll","result","readArray","reader","array","Array","i","readVarIntArray","readArrayAsync","currentByte","readVarLong","add","shiftLeft","size","forward"],"mappings":"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","sourcesContent":["const Long = require('../utils/long')\n\nconst INT8_SIZE = 1\nconst INT16_SIZE = 2\nconst INT32_SIZE = 4\nconst INT64_SIZE = 8\n\nconst MOST_SIGNIFICANT_BIT = 0x80 // 128\nconst OTHER_BITS = 0x7f // 127\n\nmodule.exports = class Decoder {\n  static int32Size() {\n    return INT32_SIZE\n  }\n\n  static decodeZigZag(value) {\n    return (value >>> 1) ^ -(value & 1)\n  }\n\n  static decodeZigZag64(longValue) {\n    return longValue.shiftRightUnsigned(1).xor(longValue.and(Long.fromInt(1)).negate())\n  }\n\n  constructor(buffer) {\n    this.buffer = buffer\n    this.offset = 0\n  }\n\n  readInt8() {\n    const value = this.buffer.readInt8(this.offset)\n    this.offset += INT8_SIZE\n    return value\n  }\n\n  canReadInt16() {\n    return this.canReadBytes(INT16_SIZE)\n  }\n\n  readInt16() {\n    const value = this.buffer.readInt16BE(this.offset)\n    this.offset += INT16_SIZE\n    return value\n  }\n\n  canReadInt32() {\n    return this.canReadBytes(INT32_SIZE)\n  }\n\n  readInt32() {\n    const value = this.buffer.readInt32BE(this.offset)\n    this.offset += INT32_SIZE\n    return value\n  }\n\n  canReadInt64() {\n    return this.canReadBytes(INT64_SIZE)\n  }\n\n  readInt64() {\n    const first = this.buffer[this.offset]\n    const last = this.buffer[this.offset + 7]\n\n    const low =\n      (first << 24) + // Overflow\n      this.buffer[this.offset + 1] * 2 ** 16 +\n      this.buffer[this.offset + 2] * 2 ** 8 +\n      this.buffer[this.offset + 3]\n    const high =\n      this.buffer[this.offset + 4] * 2 ** 24 +\n      this.buffer[this.offset + 5] * 2 ** 16 +\n      this.buffer[this.offset + 6] * 2 ** 8 +\n      last\n    this.offset += INT64_SIZE\n\n    return (BigInt(low) << 32n) + BigInt(high)\n  }\n\n  readString() {\n    const byteLength = this.readInt16()\n\n    if (byteLength === -1) {\n      return null\n    }\n\n    const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength)\n    const value = stringBuffer.toString('utf8')\n    this.offset += byteLength\n    return value\n  }\n\n  readVarIntString() {\n    const byteLength = this.readVarInt()\n\n    if (byteLength === -1) {\n      return null\n    }\n\n    const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength)\n    const value = stringBuffer.toString('utf8')\n    this.offset += byteLength\n    return value\n  }\n\n  canReadBytes(length) {\n    return Buffer.byteLength(this.buffer) - this.offset >= length\n  }\n\n  readBytes(byteLength = this.readInt32()) {\n    if (byteLength === -1) {\n      return null\n    }\n\n    const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength)\n    this.offset += byteLength\n    return stringBuffer\n  }\n\n  readVarIntBytes() {\n    const byteLength = this.readVarInt()\n\n    if (byteLength === -1) {\n      return null\n    }\n\n    const stringBuffer = this.buffer.slice(this.offset, this.offset + byteLength)\n    this.offset += byteLength\n    return stringBuffer\n  }\n\n  readBoolean() {\n    return this.readInt8() === 1\n  }\n\n  readAll() {\n    const result = this.buffer.slice(this.offset)\n    this.offset += Buffer.byteLength(this.buffer)\n    return result\n  }\n\n  readArray(reader) {\n    const length = this.readInt32()\n\n    if (length === -1) {\n      return []\n    }\n\n    const array = new Array(length)\n    for (let i = 0; i < length; i++) {\n      array[i] = reader(this)\n    }\n\n    return array\n  }\n\n  readVarIntArray(reader) {\n    const length = this.readVarInt()\n\n    if (length === -1) {\n      return []\n    }\n\n    const array = new Array(length)\n    for (let i = 0; i < length; i++) {\n      array[i] = reader(this)\n    }\n\n    return array\n  }\n\n  async readArrayAsync(reader) {\n    const length = this.readInt32()\n\n    if (length === -1) {\n      return []\n    }\n\n    const array = new Array(length)\n    for (let i = 0; i < length; i++) {\n      array[i] = await reader(this)\n    }\n\n    return array\n  }\n\n  readVarInt() {\n    let currentByte\n    let result = 0\n    let i = 0\n\n    do {\n      currentByte = this.buffer[this.offset++]\n      result += (currentByte & OTHER_BITS) << i\n      i += 7\n    } while (currentByte >= MOST_SIGNIFICANT_BIT)\n\n    return Decoder.decodeZigZag(result)\n  }\n\n  readVarLong() {\n    let currentByte\n    let result = Long.fromInt(0)\n    let i = 0\n\n    do {\n      currentByte = this.buffer[this.offset++]\n      result = result.add(Long.fromInt(currentByte & OTHER_BITS).shiftLeft(i))\n      i += 7\n    } while (currentByte >= MOST_SIGNIFICANT_BIT)\n\n    return Decoder.decodeZigZag64(result)\n  }\n\n  slice(size) {\n    return new Decoder(this.buffer.slice(this.offset, this.offset + size))\n  }\n\n  forward(size) {\n    this.offset += size\n  }\n}\n"]},"metadata":{},"sourceType":"script"}