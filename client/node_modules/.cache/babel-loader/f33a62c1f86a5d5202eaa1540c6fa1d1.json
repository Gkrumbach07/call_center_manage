{"ast":null,"code":"const {\n  requests,\n  lookup\n} = require('../../protocol/requests');\n\nconst apiKeys = require('../../protocol/requests/apiKeys');\n\nconst PlainAuthenticator = require('./plain');\n\nconst SCRAM256Authenticator = require('./scram256');\n\nconst SCRAM512Authenticator = require('./scram512');\n\nconst AWSIAMAuthenticator = require('./awsIam');\n\nconst OAuthBearerAuthenticator = require('./oauthBearer');\n\nconst {\n  KafkaJSSASLAuthenticationError\n} = require('../../errors');\n\nconst AUTHENTICATORS = {\n  PLAIN: PlainAuthenticator,\n  'SCRAM-SHA-256': SCRAM256Authenticator,\n  'SCRAM-SHA-512': SCRAM512Authenticator,\n  AWS: AWSIAMAuthenticator,\n  OAUTHBEARER: OAuthBearerAuthenticator\n};\nconst SUPPORTED_MECHANISMS = Object.keys(AUTHENTICATORS);\nconst UNLIMITED_SESSION_LIFETIME = '0';\nmodule.exports = class SASLAuthenticator {\n  constructor(connection, logger, versions, supportAuthenticationProtocol) {\n    this.connection = connection;\n    this.logger = logger;\n    this.sessionLifetime = UNLIMITED_SESSION_LIFETIME;\n    const lookupRequest = lookup(versions);\n    this.saslHandshake = lookupRequest(apiKeys.SaslHandshake, requests.SaslHandshake);\n    this.protocolAuthentication = supportAuthenticationProtocol ? lookupRequest(apiKeys.SaslAuthenticate, requests.SaslAuthenticate) : null;\n  }\n\n  async authenticate() {\n    const mechanism = this.connection.sasl.mechanism.toUpperCase();\n\n    if (!SUPPORTED_MECHANISMS.includes(mechanism)) {\n      throw new KafkaJSSASLAuthenticationError(`SASL ${mechanism} mechanism is not supported by the client`);\n    }\n\n    const handshake = await this.connection.send(this.saslHandshake({\n      mechanism\n    }));\n\n    if (!handshake.enabledMechanisms.includes(mechanism)) {\n      throw new KafkaJSSASLAuthenticationError(`SASL ${mechanism} mechanism is not supported by the server`);\n    }\n\n    const saslAuthenticate = async ({\n      request,\n      response,\n      authExpectResponse\n    }) => {\n      if (this.protocolAuthentication) {\n        const {\n          buffer: requestAuthBytes\n        } = await request.encode();\n        const authResponse = await this.connection.send(this.protocolAuthentication({\n          authBytes: requestAuthBytes\n        })); // `0` is a string because `sessionLifetimeMs` is an int64 encoded as string.\n        // This is not present in SaslAuthenticateV0, so we default to `\"0\"`\n\n        this.sessionLifetime = authResponse.sessionLifetimeMs || UNLIMITED_SESSION_LIFETIME;\n\n        if (!authExpectResponse) {\n          return;\n        }\n\n        const {\n          authBytes: responseAuthBytes\n        } = authResponse;\n        const payloadDecoded = await response.decode(responseAuthBytes);\n        return response.parse(payloadDecoded);\n      }\n\n      return this.connection.authenticate({\n        request,\n        response,\n        authExpectResponse\n      });\n    };\n\n    const Authenticator = AUTHENTICATORS[mechanism];\n    await new Authenticator(this.connection, this.logger, saslAuthenticate).authenticate();\n  }\n\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/broker/saslAuthenticator/index.js"],"names":["requests","lookup","require","apiKeys","PlainAuthenticator","SCRAM256Authenticator","SCRAM512Authenticator","AWSIAMAuthenticator","OAuthBearerAuthenticator","KafkaJSSASLAuthenticationError","AUTHENTICATORS","PLAIN","AWS","OAUTHBEARER","SUPPORTED_MECHANISMS","Object","keys","UNLIMITED_SESSION_LIFETIME","module","exports","SASLAuthenticator","constructor","connection","logger","versions","supportAuthenticationProtocol","sessionLifetime","lookupRequest","saslHandshake","SaslHandshake","protocolAuthentication","SaslAuthenticate","authenticate","mechanism","sasl","toUpperCase","includes","handshake","send","enabledMechanisms","saslAuthenticate","request","response","authExpectResponse","buffer","requestAuthBytes","encode","authResponse","authBytes","sessionLifetimeMs","responseAuthBytes","payloadDecoded","decode","parse","Authenticator"],"mappings":"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","sourcesContent":["const { requests, lookup } = require('../../protocol/requests')\nconst apiKeys = require('../../protocol/requests/apiKeys')\nconst PlainAuthenticator = require('./plain')\nconst SCRAM256Authenticator = require('./scram256')\nconst SCRAM512Authenticator = require('./scram512')\nconst AWSIAMAuthenticator = require('./awsIam')\nconst OAuthBearerAuthenticator = require('./oauthBearer')\nconst { KafkaJSSASLAuthenticationError } = require('../../errors')\n\nconst AUTHENTICATORS = {\n  PLAIN: PlainAuthenticator,\n  'SCRAM-SHA-256': SCRAM256Authenticator,\n  'SCRAM-SHA-512': SCRAM512Authenticator,\n  AWS: AWSIAMAuthenticator,\n  OAUTHBEARER: OAuthBearerAuthenticator,\n}\n\nconst SUPPORTED_MECHANISMS = Object.keys(AUTHENTICATORS)\nconst UNLIMITED_SESSION_LIFETIME = '0'\n\nmodule.exports = class SASLAuthenticator {\n  constructor(connection, logger, versions, supportAuthenticationProtocol) {\n    this.connection = connection\n    this.logger = logger\n    this.sessionLifetime = UNLIMITED_SESSION_LIFETIME\n\n    const lookupRequest = lookup(versions)\n    this.saslHandshake = lookupRequest(apiKeys.SaslHandshake, requests.SaslHandshake)\n    this.protocolAuthentication = supportAuthenticationProtocol\n      ? lookupRequest(apiKeys.SaslAuthenticate, requests.SaslAuthenticate)\n      : null\n  }\n\n  async authenticate() {\n    const mechanism = this.connection.sasl.mechanism.toUpperCase()\n    if (!SUPPORTED_MECHANISMS.includes(mechanism)) {\n      throw new KafkaJSSASLAuthenticationError(\n        `SASL ${mechanism} mechanism is not supported by the client`\n      )\n    }\n\n    const handshake = await this.connection.send(this.saslHandshake({ mechanism }))\n    if (!handshake.enabledMechanisms.includes(mechanism)) {\n      throw new KafkaJSSASLAuthenticationError(\n        `SASL ${mechanism} mechanism is not supported by the server`\n      )\n    }\n\n    const saslAuthenticate = async ({ request, response, authExpectResponse }) => {\n      if (this.protocolAuthentication) {\n        const { buffer: requestAuthBytes } = await request.encode()\n        const authResponse = await this.connection.send(\n          this.protocolAuthentication({ authBytes: requestAuthBytes })\n        )\n\n        // `0` is a string because `sessionLifetimeMs` is an int64 encoded as string.\n        // This is not present in SaslAuthenticateV0, so we default to `\"0\"`\n        this.sessionLifetime = authResponse.sessionLifetimeMs || UNLIMITED_SESSION_LIFETIME\n\n        if (!authExpectResponse) {\n          return\n        }\n\n        const { authBytes: responseAuthBytes } = authResponse\n        const payloadDecoded = await response.decode(responseAuthBytes)\n        return response.parse(payloadDecoded)\n      }\n\n      return this.connection.authenticate({ request, response, authExpectResponse })\n    }\n\n    const Authenticator = AUTHENTICATORS[mechanism]\n    await new Authenticator(this.connection, this.logger, saslAuthenticate).authenticate()\n  }\n}\n"]},"metadata":{},"sourceType":"script"}