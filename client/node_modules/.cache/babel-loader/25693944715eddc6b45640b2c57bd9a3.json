{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  KafkaJSMemberIdRequired\n} = require('../../../../errors');\n\nconst {\n  failure,\n  createErrorFromCode,\n  errorCodes,\n  failIfVersionNotSupported\n} = require('../../../error');\n/**\n * JoinGroup Response (Version: 5) => throttle_time_ms error_code generation_id group_protocol leader_id member_id [members]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   generation_id => INT32\n *   group_protocol => STRING\n *   leader_id => STRING\n *   member_id => STRING\n *   members => member_id group_instance_id metadata\n *     member_id => STRING\n *     group_instance_id => NULLABLE_STRING\n *     member_metadata => BYTES\n */\n\n\nconst {\n  code: MEMBER_ID_REQUIRED_ERROR_CODE\n} = errorCodes.find(e => e.type === 'MEMBER_ID_REQUIRED');\n\nconst parse = async data => {\n  if (failure(data.errorCode)) {\n    if (data.errorCode === MEMBER_ID_REQUIRED_ERROR_CODE) {\n      throw new KafkaJSMemberIdRequired(createErrorFromCode(data.errorCode), {\n        memberId: data.memberId\n      });\n    }\n\n    throw createErrorFromCode(data.errorCode);\n  }\n\n  return data;\n};\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const errorCode = decoder.readInt16();\n  failIfVersionNotSupported(errorCode);\n  return {\n    throttleTime: 0,\n    clientSideThrottleTime: throttleTime,\n    errorCode,\n    generationId: decoder.readInt32(),\n    groupProtocol: decoder.readString(),\n    leaderId: decoder.readString(),\n    memberId: decoder.readString(),\n    members: decoder.readArray(decoder => ({\n      memberId: decoder.readString(),\n      groupInstanceId: decoder.readString(),\n      memberMetadata: decoder.readBytes()\n    }))\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/joinGroup/v5/response.js"],"names":["Decoder","require","KafkaJSMemberIdRequired","failure","createErrorFromCode","errorCodes","failIfVersionNotSupported","code","MEMBER_ID_REQUIRED_ERROR_CODE","find","e","type","parse","data","errorCode","memberId","decode","rawData","decoder","throttleTime","readInt32","readInt16","clientSideThrottleTime","generationId","groupProtocol","readString","leaderId","members","readArray","groupInstanceId","memberMetadata","readBytes","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAA8BD,OAAO,CAAC,oBAAD,CAA3C;;AACA,MAAM;AACJE,EAAAA,OADI;AAEJC,EAAAA,mBAFI;AAGJC,EAAAA,UAHI;AAIJC,EAAAA;AAJI,IAKFL,OAAO,CAAC,gBAAD,CALX;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM;AAAEM,EAAAA,IAAI,EAAEC;AAAR,IAA0CH,UAAU,CAACI,IAAX,CAC9CC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAW,oBAD8B,CAAhD;;AAIA,MAAMC,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,MAAIV,OAAO,CAACU,IAAI,CAACC,SAAN,CAAX,EAA6B;AAC3B,QAAID,IAAI,CAACC,SAAL,KAAmBN,6BAAvB,EAAsD;AACpD,YAAM,IAAIN,uBAAJ,CAA4BE,mBAAmB,CAACS,IAAI,CAACC,SAAN,CAA/C,EAAiE;AACrEC,QAAAA,QAAQ,EAAEF,IAAI,CAACE;AADsD,OAAjE,CAAN;AAGD;;AAED,UAAMX,mBAAmB,CAACS,IAAI,CAACC,SAAN,CAAzB;AACD;;AAED,SAAOD,IAAP;AACD,CAZD;;AAcA,MAAMG,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,OAAO,GAAG,IAAIlB,OAAJ,CAAYiB,OAAZ,CAAhB;AACA,QAAME,YAAY,GAAGD,OAAO,CAACE,SAAR,EAArB;AACA,QAAMN,SAAS,GAAGI,OAAO,CAACG,SAAR,EAAlB;AAEAf,EAAAA,yBAAyB,CAACQ,SAAD,CAAzB;AAEA,SAAO;AACLK,IAAAA,YAAY,EAAE,CADT;AAELG,IAAAA,sBAAsB,EAAEH,YAFnB;AAGLL,IAAAA,SAHK;AAILS,IAAAA,YAAY,EAAEL,OAAO,CAACE,SAAR,EAJT;AAKLI,IAAAA,aAAa,EAAEN,OAAO,CAACO,UAAR,EALV;AAMLC,IAAAA,QAAQ,EAAER,OAAO,CAACO,UAAR,EANL;AAOLV,IAAAA,QAAQ,EAAEG,OAAO,CAACO,UAAR,EAPL;AAQLE,IAAAA,OAAO,EAAET,OAAO,CAACU,SAAR,CAAkBV,OAAO,KAAK;AACrCH,MAAAA,QAAQ,EAAEG,OAAO,CAACO,UAAR,EAD2B;AAErCI,MAAAA,eAAe,EAAEX,OAAO,CAACO,UAAR,EAFoB;AAGrCK,MAAAA,cAAc,EAAEZ,OAAO,CAACa,SAAR;AAHqB,KAAL,CAAzB;AARJ,GAAP;AAcD,CArBD;;AAuBAC,MAAM,CAACC,OAAP,GAAiB;AACfjB,EAAAA,MADe;AAEfJ,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { KafkaJSMemberIdRequired } = require('../../../../errors')\nconst {\n  failure,\n  createErrorFromCode,\n  errorCodes,\n  failIfVersionNotSupported,\n} = require('../../../error')\n\n/**\n * JoinGroup Response (Version: 5) => throttle_time_ms error_code generation_id group_protocol leader_id member_id [members]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   generation_id => INT32\n *   group_protocol => STRING\n *   leader_id => STRING\n *   member_id => STRING\n *   members => member_id group_instance_id metadata\n *     member_id => STRING\n *     group_instance_id => NULLABLE_STRING\n *     member_metadata => BYTES\n */\nconst { code: MEMBER_ID_REQUIRED_ERROR_CODE } = errorCodes.find(\n  e => e.type === 'MEMBER_ID_REQUIRED'\n)\n\nconst parse = async data => {\n  if (failure(data.errorCode)) {\n    if (data.errorCode === MEMBER_ID_REQUIRED_ERROR_CODE) {\n      throw new KafkaJSMemberIdRequired(createErrorFromCode(data.errorCode), {\n        memberId: data.memberId,\n      })\n    }\n\n    throw createErrorFromCode(data.errorCode)\n  }\n\n  return data\n}\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const errorCode = decoder.readInt16()\n\n  failIfVersionNotSupported(errorCode)\n\n  return {\n    throttleTime: 0,\n    clientSideThrottleTime: throttleTime,\n    errorCode,\n    generationId: decoder.readInt32(),\n    groupProtocol: decoder.readString(),\n    leaderId: decoder.readString(),\n    memberId: decoder.readString(),\n    members: decoder.readArray(decoder => ({\n      memberId: decoder.readString(),\n      groupInstanceId: decoder.readString(),\n      memberMetadata: decoder.readBytes(),\n    })),\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}