{"ast":null,"code":"const Encoder = require('../../../encoder');\n\nconst {\n  JoinGroup: apiKey\n} = require('../../apiKeys');\n/**\n * Version 5 adds group_instance_id to identify members across restarts.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-345%3A+Introduce+static+membership+protocol+to+reduce+consumer+rebalances\n *\n * JoinGroup Request (Version: 5) => group_id session_timeout rebalance_timeout member_id group_instance_id protocol_type [group_protocols]\n *   group_id => STRING\n *   session_timeout => INT32\n *   rebalance_timeout => INT32\n *   member_id => STRING\n *   group_instance_id => NULLABLE_STRING\n *   protocol_type => STRING\n *   group_protocols => protocol_name protocol_metadata\n *     protocol_name => STRING\n *     protocol_metadata => BYTES\n */\n\n\nmodule.exports = ({\n  groupId,\n  sessionTimeout,\n  rebalanceTimeout,\n  memberId,\n  groupInstanceId = null,\n  protocolType,\n  groupProtocols\n}) => ({\n  apiKey,\n  apiVersion: 5,\n  apiName: 'JoinGroup',\n  encode: async () => {\n    return new Encoder().writeString(groupId).writeInt32(sessionTimeout).writeInt32(rebalanceTimeout).writeString(memberId).writeString(groupInstanceId).writeString(protocolType).writeArray(groupProtocols.map(encodeGroupProtocols));\n  }\n});\n\nconst encodeGroupProtocols = ({\n  name,\n  metadata = Buffer.alloc(0)\n}) => {\n  return new Encoder().writeString(name).writeBytes(metadata);\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/joinGroup/v5/request.js"],"names":["Encoder","require","JoinGroup","apiKey","module","exports","groupId","sessionTimeout","rebalanceTimeout","memberId","groupInstanceId","protocolType","groupProtocols","apiVersion","apiName","encode","writeString","writeInt32","writeArray","map","encodeGroupProtocols","name","metadata","Buffer","alloc","writeBytes"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,SAAS,EAAEC;AAAb,IAAwBF,OAAO,CAAC,eAAD,CAArC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAChBC,EAAAA,OADgB;AAEhBC,EAAAA,cAFgB;AAGhBC,EAAAA,gBAHgB;AAIhBC,EAAAA,QAJgB;AAKhBC,EAAAA,eAAe,GAAG,IALF;AAMhBC,EAAAA,YANgB;AAOhBC,EAAAA;AAPgB,CAAD,MAQV;AACLT,EAAAA,MADK;AAELU,EAAAA,UAAU,EAAE,CAFP;AAGLC,EAAAA,OAAO,EAAE,WAHJ;AAILC,EAAAA,MAAM,EAAE,YAAY;AAClB,WAAO,IAAIf,OAAJ,GACJgB,WADI,CACQV,OADR,EAEJW,UAFI,CAEOV,cAFP,EAGJU,UAHI,CAGOT,gBAHP,EAIJQ,WAJI,CAIQP,QAJR,EAKJO,WALI,CAKQN,eALR,EAMJM,WANI,CAMQL,YANR,EAOJO,UAPI,CAOON,cAAc,CAACO,GAAf,CAAmBC,oBAAnB,CAPP,CAAP;AAQD;AAbI,CARU,CAAjB;;AAwBA,MAAMA,oBAAoB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAQ,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb;AAAnB,CAAD,KAA0C;AACrE,SAAO,IAAIxB,OAAJ,GAAcgB,WAAd,CAA0BK,IAA1B,EAAgCI,UAAhC,CAA2CH,QAA3C,CAAP;AACD,CAFD","sourcesContent":["const Encoder = require('../../../encoder')\nconst { JoinGroup: apiKey } = require('../../apiKeys')\n\n/**\n * Version 5 adds group_instance_id to identify members across restarts.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-345%3A+Introduce+static+membership+protocol+to+reduce+consumer+rebalances\n *\n * JoinGroup Request (Version: 5) => group_id session_timeout rebalance_timeout member_id group_instance_id protocol_type [group_protocols]\n *   group_id => STRING\n *   session_timeout => INT32\n *   rebalance_timeout => INT32\n *   member_id => STRING\n *   group_instance_id => NULLABLE_STRING\n *   protocol_type => STRING\n *   group_protocols => protocol_name protocol_metadata\n *     protocol_name => STRING\n *     protocol_metadata => BYTES\n */\n\nmodule.exports = ({\n  groupId,\n  sessionTimeout,\n  rebalanceTimeout,\n  memberId,\n  groupInstanceId = null,\n  protocolType,\n  groupProtocols,\n}) => ({\n  apiKey,\n  apiVersion: 5,\n  apiName: 'JoinGroup',\n  encode: async () => {\n    return new Encoder()\n      .writeString(groupId)\n      .writeInt32(sessionTimeout)\n      .writeInt32(rebalanceTimeout)\n      .writeString(memberId)\n      .writeString(groupInstanceId)\n      .writeString(protocolType)\n      .writeArray(groupProtocols.map(encodeGroupProtocols))\n  },\n})\n\nconst encodeGroupProtocols = ({ name, metadata = Buffer.alloc(0) }) => {\n  return new Encoder().writeString(name).writeBytes(metadata)\n}\n"]},"metadata":{},"sourceType":"script"}