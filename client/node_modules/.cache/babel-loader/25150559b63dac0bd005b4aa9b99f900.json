{"ast":null,"code":"const {\n  parse\n} = require('../v0/response');\n\nconst Decoder = require('../../../decoder');\n/**\n * Starting in version 1, on quota violation, brokers send out responses before throttling.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication\n * Version 1 also introduces a new resource pattern type field.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-290%3A+Support+for+Prefixed+ACLs\n *\n * DescribeAcls Response (Version: 1) => throttle_time_ms error_code error_message [resources]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   resources => resource_type resource_name resource_pattern_type [acls]\n *     resource_type => INT8\n *     resource_name => STRING\n *     resource_pattern_type => INT8\n *     acls => principal host operation permission_type\n *       principal => STRING\n *       host => STRING\n *       operation => INT8\n *       permission_type => INT8\n */\n\n\nconst decodeAcls = decoder => ({\n  principal: decoder.readString(),\n  host: decoder.readString(),\n  operation: decoder.readInt8(),\n  permissionType: decoder.readInt8()\n});\n\nconst decodeResources = decoder => ({\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  resourcePatternType: decoder.readInt8(),\n  acls: decoder.readArray(decodeAcls)\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const errorCode = decoder.readInt16();\n  const errorMessage = decoder.readString();\n  const resources = decoder.readArray(decodeResources);\n  return {\n    throttleTime: 0,\n    clientSideThrottleTime: throttleTime,\n    errorCode,\n    errorMessage,\n    resources\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/describeAcls/v1/response.js"],"names":["parse","require","Decoder","decodeAcls","decoder","principal","readString","host","operation","readInt8","permissionType","decodeResources","resourceType","resourceName","resourcePatternType","acls","readArray","decode","rawData","throttleTime","readInt32","errorCode","readInt16","errorMessage","resources","clientSideThrottleTime","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,gBAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,UAAU,GAAGC,OAAO,KAAK;AAC7BC,EAAAA,SAAS,EAAED,OAAO,CAACE,UAAR,EADkB;AAE7BC,EAAAA,IAAI,EAAEH,OAAO,CAACE,UAAR,EAFuB;AAG7BE,EAAAA,SAAS,EAAEJ,OAAO,CAACK,QAAR,EAHkB;AAI7BC,EAAAA,cAAc,EAAEN,OAAO,CAACK,QAAR;AAJa,CAAL,CAA1B;;AAOA,MAAME,eAAe,GAAGP,OAAO,KAAK;AAClCQ,EAAAA,YAAY,EAAER,OAAO,CAACK,QAAR,EADoB;AAElCI,EAAAA,YAAY,EAAET,OAAO,CAACE,UAAR,EAFoB;AAGlCQ,EAAAA,mBAAmB,EAAEV,OAAO,CAACK,QAAR,EAHa;AAIlCM,EAAAA,IAAI,EAAEX,OAAO,CAACY,SAAR,CAAkBb,UAAlB;AAJ4B,CAAL,CAA/B;;AAOA,MAAMc,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMd,OAAO,GAAG,IAAIF,OAAJ,CAAYgB,OAAZ,CAAhB;AACA,QAAMC,YAAY,GAAGf,OAAO,CAACgB,SAAR,EAArB;AACA,QAAMC,SAAS,GAAGjB,OAAO,CAACkB,SAAR,EAAlB;AACA,QAAMC,YAAY,GAAGnB,OAAO,CAACE,UAAR,EAArB;AACA,QAAMkB,SAAS,GAAGpB,OAAO,CAACY,SAAR,CAAkBL,eAAlB,CAAlB;AAEA,SAAO;AACLQ,IAAAA,YAAY,EAAE,CADT;AAELM,IAAAA,sBAAsB,EAAEN,YAFnB;AAGLE,IAAAA,SAHK;AAILE,IAAAA,YAJK;AAKLC,IAAAA;AALK,GAAP;AAOD,CAdD;;AAgBAE,MAAM,CAACC,OAAP,GAAiB;AACfV,EAAAA,MADe;AAEfjB,EAAAA;AAFe,CAAjB","sourcesContent":["const { parse } = require('../v0/response')\nconst Decoder = require('../../../decoder')\n\n/**\n * Starting in version 1, on quota violation, brokers send out responses before throttling.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-219+-+Improve+quota+communication\n * Version 1 also introduces a new resource pattern type field.\n * @see https://cwiki.apache.org/confluence/display/KAFKA/KIP-290%3A+Support+for+Prefixed+ACLs\n *\n * DescribeAcls Response (Version: 1) => throttle_time_ms error_code error_message [resources]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   resources => resource_type resource_name resource_pattern_type [acls]\n *     resource_type => INT8\n *     resource_name => STRING\n *     resource_pattern_type => INT8\n *     acls => principal host operation permission_type\n *       principal => STRING\n *       host => STRING\n *       operation => INT8\n *       permission_type => INT8\n */\nconst decodeAcls = decoder => ({\n  principal: decoder.readString(),\n  host: decoder.readString(),\n  operation: decoder.readInt8(),\n  permissionType: decoder.readInt8(),\n})\n\nconst decodeResources = decoder => ({\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  resourcePatternType: decoder.readInt8(),\n  acls: decoder.readArray(decodeAcls),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const errorCode = decoder.readInt16()\n  const errorMessage = decoder.readString()\n  const resources = decoder.readArray(decodeResources)\n\n  return {\n    throttleTime: 0,\n    clientSideThrottleTime: throttleTime,\n    errorCode,\n    errorMessage,\n    resources,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}