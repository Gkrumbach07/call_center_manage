{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n/**\n * CreateAcls Response (Version: 0) => throttle_time_ms [creation_responses]\n *   throttle_time_ms => INT32\n *   creation_responses => error_code error_message\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n */\n\n\nconst decodeCreationResponse = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString()\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const creationResponses = decoder.readArray(decodeCreationResponse);\n  return {\n    throttleTime,\n    creationResponses\n  };\n};\n\nconst parse = async data => {\n  const creationResponsesWithError = data.creationResponses.filter(({\n    errorCode\n  }) => failure(errorCode));\n\n  if (creationResponsesWithError.length > 0) {\n    throw createErrorFromCode(creationResponsesWithError[0].errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/createAcls/v0/response.js"],"names":["Decoder","require","failure","createErrorFromCode","decodeCreationResponse","decoder","errorCode","readInt16","errorMessage","readString","decode","rawData","throttleTime","readInt32","creationResponses","readArray","parse","data","creationResponsesWithError","filter","length","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAmCF,OAAO,CAAC,gBAAD,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,sBAAsB,GAAGC,OAAO,KAAK;AACzCC,EAAAA,SAAS,EAAED,OAAO,CAACE,SAAR,EAD8B;AAEzCC,EAAAA,YAAY,EAAEH,OAAO,CAACI,UAAR;AAF2B,CAAL,CAAtC;;AAKA,MAAMC,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMN,OAAO,GAAG,IAAIL,OAAJ,CAAYW,OAAZ,CAAhB;AACA,QAAMC,YAAY,GAAGP,OAAO,CAACQ,SAAR,EAArB;AACA,QAAMC,iBAAiB,GAAGT,OAAO,CAACU,SAAR,CAAkBX,sBAAlB,CAA1B;AAEA,SAAO;AACLQ,IAAAA,YADK;AAELE,IAAAA;AAFK,GAAP;AAID,CATD;;AAWA,MAAME,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,QAAMC,0BAA0B,GAAGD,IAAI,CAACH,iBAAL,CAAuBK,MAAvB,CAA8B,CAAC;AAAEb,IAAAA;AAAF,GAAD,KAC/DJ,OAAO,CAACI,SAAD,CAD0B,CAAnC;;AAIA,MAAIY,0BAA0B,CAACE,MAA3B,GAAoC,CAAxC,EAA2C;AACzC,UAAMjB,mBAAmB,CAACe,0BAA0B,CAAC,CAAD,CAA1B,CAA8BZ,SAA/B,CAAzB;AACD;;AAED,SAAOW,IAAP;AACD,CAVD;;AAYAI,MAAM,CAACC,OAAP,GAAiB;AACfZ,EAAAA,MADe;AAEfM,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * CreateAcls Response (Version: 0) => throttle_time_ms [creation_responses]\n *   throttle_time_ms => INT32\n *   creation_responses => error_code error_message\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n */\n\nconst decodeCreationResponse = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const creationResponses = decoder.readArray(decodeCreationResponse)\n\n  return {\n    throttleTime,\n    creationResponses,\n  }\n}\n\nconst parse = async data => {\n  const creationResponsesWithError = data.creationResponses.filter(({ errorCode }) =>\n    failure(errorCode)\n  )\n\n  if (creationResponsesWithError.length > 0) {\n    throw createErrorFromCode(creationResponsesWithError[0].errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}