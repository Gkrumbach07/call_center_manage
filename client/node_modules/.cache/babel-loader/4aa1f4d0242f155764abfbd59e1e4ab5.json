{"ast":null,"code":"const Encoder = require('../../../encoder');\n\nconst {\n  Fetch: apiKey\n} = require('../../apiKeys');\n\nconst ISOLATION_LEVEL = require('../../../isolationLevel');\n/**\n * Fetch Request (Version: 5) => replica_id max_wait_time min_bytes max_bytes isolation_level [topics]\n *   replica_id => INT32\n *   max_wait_time => INT32\n *   min_bytes => INT32\n *   max_bytes => INT32\n *   isolation_level => INT8\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition fetch_offset log_start_offset partition_max_bytes\n *       partition => INT32\n *       fetch_offset => INT64\n *       log_start_offset => INT64\n *       partition_max_bytes => INT32\n */\n\n\nmodule.exports = ({\n  replicaId,\n  maxWaitTime,\n  minBytes,\n  maxBytes,\n  topics,\n  isolationLevel = ISOLATION_LEVEL.READ_COMMITTED\n}) => ({\n  apiKey,\n  apiVersion: 5,\n  apiName: 'Fetch',\n  encode: async () => {\n    return new Encoder().writeInt32(replicaId).writeInt32(maxWaitTime).writeInt32(minBytes).writeInt32(maxBytes).writeInt8(isolationLevel).writeArray(topics.map(encodeTopic));\n  }\n});\n\nconst encodeTopic = ({\n  topic,\n  partitions\n}) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition));\n};\n\nconst encodePartition = ({\n  partition,\n  fetchOffset,\n  logStartOffset = -1,\n  maxBytes\n}) => {\n  return new Encoder().writeInt32(partition).writeInt64(fetchOffset).writeInt64(logStartOffset).writeInt32(maxBytes);\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/fetch/v5/request.js"],"names":["Encoder","require","Fetch","apiKey","ISOLATION_LEVEL","module","exports","replicaId","maxWaitTime","minBytes","maxBytes","topics","isolationLevel","READ_COMMITTED","apiVersion","apiName","encode","writeInt32","writeInt8","writeArray","map","encodeTopic","topic","partitions","writeString","encodePartition","partition","fetchOffset","logStartOffset","writeInt64"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,KAAK,EAAEC;AAAT,IAAoBF,OAAO,CAAC,eAAD,CAAjC;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,yBAAD,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAI,MAAM,CAACC,OAAP,GAAiB,CAAC;AAChBC,EAAAA,SADgB;AAEhBC,EAAAA,WAFgB;AAGhBC,EAAAA,QAHgB;AAIhBC,EAAAA,QAJgB;AAKhBC,EAAAA,MALgB;AAMhBC,EAAAA,cAAc,GAAGR,eAAe,CAACS;AANjB,CAAD,MAOV;AACLV,EAAAA,MADK;AAELW,EAAAA,UAAU,EAAE,CAFP;AAGLC,EAAAA,OAAO,EAAE,OAHJ;AAILC,EAAAA,MAAM,EAAE,YAAY;AAClB,WAAO,IAAIhB,OAAJ,GACJiB,UADI,CACOV,SADP,EAEJU,UAFI,CAEOT,WAFP,EAGJS,UAHI,CAGOR,QAHP,EAIJQ,UAJI,CAIOP,QAJP,EAKJQ,SALI,CAKMN,cALN,EAMJO,UANI,CAMOR,MAAM,CAACS,GAAP,CAAWC,WAAX,CANP,CAAP;AAOD;AAZI,CAPU,CAAjB;;AAsBA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA2B;AAC7C,SAAO,IAAIvB,OAAJ,GAAcwB,WAAd,CAA0BF,KAA1B,EAAiCH,UAAjC,CAA4CI,UAAU,CAACH,GAAX,CAAeK,eAAf,CAA5C,CAAP;AACD,CAFD;;AAIA,MAAMA,eAAe,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,WAAb;AAA0BC,EAAAA,cAAc,GAAG,CAAC,CAA5C;AAA+ClB,EAAAA;AAA/C,CAAD,KAA+D;AACrF,SAAO,IAAIV,OAAJ,GACJiB,UADI,CACOS,SADP,EAEJG,UAFI,CAEOF,WAFP,EAGJE,UAHI,CAGOD,cAHP,EAIJX,UAJI,CAIOP,QAJP,CAAP;AAKD,CAND","sourcesContent":["const Encoder = require('../../../encoder')\nconst { Fetch: apiKey } = require('../../apiKeys')\nconst ISOLATION_LEVEL = require('../../../isolationLevel')\n\n/**\n * Fetch Request (Version: 5) => replica_id max_wait_time min_bytes max_bytes isolation_level [topics]\n *   replica_id => INT32\n *   max_wait_time => INT32\n *   min_bytes => INT32\n *   max_bytes => INT32\n *   isolation_level => INT8\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition fetch_offset log_start_offset partition_max_bytes\n *       partition => INT32\n *       fetch_offset => INT64\n *       log_start_offset => INT64\n *       partition_max_bytes => INT32\n */\n\nmodule.exports = ({\n  replicaId,\n  maxWaitTime,\n  minBytes,\n  maxBytes,\n  topics,\n  isolationLevel = ISOLATION_LEVEL.READ_COMMITTED,\n}) => ({\n  apiKey,\n  apiVersion: 5,\n  apiName: 'Fetch',\n  encode: async () => {\n    return new Encoder()\n      .writeInt32(replicaId)\n      .writeInt32(maxWaitTime)\n      .writeInt32(minBytes)\n      .writeInt32(maxBytes)\n      .writeInt8(isolationLevel)\n      .writeArray(topics.map(encodeTopic))\n  },\n})\n\nconst encodeTopic = ({ topic, partitions }) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition))\n}\n\nconst encodePartition = ({ partition, fetchOffset, logStartOffset = -1, maxBytes }) => {\n  return new Encoder()\n    .writeInt32(partition)\n    .writeInt64(fetchOffset)\n    .writeInt64(logStartOffset)\n    .writeInt32(maxBytes)\n}\n"]},"metadata":{},"sourceType":"script"}