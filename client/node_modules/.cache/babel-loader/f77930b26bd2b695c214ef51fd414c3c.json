{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failIfVersionNotSupported,\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n\nconst {\n  parse: parseV2\n} = require('../v2/response');\n/**\n * LeaveGroup Response (Version: 3) => throttle_time_ms error_code [members]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   members => member_id group_instance_id error_code\n *     member_id => STRING\n *     group_instance_id => NULLABLE_STRING\n *     error_code => INT16\n */\n\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const errorCode = decoder.readInt16();\n  const members = decoder.readArray(decodeMembers);\n  failIfVersionNotSupported(errorCode);\n  return {\n    throttleTime: 0,\n    clientSideThrottleTime: throttleTime,\n    errorCode,\n    members\n  };\n};\n\nconst decodeMembers = decoder => ({\n  memberId: decoder.readString(),\n  groupInstanceId: decoder.readString(),\n  errorCode: decoder.readInt16()\n});\n\nconst parse = async data => {\n  const parsed = parseV2(data);\n  const memberWithError = data.members.find(member => failure(member.errorCode));\n\n  if (memberWithError) {\n    throw createErrorFromCode(memberWithError.errorCode);\n  }\n\n  return parsed;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/leaveGroup/v3/response.js"],"names":["Decoder","require","failIfVersionNotSupported","failure","createErrorFromCode","parse","parseV2","decode","rawData","decoder","throttleTime","readInt32","errorCode","readInt16","members","readArray","decodeMembers","clientSideThrottleTime","memberId","readString","groupInstanceId","data","parsed","memberWithError","find","member","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,yBAAF;AAA6BC,EAAAA,OAA7B;AAAsCC,EAAAA;AAAtC,IAA8DH,OAAO,CAAC,gBAAD,CAA3E;;AACA,MAAM;AAAEI,EAAAA,KAAK,EAAEC;AAAT,IAAqBL,OAAO,CAAC,gBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMM,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,OAAO,GAAG,IAAIT,OAAJ,CAAYQ,OAAZ,CAAhB;AACA,QAAME,YAAY,GAAGD,OAAO,CAACE,SAAR,EAArB;AACA,QAAMC,SAAS,GAAGH,OAAO,CAACI,SAAR,EAAlB;AACA,QAAMC,OAAO,GAAGL,OAAO,CAACM,SAAR,CAAkBC,aAAlB,CAAhB;AAEAd,EAAAA,yBAAyB,CAACU,SAAD,CAAzB;AAEA,SAAO;AAAEF,IAAAA,YAAY,EAAE,CAAhB;AAAmBO,IAAAA,sBAAsB,EAAEP,YAA3C;AAAyDE,IAAAA,SAAzD;AAAoEE,IAAAA;AAApE,GAAP;AACD,CATD;;AAWA,MAAME,aAAa,GAAGP,OAAO,KAAK;AAChCS,EAAAA,QAAQ,EAAET,OAAO,CAACU,UAAR,EADsB;AAEhCC,EAAAA,eAAe,EAAEX,OAAO,CAACU,UAAR,EAFe;AAGhCP,EAAAA,SAAS,EAAEH,OAAO,CAACI,SAAR;AAHqB,CAAL,CAA7B;;AAMA,MAAMR,KAAK,GAAG,MAAMgB,IAAN,IAAc;AAC1B,QAAMC,MAAM,GAAGhB,OAAO,CAACe,IAAD,CAAtB;AAEA,QAAME,eAAe,GAAGF,IAAI,CAACP,OAAL,CAAaU,IAAb,CAAkBC,MAAM,IAAItB,OAAO,CAACsB,MAAM,CAACb,SAAR,CAAnC,CAAxB;;AACA,MAAIW,eAAJ,EAAqB;AACnB,UAAMnB,mBAAmB,CAACmB,eAAe,CAACX,SAAjB,CAAzB;AACD;;AAED,SAAOU,MAAP;AACD,CATD;;AAWAI,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,MADe;AAEfF,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failIfVersionNotSupported, failure, createErrorFromCode } = require('../../../error')\nconst { parse: parseV2 } = require('../v2/response')\n\n/**\n * LeaveGroup Response (Version: 3) => throttle_time_ms error_code [members]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   members => member_id group_instance_id error_code\n *     member_id => STRING\n *     group_instance_id => NULLABLE_STRING\n *     error_code => INT16\n */\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const errorCode = decoder.readInt16()\n  const members = decoder.readArray(decodeMembers)\n\n  failIfVersionNotSupported(errorCode)\n\n  return { throttleTime: 0, clientSideThrottleTime: throttleTime, errorCode, members }\n}\n\nconst decodeMembers = decoder => ({\n  memberId: decoder.readString(),\n  groupInstanceId: decoder.readString(),\n  errorCode: decoder.readInt16(),\n})\n\nconst parse = async data => {\n  const parsed = parseV2(data)\n\n  const memberWithError = data.members.find(member => failure(member.errorCode))\n  if (memberWithError) {\n    throw createErrorFromCode(memberWithError.errorCode)\n  }\n\n  return parsed\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}