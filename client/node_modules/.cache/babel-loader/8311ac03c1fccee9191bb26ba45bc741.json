{"ast":null,"code":"/**\n * @exports Long\n * @class A Long class for representing a 64 bit int (BigInt)\n * @param {bigint} value The value of the 64 bit int\n * @constructor\n */\nclass Long {\n  constructor(value) {\n    this.value = value;\n  }\n  /**\n   * @function isLong\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n\n\n  static isLong(obj) {\n    return typeof obj.value === 'bigint';\n  }\n  /**\n   * @param {number} value\n   * @returns {!Long}\n   * @inner\n   */\n\n\n  static fromBits(value) {\n    return new Long(BigInt(value));\n  }\n  /**\n   * @param {number} value\n   * @returns {!Long}\n   * @inner\n   */\n\n\n  static fromInt(value) {\n    if (isNaN(value)) return Long.ZERO;\n    return new Long(BigInt.asIntN(64, BigInt(value)));\n  }\n  /**\n   * @param {number} value\n   * @returns {!Long}\n   * @inner\n   */\n\n\n  static fromNumber(value) {\n    if (isNaN(value)) return Long.ZERO;\n    return new Long(BigInt(value));\n  }\n  /**\n   * @function\n   * @param {bigint|number|string|Long} val\n   * @returns {!Long}\n   * @inner\n   */\n\n\n  static fromValue(val) {\n    if (typeof val === 'number') return this.fromNumber(val);\n    if (typeof val === 'string') return this.fromString(val);\n    if (typeof val === 'bigint') return new Long(val);\n    if (this.isLong(val)) return new Long(BigInt(val.value));\n    return new Long(BigInt(val));\n  }\n  /**\n   * @param {string} str\n   * @returns {!Long}\n   * @inner\n   */\n\n\n  static fromString(str) {\n    if (str.length === 0) throw Error('empty string');\n    if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity') return Long.ZERO;\n    return new Long(BigInt(str));\n  }\n  /**\n   * Tests if this Long's value equals zero.\n   * @returns {boolean}\n   */\n\n\n  isZero() {\n    return this.value === BigInt(0);\n  }\n  /**\n   * Tests if this Long's value is negative.\n   * @returns {boolean}\n   */\n\n\n  isNegative() {\n    return this.value < BigInt(0);\n  }\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @returns {string}\n   * @override\n   */\n\n\n  toString() {\n    return String(this.value);\n  }\n  /**\n   * Converts the Long to the nearest floating-point representation (double, 53-bit mantissa)\n   * @returns {number}\n   * @override\n   */\n\n\n  toNumber() {\n    return Number(this.value);\n  }\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @returns {number}\n   */\n\n\n  toInt() {\n    return Number(BigInt.asIntN(32, this.value));\n  }\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @param {number|bigint} numBits Number of bits\n   * @returns {!Long} Shifted bigint\n   */\n\n\n  shiftLeft(numBits) {\n    return new Long(this.value << BigInt(numBits));\n  }\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @param {number|bigint} numBits Number of bits\n   * @returns {!Long} Shifted bigint\n   */\n\n\n  shiftRight(numBits) {\n    return new Long(this.value >> BigInt(numBits));\n  }\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @param {bigint|number|string} other Other Long\n   * @returns {!Long}\n   */\n\n\n  or(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return Long.fromBits(this.value | other.value);\n  }\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @param {bigint|number|string} other Other Long\n   * @returns {!Long}\n   */\n\n\n  xor(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return new Long(this.value ^ other.value);\n  }\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @param {bigint|number|string} other Other Long\n   * @returns {!Long}\n   */\n\n\n  and(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return new Long(this.value & other.value);\n  }\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @returns {!Long}\n   */\n\n\n  not() {\n    return new Long(~this.value);\n  }\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @param {number|bigint} numBits Number of bits\n   * @returns {!Long} Shifted bigint\n   */\n\n\n  shiftRightUnsigned(numBits) {\n    return new Long(this.value >> BigInt.asUintN(64, BigInt(numBits)));\n  }\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @param {bigint|number|string} other Other value\n   * @returns {boolean}\n   */\n\n\n  equals(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return this.value === other.value;\n  }\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n\n  greaterThanOrEqual(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return this.value >= other.value;\n  }\n\n  gte(other) {\n    return this.greaterThanOrEqual(other);\n  }\n\n  notEquals(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return !this.equals(\n    /* validates */\n    other);\n  }\n  /**\n   * Returns the sum of this and the specified Long.\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n\n\n  add(addend) {\n    if (!Long.isLong(addend)) addend = Long.fromValue(addend);\n    return new Long(this.value + addend.value);\n  }\n  /**\n   * Returns the difference of this and the specified Long.\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n\n\n  subtract(subtrahend) {\n    if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend);\n    return this.add(subtrahend.negate());\n  }\n  /**\n   * Returns the product of this and the specified Long.\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n\n\n  multiply(multiplier) {\n    if (this.isZero()) return Long.ZERO;\n    if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier);\n    return new Long(this.value * multiplier.value);\n  }\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n\n\n  divide(divisor) {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero');\n    return new Long(this.value / divisor.value);\n  }\n  /**\n   * Compares this Long's value with the specified's.\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n\n\n  compare(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    if (this.value === other.value) return 0;\n    if (this.value > other.value) return 1;\n    if (other.value > this.value) return -1;\n  }\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n\n  lessThan(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other);\n    return this.value < other.value;\n  }\n  /**\n   * Negates this Long's value.\n   * @returns {!Long} Negated Long\n   */\n\n\n  negate() {\n    if (this.equals(Long.MIN_VALUE)) {\n      return Long.MIN_VALUE;\n    }\n\n    return this.not().add(Long.ONE);\n  }\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @returns {number} Signed high bits\n   */\n\n\n  getHighBits() {\n    return Number(BigInt.asIntN(32, this.value >> BigInt(32)));\n  }\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @returns {number} Signed low bits\n   */\n\n\n  getLowBits() {\n    return Number(BigInt.asIntN(32, this.value));\n  }\n\n}\n/**\n * Minimum signed value.\n * @type {bigint}\n */\n\n\nLong.MIN_VALUE = new Long(BigInt('-9223372036854775808'));\n/**\n * Maximum signed value.\n * @type {bigint}\n */\n\nLong.MAX_VALUE = new Long(BigInt('9223372036854775807'));\n/**\n * Signed zero.\n * @type {Long}\n */\n\nLong.ZERO = Long.fromInt(0);\n/**\n * Signed one.\n * @type {!Long}\n */\n\nLong.ONE = Long.fromInt(1);\nmodule.exports = Long;","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/utils/long.js"],"names":["Long","constructor","value","isLong","obj","fromBits","BigInt","fromInt","isNaN","ZERO","asIntN","fromNumber","fromValue","val","fromString","str","length","Error","isZero","isNegative","toString","String","toNumber","Number","toInt","shiftLeft","numBits","shiftRight","or","other","xor","and","not","shiftRightUnsigned","asUintN","equals","greaterThanOrEqual","gte","notEquals","add","addend","subtract","subtrahend","negate","multiply","multiplier","divide","divisor","compare","lessThan","MIN_VALUE","ONE","getHighBits","getLowBits","MAX_VALUE","module","exports"],"mappings":"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","sourcesContent":["/**\n * @exports Long\n * @class A Long class for representing a 64 bit int (BigInt)\n * @param {bigint} value The value of the 64 bit int\n * @constructor\n */\nclass Long {\n  constructor(value) {\n    this.value = value\n  }\n\n  /**\n   * @function isLong\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  static isLong(obj) {\n    return typeof obj.value === 'bigint'\n  }\n\n  /**\n   * @param {number} value\n   * @returns {!Long}\n   * @inner\n   */\n  static fromBits(value) {\n    return new Long(BigInt(value))\n  }\n\n  /**\n   * @param {number} value\n   * @returns {!Long}\n   * @inner\n   */\n  static fromInt(value) {\n    if (isNaN(value)) return Long.ZERO\n\n    return new Long(BigInt.asIntN(64, BigInt(value)))\n  }\n\n  /**\n   * @param {number} value\n   * @returns {!Long}\n   * @inner\n   */\n  static fromNumber(value) {\n    if (isNaN(value)) return Long.ZERO\n\n    return new Long(BigInt(value))\n  }\n\n  /**\n   * @function\n   * @param {bigint|number|string|Long} val\n   * @returns {!Long}\n   * @inner\n   */\n  static fromValue(val) {\n    if (typeof val === 'number') return this.fromNumber(val)\n    if (typeof val === 'string') return this.fromString(val)\n    if (typeof val === 'bigint') return new Long(val)\n    if (this.isLong(val)) return new Long(BigInt(val.value))\n\n    return new Long(BigInt(val))\n  }\n\n  /**\n   * @param {string} str\n   * @returns {!Long}\n   * @inner\n   */\n  static fromString(str) {\n    if (str.length === 0) throw Error('empty string')\n    if (str === 'NaN' || str === 'Infinity' || str === '+Infinity' || str === '-Infinity')\n      return Long.ZERO\n    return new Long(BigInt(str))\n  }\n\n  /**\n   * Tests if this Long's value equals zero.\n   * @returns {boolean}\n   */\n  isZero() {\n    return this.value === BigInt(0)\n  }\n\n  /**\n   * Tests if this Long's value is negative.\n   * @returns {boolean}\n   */\n  isNegative() {\n    return this.value < BigInt(0)\n  }\n\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @returns {string}\n   * @override\n   */\n  toString() {\n    return String(this.value)\n  }\n\n  /**\n   * Converts the Long to the nearest floating-point representation (double, 53-bit mantissa)\n   * @returns {number}\n   * @override\n   */\n  toNumber() {\n    return Number(this.value)\n  }\n\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @returns {number}\n   */\n  toInt() {\n    return Number(BigInt.asIntN(32, this.value))\n  }\n\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @param {number|bigint} numBits Number of bits\n   * @returns {!Long} Shifted bigint\n   */\n  shiftLeft(numBits) {\n    return new Long(this.value << BigInt(numBits))\n  }\n\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @param {number|bigint} numBits Number of bits\n   * @returns {!Long} Shifted bigint\n   */\n  shiftRight(numBits) {\n    return new Long(this.value >> BigInt(numBits))\n  }\n\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @param {bigint|number|string} other Other Long\n   * @returns {!Long}\n   */\n  or(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other)\n    return Long.fromBits(this.value | other.value)\n  }\n\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @param {bigint|number|string} other Other Long\n   * @returns {!Long}\n   */\n  xor(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other)\n    return new Long(this.value ^ other.value)\n  }\n\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @param {bigint|number|string} other Other Long\n   * @returns {!Long}\n   */\n  and(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other)\n    return new Long(this.value & other.value)\n  }\n\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @returns {!Long}\n   */\n  not() {\n    return new Long(~this.value)\n  }\n\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @param {number|bigint} numBits Number of bits\n   * @returns {!Long} Shifted bigint\n   */\n  shiftRightUnsigned(numBits) {\n    return new Long(this.value >> BigInt.asUintN(64, BigInt(numBits)))\n  }\n\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @param {bigint|number|string} other Other value\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other)\n    return this.value === other.value\n  }\n\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  greaterThanOrEqual(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other)\n    return this.value >= other.value\n  }\n\n  gte(other) {\n    return this.greaterThanOrEqual(other)\n  }\n\n  notEquals(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other)\n    return !this.equals(/* validates */ other)\n  }\n\n  /**\n   * Returns the sum of this and the specified Long.\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  add(addend) {\n    if (!Long.isLong(addend)) addend = Long.fromValue(addend)\n    return new Long(this.value + addend.value)\n  }\n\n  /**\n   * Returns the difference of this and the specified Long.\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  subtract(subtrahend) {\n    if (!Long.isLong(subtrahend)) subtrahend = Long.fromValue(subtrahend)\n    return this.add(subtrahend.negate())\n  }\n\n  /**\n   * Returns the product of this and the specified Long.\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  multiply(multiplier) {\n    if (this.isZero()) return Long.ZERO\n    if (!Long.isLong(multiplier)) multiplier = Long.fromValue(multiplier)\n    return new Long(this.value * multiplier.value)\n  }\n\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  divide(divisor) {\n    if (!Long.isLong(divisor)) divisor = Long.fromValue(divisor)\n    if (divisor.isZero()) throw Error('division by zero')\n    return new Long(this.value / divisor.value)\n  }\n\n  /**\n   * Compares this Long's value with the specified's.\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  compare(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other)\n    if (this.value === other.value) return 0\n    if (this.value > other.value) return 1\n    if (other.value > this.value) return -1\n  }\n\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  lessThan(other) {\n    if (!Long.isLong(other)) other = Long.fromValue(other)\n    return this.value < other.value\n  }\n\n  /**\n   * Negates this Long's value.\n   * @returns {!Long} Negated Long\n   */\n  negate() {\n    if (this.equals(Long.MIN_VALUE)) {\n      return Long.MIN_VALUE\n    }\n    return this.not().add(Long.ONE)\n  }\n\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @returns {number} Signed high bits\n   */\n  getHighBits() {\n    return Number(BigInt.asIntN(32, this.value >> BigInt(32)))\n  }\n\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @returns {number} Signed low bits\n   */\n  getLowBits() {\n    return Number(BigInt.asIntN(32, this.value))\n  }\n}\n\n/**\n * Minimum signed value.\n * @type {bigint}\n */\nLong.MIN_VALUE = new Long(BigInt('-9223372036854775808'))\n\n/**\n * Maximum signed value.\n * @type {bigint}\n */\nLong.MAX_VALUE = new Long(BigInt('9223372036854775807'))\n\n/**\n * Signed zero.\n * @type {Long}\n */\nLong.ZERO = Long.fromInt(0)\n\n/**\n * Signed one.\n * @type {!Long}\n */\nLong.ONE = Long.fromInt(1)\n\nmodule.exports = Long\n"]},"metadata":{},"sourceType":"script"}