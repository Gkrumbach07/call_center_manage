{"ast":null,"code":"/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"_\" }] */\nconst Decoder = require('../../../decoder');\n\nconst ENTRY_REGEX = /^([rsiev])=(.*)$/;\nmodule.exports = {\n  decode: async rawData => {\n    return new Decoder(rawData).readBytes();\n  },\n  parse: async data => {\n    const processed = data.toString().split(',').map(str => {\n      const [_, key, value] = str.match(ENTRY_REGEX);\n      return [key, value];\n    }).reduce((obj, entry) => ({ ...obj,\n      [entry[0]]: entry[1]\n    }), {});\n    return {\n      original: data.toString(),\n      ...processed\n    };\n  }\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/sasl/scram/firstMessage/response.js"],"names":["Decoder","require","ENTRY_REGEX","module","exports","decode","rawData","readBytes","parse","data","processed","toString","split","map","str","_","key","value","match","reduce","obj","entry","original"],"mappings":"AAAA;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AAEA,MAAMC,WAAW,GAAG,kBAApB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,MAAM,EAAE,MAAMC,OAAN,IAAiB;AACvB,WAAO,IAAIN,OAAJ,CAAYM,OAAZ,EAAqBC,SAArB,EAAP;AACD,GAHc;AAIfC,EAAAA,KAAK,EAAE,MAAMC,IAAN,IAAc;AACnB,UAAMC,SAAS,GAAGD,IAAI,CACnBE,QADe,GAEfC,KAFe,CAET,GAFS,EAGfC,GAHe,CAGXC,GAAG,IAAI;AACV,YAAM,CAACC,CAAD,EAAIC,GAAJ,EAASC,KAAT,IAAkBH,GAAG,CAACI,KAAJ,CAAUhB,WAAV,CAAxB;AACA,aAAO,CAACc,GAAD,EAAMC,KAAN,CAAP;AACD,KANe,EAOfE,MAPe,CAOR,CAACC,GAAD,EAAMC,KAAN,MAAiB,EAAE,GAAGD,GAAL;AAAU,OAACC,KAAK,CAAC,CAAD,CAAN,GAAYA,KAAK,CAAC,CAAD;AAA3B,KAAjB,CAPQ,EAO4C,EAP5C,CAAlB;AASA,WAAO;AAAEC,MAAAA,QAAQ,EAAEb,IAAI,CAACE,QAAL,EAAZ;AAA6B,SAAGD;AAAhC,KAAP;AACD;AAfc,CAAjB","sourcesContent":["/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"_\" }] */\n\nconst Decoder = require('../../../decoder')\n\nconst ENTRY_REGEX = /^([rsiev])=(.*)$/\n\nmodule.exports = {\n  decode: async rawData => {\n    return new Decoder(rawData).readBytes()\n  },\n  parse: async data => {\n    const processed = data\n      .toString()\n      .split(',')\n      .map(str => {\n        const [_, key, value] = str.match(ENTRY_REGEX)\n        return [key, value]\n      })\n      .reduce((obj, entry) => ({ ...obj, [entry[0]]: entry[1] }), {})\n\n    return { original: data.toString(), ...processed }\n  },\n}\n"]},"metadata":{},"sourceType":"script"}