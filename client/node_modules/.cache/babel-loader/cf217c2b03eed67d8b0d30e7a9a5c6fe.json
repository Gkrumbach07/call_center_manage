{"ast":null,"code":"/**\n * The sasl object must include a property named oauthBearerProvider, an\n * async function that is used to return the OAuth bearer token.\n *\n * The OAuth bearer token must be an object with properties value and\n * (optionally) extensions, that will be sent during the SASL/OAUTHBEARER\n * request.\n *\n * The implementation of the oauthBearerProvider must take care that tokens are\n * reused and refreshed when appropriate.\n */\nconst oauthBearer = require('../../protocol/sasl/oauthBearer');\n\nconst {\n  KafkaJSSASLAuthenticationError\n} = require('../../errors');\n\nmodule.exports = class OAuthBearerAuthenticator {\n  constructor(connection, logger, saslAuthenticate) {\n    this.connection = connection;\n    this.logger = logger.namespace('SASLOAuthBearerAuthenticator');\n    this.saslAuthenticate = saslAuthenticate;\n  }\n\n  async authenticate() {\n    const {\n      sasl\n    } = this.connection;\n\n    if (sasl.oauthBearerProvider == null) {\n      throw new KafkaJSSASLAuthenticationError('SASL OAUTHBEARER: Missing OAuth bearer token provider');\n    }\n\n    const {\n      oauthBearerProvider\n    } = sasl;\n    const oauthBearerToken = await oauthBearerProvider();\n\n    if (oauthBearerToken.value == null) {\n      throw new KafkaJSSASLAuthenticationError('SASL OAUTHBEARER: Invalid OAuth bearer token');\n    }\n\n    const request = await oauthBearer.request(sasl, oauthBearerToken);\n    const response = oauthBearer.response;\n    const {\n      host,\n      port\n    } = this.connection;\n    const broker = `${host}:${port}`;\n\n    try {\n      this.logger.debug('Authenticate with SASL OAUTHBEARER', {\n        broker\n      });\n      await this.saslAuthenticate({\n        request,\n        response\n      });\n      this.logger.debug('SASL OAUTHBEARER authentication successful', {\n        broker\n      });\n    } catch (e) {\n      const error = new KafkaJSSASLAuthenticationError(`SASL OAUTHBEARER authentication failed: ${e.message}`);\n      this.logger.error(error.message, {\n        broker\n      });\n      throw error;\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/broker/saslAuthenticator/oauthBearer.js"],"names":["oauthBearer","require","KafkaJSSASLAuthenticationError","module","exports","OAuthBearerAuthenticator","constructor","connection","logger","saslAuthenticate","namespace","authenticate","sasl","oauthBearerProvider","oauthBearerToken","value","request","response","host","port","broker","debug","e","error","message"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,iCAAD,CAA3B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAqCD,OAAO,CAAC,cAAD,CAAlD;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,wBAAN,CAA+B;AAC9CC,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,gBAArB,EAAuC;AAChD,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAM,CAACE,SAAP,CAAiB,8BAAjB,CAAd;AACA,SAAKD,gBAAL,GAAwBA,gBAAxB;AACD;;AAED,QAAME,YAAN,GAAqB;AACnB,UAAM;AAAEC,MAAAA;AAAF,QAAW,KAAKL,UAAtB;;AACA,QAAIK,IAAI,CAACC,mBAAL,IAA4B,IAAhC,EAAsC;AACpC,YAAM,IAAIX,8BAAJ,CACJ,uDADI,CAAN;AAGD;;AAED,UAAM;AAAEW,MAAAA;AAAF,QAA0BD,IAAhC;AAEA,UAAME,gBAAgB,GAAG,MAAMD,mBAAmB,EAAlD;;AAEA,QAAIC,gBAAgB,CAACC,KAAjB,IAA0B,IAA9B,EAAoC;AAClC,YAAM,IAAIb,8BAAJ,CAAmC,8CAAnC,CAAN;AACD;;AAED,UAAMc,OAAO,GAAG,MAAMhB,WAAW,CAACgB,OAAZ,CAAoBJ,IAApB,EAA0BE,gBAA1B,CAAtB;AACA,UAAMG,QAAQ,GAAGjB,WAAW,CAACiB,QAA7B;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiB,KAAKZ,UAA5B;AACA,UAAMa,MAAM,GAAI,GAAEF,IAAK,IAAGC,IAAK,EAA/B;;AAEA,QAAI;AACF,WAAKX,MAAL,CAAYa,KAAZ,CAAkB,oCAAlB,EAAwD;AAAED,QAAAA;AAAF,OAAxD;AACA,YAAM,KAAKX,gBAAL,CAAsB;AAAEO,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAAtB,CAAN;AACA,WAAKT,MAAL,CAAYa,KAAZ,CAAkB,4CAAlB,EAAgE;AAAED,QAAAA;AAAF,OAAhE;AACD,KAJD,CAIE,OAAOE,CAAP,EAAU;AACV,YAAMC,KAAK,GAAG,IAAIrB,8BAAJ,CACX,2CAA0CoB,CAAC,CAACE,OAAQ,EADzC,CAAd;AAGA,WAAKhB,MAAL,CAAYe,KAAZ,CAAkBA,KAAK,CAACC,OAAxB,EAAiC;AAAEJ,QAAAA;AAAF,OAAjC;AACA,YAAMG,KAAN;AACD;AACF;;AAvC6C,CAAhD","sourcesContent":["/**\n * The sasl object must include a property named oauthBearerProvider, an\n * async function that is used to return the OAuth bearer token.\n *\n * The OAuth bearer token must be an object with properties value and\n * (optionally) extensions, that will be sent during the SASL/OAUTHBEARER\n * request.\n *\n * The implementation of the oauthBearerProvider must take care that tokens are\n * reused and refreshed when appropriate.\n */\n\nconst oauthBearer = require('../../protocol/sasl/oauthBearer')\nconst { KafkaJSSASLAuthenticationError } = require('../../errors')\n\nmodule.exports = class OAuthBearerAuthenticator {\n  constructor(connection, logger, saslAuthenticate) {\n    this.connection = connection\n    this.logger = logger.namespace('SASLOAuthBearerAuthenticator')\n    this.saslAuthenticate = saslAuthenticate\n  }\n\n  async authenticate() {\n    const { sasl } = this.connection\n    if (sasl.oauthBearerProvider == null) {\n      throw new KafkaJSSASLAuthenticationError(\n        'SASL OAUTHBEARER: Missing OAuth bearer token provider'\n      )\n    }\n\n    const { oauthBearerProvider } = sasl\n\n    const oauthBearerToken = await oauthBearerProvider()\n\n    if (oauthBearerToken.value == null) {\n      throw new KafkaJSSASLAuthenticationError('SASL OAUTHBEARER: Invalid OAuth bearer token')\n    }\n\n    const request = await oauthBearer.request(sasl, oauthBearerToken)\n    const response = oauthBearer.response\n    const { host, port } = this.connection\n    const broker = `${host}:${port}`\n\n    try {\n      this.logger.debug('Authenticate with SASL OAUTHBEARER', { broker })\n      await this.saslAuthenticate({ request, response })\n      this.logger.debug('SASL OAUTHBEARER authentication successful', { broker })\n    } catch (e) {\n      const error = new KafkaJSSASLAuthenticationError(\n        `SASL OAUTHBEARER authentication failed: ${e.message}`\n      )\n      this.logger.error(error.message, { broker })\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}