{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failIfVersionNotSupported\n} = require('../../../error');\n\nconst {\n  parse: parseV0\n} = require('../v0/response');\n/**\n * Heartbeat Response (Version: 1) => throttle_time_ms error_code\n *   throttle_time_ms => INT32\n *   error_code => INT16\n */\n\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const errorCode = decoder.readInt16();\n  failIfVersionNotSupported(errorCode);\n  return {\n    throttleTime,\n    errorCode\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/heartbeat/v1/response.js"],"names":["Decoder","require","failIfVersionNotSupported","parse","parseV0","decode","rawData","decoder","throttleTime","readInt32","errorCode","readInt16","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAgCD,OAAO,CAAC,gBAAD,CAA7C;;AACA,MAAM;AAAEE,EAAAA,KAAK,EAAEC;AAAT,IAAqBH,OAAO,CAAC,gBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,OAAO,GAAG,IAAIP,OAAJ,CAAYM,OAAZ,CAAhB;AACA,QAAME,YAAY,GAAGD,OAAO,CAACE,SAAR,EAArB;AACA,QAAMC,SAAS,GAAGH,OAAO,CAACI,SAAR,EAAlB;AAEAT,EAAAA,yBAAyB,CAACQ,SAAD,CAAzB;AAEA,SAAO;AAAEF,IAAAA,YAAF;AAAgBE,IAAAA;AAAhB,GAAP;AACD,CARD;;AAUAE,MAAM,CAACC,OAAP,GAAiB;AACfR,EAAAA,MADe;AAEfF,EAAAA,KAAK,EAAEC;AAFQ,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failIfVersionNotSupported } = require('../../../error')\nconst { parse: parseV0 } = require('../v0/response')\n\n/**\n * Heartbeat Response (Version: 1) => throttle_time_ms error_code\n *   throttle_time_ms => INT32\n *   error_code => INT16\n */\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const errorCode = decoder.readInt16()\n\n  failIfVersionNotSupported(errorCode)\n\n  return { throttleTime, errorCode }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"]},"metadata":{},"sourceType":"script"}