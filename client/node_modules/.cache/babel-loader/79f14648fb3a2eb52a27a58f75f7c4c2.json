{"ast":null,"code":"const EventEmitter = require('events');\n\nconst InstrumentationEvent = require('./event');\n\nconst {\n  KafkaJSError\n} = require('../errors');\n\nmodule.exports = class InstrumentationEventEmitter {\n  constructor() {\n    this.emitter = new EventEmitter();\n  }\n  /**\n   * @param {string} eventName\n   * @param {Object} payload\n   */\n\n\n  emit(eventName, payload) {\n    if (!eventName) {\n      throw new KafkaJSError('Invalid event name', {\n        retriable: false\n      });\n    }\n\n    if (this.emitter.listenerCount(eventName) > 0) {\n      const event = new InstrumentationEvent(eventName, payload);\n      this.emitter.emit(eventName, event);\n    }\n  }\n  /**\n   * @param {string} eventName\n   * @param {Function} listener\n   * @returns {Function} removeListener\n   */\n\n\n  addListener(eventName, listener) {\n    this.emitter.addListener(eventName, listener);\n    return () => this.emitter.removeListener(eventName, listener);\n  }\n\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/instrumentation/emitter.js"],"names":["EventEmitter","require","InstrumentationEvent","KafkaJSError","module","exports","InstrumentationEventEmitter","constructor","emitter","emit","eventName","payload","retriable","listenerCount","event","addListener","listener","removeListener"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAA5B;;AACA,MAAMC,oBAAoB,GAAGD,OAAO,CAAC,SAAD,CAApC;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAmBF,OAAO,CAAC,WAAD,CAAhC;;AAEAG,MAAM,CAACC,OAAP,GAAiB,MAAMC,2BAAN,CAAkC;AACjDC,EAAAA,WAAW,GAAG;AACZ,SAAKC,OAAL,GAAe,IAAIR,YAAJ,EAAf;AACD;AAED;AACF;AACA;AACA;;;AACES,EAAAA,IAAI,CAACC,SAAD,EAAYC,OAAZ,EAAqB;AACvB,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIP,YAAJ,CAAiB,oBAAjB,EAAuC;AAAES,QAAAA,SAAS,EAAE;AAAb,OAAvC,CAAN;AACD;;AAED,QAAI,KAAKJ,OAAL,CAAaK,aAAb,CAA2BH,SAA3B,IAAwC,CAA5C,EAA+C;AAC7C,YAAMI,KAAK,GAAG,IAAIZ,oBAAJ,CAAyBQ,SAAzB,EAAoCC,OAApC,CAAd;AACA,WAAKH,OAAL,CAAaC,IAAb,CAAkBC,SAAlB,EAA6BI,KAA7B;AACD;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,WAAW,CAACL,SAAD,EAAYM,QAAZ,EAAsB;AAC/B,SAAKR,OAAL,CAAaO,WAAb,CAAyBL,SAAzB,EAAoCM,QAApC;AACA,WAAO,MAAM,KAAKR,OAAL,CAAaS,cAAb,CAA4BP,SAA5B,EAAuCM,QAAvC,CAAb;AACD;;AA5BgD,CAAnD","sourcesContent":["const EventEmitter = require('events')\nconst InstrumentationEvent = require('./event')\nconst { KafkaJSError } = require('../errors')\n\nmodule.exports = class InstrumentationEventEmitter {\n  constructor() {\n    this.emitter = new EventEmitter()\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {Object} payload\n   */\n  emit(eventName, payload) {\n    if (!eventName) {\n      throw new KafkaJSError('Invalid event name', { retriable: false })\n    }\n\n    if (this.emitter.listenerCount(eventName) > 0) {\n      const event = new InstrumentationEvent(eventName, payload)\n      this.emitter.emit(eventName, event)\n    }\n  }\n\n  /**\n   * @param {string} eventName\n   * @param {Function} listener\n   * @returns {Function} removeListener\n   */\n  addListener(eventName, listener) {\n    this.emitter.addListener(eventName, listener)\n    return () => this.emitter.removeListener(eventName, listener)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}