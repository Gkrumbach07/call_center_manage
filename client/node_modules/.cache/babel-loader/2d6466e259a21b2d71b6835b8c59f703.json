{"ast":null,"code":"const {\n  format\n} = require('util');\n\nconst {\n  KafkaJSLockTimeout\n} = require('../errors');\n\nconst PRIVATE = {\n  LOCKED: Symbol('private:Lock:locked'),\n  TIMEOUT: Symbol('private:Lock:timeout'),\n  WAITING: Symbol('private:Lock:waiting'),\n  TIMEOUT_ERROR_MESSAGE: Symbol('private:Lock:timeoutErrorMessage')\n};\nconst TIMEOUT_MESSAGE = 'Timeout while acquiring lock (%d waiting locks)';\nmodule.exports = class Lock {\n  constructor({\n    timeout,\n    description = null\n  } = {}) {\n    if (typeof timeout !== 'number') {\n      throw new TypeError(`'timeout' is not a number, received '${typeof timeout}'`);\n    }\n\n    this[PRIVATE.LOCKED] = false;\n    this[PRIVATE.TIMEOUT] = timeout;\n    this[PRIVATE.WAITING] = new Set();\n\n    this[PRIVATE.TIMEOUT_ERROR_MESSAGE] = () => {\n      const timeoutMessage = format(TIMEOUT_MESSAGE, this[PRIVATE.WAITING].size);\n      return description ? `${timeoutMessage}: \"${description}\"` : timeoutMessage;\n    };\n  }\n\n  async acquire() {\n    return new Promise((resolve, reject) => {\n      if (!this[PRIVATE.LOCKED]) {\n        this[PRIVATE.LOCKED] = true;\n        return resolve();\n      }\n\n      let timeoutId = null;\n\n      const tryToAcquire = async () => {\n        if (!this[PRIVATE.LOCKED]) {\n          this[PRIVATE.LOCKED] = true;\n          clearTimeout(timeoutId);\n          this[PRIVATE.WAITING].delete(tryToAcquire);\n          return resolve();\n        }\n      };\n\n      this[PRIVATE.WAITING].add(tryToAcquire);\n      timeoutId = setTimeout(() => {\n        // The message should contain the number of waiters _including_ this one\n        const error = new KafkaJSLockTimeout(this[PRIVATE.TIMEOUT_ERROR_MESSAGE]());\n        this[PRIVATE.WAITING].delete(tryToAcquire);\n        reject(error);\n      }, this[PRIVATE.TIMEOUT]);\n    });\n  }\n\n  async release() {\n    this[PRIVATE.LOCKED] = false;\n    const waitingLock = this[PRIVATE.WAITING].values().next().value;\n\n    if (waitingLock) {\n      return waitingLock();\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/utils/lock.js"],"names":["format","require","KafkaJSLockTimeout","PRIVATE","LOCKED","Symbol","TIMEOUT","WAITING","TIMEOUT_ERROR_MESSAGE","TIMEOUT_MESSAGE","module","exports","Lock","constructor","timeout","description","TypeError","Set","timeoutMessage","size","acquire","Promise","resolve","reject","timeoutId","tryToAcquire","clearTimeout","delete","add","setTimeout","error","release","waitingLock","values","next","value"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,MAAD,CAA1B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAyBD,OAAO,CAAC,WAAD,CAAtC;;AAEA,MAAME,OAAO,GAAG;AACdC,EAAAA,MAAM,EAAEC,MAAM,CAAC,qBAAD,CADA;AAEdC,EAAAA,OAAO,EAAED,MAAM,CAAC,sBAAD,CAFD;AAGdE,EAAAA,OAAO,EAAEF,MAAM,CAAC,sBAAD,CAHD;AAIdG,EAAAA,qBAAqB,EAAEH,MAAM,CAAC,kCAAD;AAJf,CAAhB;AAOA,MAAMI,eAAe,GAAG,iDAAxB;AAEAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,IAAN,CAAW;AAC1BC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,WAAW,GAAG;AAAzB,MAAkC,EAAnC,EAAuC;AAChD,QAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,YAAM,IAAIE,SAAJ,CAAe,wCAAuC,OAAOF,OAAQ,GAArE,CAAN;AACD;;AAED,SAAKX,OAAO,CAACC,MAAb,IAAuB,KAAvB;AACA,SAAKD,OAAO,CAACG,OAAb,IAAwBQ,OAAxB;AACA,SAAKX,OAAO,CAACI,OAAb,IAAwB,IAAIU,GAAJ,EAAxB;;AACA,SAAKd,OAAO,CAACK,qBAAb,IAAsC,MAAM;AAC1C,YAAMU,cAAc,GAAGlB,MAAM,CAACS,eAAD,EAAkB,KAAKN,OAAO,CAACI,OAAb,EAAsBY,IAAxC,CAA7B;AACA,aAAOJ,WAAW,GAAI,GAAEG,cAAe,MAAKH,WAAY,GAAtC,GAA2CG,cAA7D;AACD,KAHD;AAID;;AAED,QAAME,OAAN,GAAgB;AACd,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAI,CAAC,KAAKpB,OAAO,CAACC,MAAb,CAAL,EAA2B;AACzB,aAAKD,OAAO,CAACC,MAAb,IAAuB,IAAvB;AACA,eAAOkB,OAAO,EAAd;AACD;;AAED,UAAIE,SAAS,GAAG,IAAhB;;AACA,YAAMC,YAAY,GAAG,YAAY;AAC/B,YAAI,CAAC,KAAKtB,OAAO,CAACC,MAAb,CAAL,EAA2B;AACzB,eAAKD,OAAO,CAACC,MAAb,IAAuB,IAAvB;AACAsB,UAAAA,YAAY,CAACF,SAAD,CAAZ;AACA,eAAKrB,OAAO,CAACI,OAAb,EAAsBoB,MAAtB,CAA6BF,YAA7B;AACA,iBAAOH,OAAO,EAAd;AACD;AACF,OAPD;;AASA,WAAKnB,OAAO,CAACI,OAAb,EAAsBqB,GAAtB,CAA0BH,YAA1B;AACAD,MAAAA,SAAS,GAAGK,UAAU,CAAC,MAAM;AAC3B;AACA,cAAMC,KAAK,GAAG,IAAI5B,kBAAJ,CAAuB,KAAKC,OAAO,CAACK,qBAAb,GAAvB,CAAd;AACA,aAAKL,OAAO,CAACI,OAAb,EAAsBoB,MAAtB,CAA6BF,YAA7B;AACAF,QAAAA,MAAM,CAACO,KAAD,CAAN;AACD,OALqB,EAKnB,KAAK3B,OAAO,CAACG,OAAb,CALmB,CAAtB;AAMD,KAvBM,CAAP;AAwBD;;AAED,QAAMyB,OAAN,GAAgB;AACd,SAAK5B,OAAO,CAACC,MAAb,IAAuB,KAAvB;AACA,UAAM4B,WAAW,GAAG,KAAK7B,OAAO,CAACI,OAAb,EAAsB0B,MAAtB,GAA+BC,IAA/B,GAAsCC,KAA1D;;AAEA,QAAIH,WAAJ,EAAiB;AACf,aAAOA,WAAW,EAAlB;AACD;AACF;;AAjDyB,CAA5B","sourcesContent":["const { format } = require('util')\nconst { KafkaJSLockTimeout } = require('../errors')\n\nconst PRIVATE = {\n  LOCKED: Symbol('private:Lock:locked'),\n  TIMEOUT: Symbol('private:Lock:timeout'),\n  WAITING: Symbol('private:Lock:waiting'),\n  TIMEOUT_ERROR_MESSAGE: Symbol('private:Lock:timeoutErrorMessage'),\n}\n\nconst TIMEOUT_MESSAGE = 'Timeout while acquiring lock (%d waiting locks)'\n\nmodule.exports = class Lock {\n  constructor({ timeout, description = null } = {}) {\n    if (typeof timeout !== 'number') {\n      throw new TypeError(`'timeout' is not a number, received '${typeof timeout}'`)\n    }\n\n    this[PRIVATE.LOCKED] = false\n    this[PRIVATE.TIMEOUT] = timeout\n    this[PRIVATE.WAITING] = new Set()\n    this[PRIVATE.TIMEOUT_ERROR_MESSAGE] = () => {\n      const timeoutMessage = format(TIMEOUT_MESSAGE, this[PRIVATE.WAITING].size)\n      return description ? `${timeoutMessage}: \"${description}\"` : timeoutMessage\n    }\n  }\n\n  async acquire() {\n    return new Promise((resolve, reject) => {\n      if (!this[PRIVATE.LOCKED]) {\n        this[PRIVATE.LOCKED] = true\n        return resolve()\n      }\n\n      let timeoutId = null\n      const tryToAcquire = async () => {\n        if (!this[PRIVATE.LOCKED]) {\n          this[PRIVATE.LOCKED] = true\n          clearTimeout(timeoutId)\n          this[PRIVATE.WAITING].delete(tryToAcquire)\n          return resolve()\n        }\n      }\n\n      this[PRIVATE.WAITING].add(tryToAcquire)\n      timeoutId = setTimeout(() => {\n        // The message should contain the number of waiters _including_ this one\n        const error = new KafkaJSLockTimeout(this[PRIVATE.TIMEOUT_ERROR_MESSAGE]())\n        this[PRIVATE.WAITING].delete(tryToAcquire)\n        reject(error)\n      }, this[PRIVATE.TIMEOUT])\n    })\n  }\n\n  async release() {\n    this[PRIVATE.LOCKED] = false\n    const waitingLock = this[PRIVATE.WAITING].values().next().value\n\n    if (waitingLock) {\n      return waitingLock()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}