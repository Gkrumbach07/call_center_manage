{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n/**\n * DescribeGroups Response (Version: 0) => [groups]\n *   groups => error_code group_id state protocol_type protocol [members]\n *     error_code => INT16\n *     group_id => STRING\n *     state => STRING\n *     protocol_type => STRING\n *     protocol => STRING\n *     members => member_id client_id client_host member_metadata member_assignment\n *       member_id => STRING\n *       client_id => STRING\n *       client_host => STRING\n *       member_metadata => BYTES\n *       member_assignment => BYTES\n */\n\n\nconst decoderMember = decoder => ({\n  memberId: decoder.readString(),\n  clientId: decoder.readString(),\n  clientHost: decoder.readString(),\n  memberMetadata: decoder.readBytes(),\n  memberAssignment: decoder.readBytes()\n});\n\nconst decodeGroup = decoder => ({\n  errorCode: decoder.readInt16(),\n  groupId: decoder.readString(),\n  state: decoder.readString(),\n  protocolType: decoder.readString(),\n  protocol: decoder.readString(),\n  members: decoder.readArray(decoderMember)\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const groups = decoder.readArray(decodeGroup);\n  return {\n    groups\n  };\n};\n\nconst parse = async data => {\n  const groupsWithError = data.groups.filter(({\n    errorCode\n  }) => failure(errorCode));\n\n  if (groupsWithError.length > 0) {\n    throw createErrorFromCode(groupsWithError[0].errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/describeGroups/v0/response.js"],"names":["Decoder","require","failure","createErrorFromCode","decoderMember","decoder","memberId","readString","clientId","clientHost","memberMetadata","readBytes","memberAssignment","decodeGroup","errorCode","readInt16","groupId","state","protocolType","protocol","members","readArray","decode","rawData","groups","parse","data","groupsWithError","filter","length","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAmCF,OAAO,CAAC,gBAAD,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,aAAa,GAAGC,OAAO,KAAK;AAChCC,EAAAA,QAAQ,EAAED,OAAO,CAACE,UAAR,EADsB;AAEhCC,EAAAA,QAAQ,EAAEH,OAAO,CAACE,UAAR,EAFsB;AAGhCE,EAAAA,UAAU,EAAEJ,OAAO,CAACE,UAAR,EAHoB;AAIhCG,EAAAA,cAAc,EAAEL,OAAO,CAACM,SAAR,EAJgB;AAKhCC,EAAAA,gBAAgB,EAAEP,OAAO,CAACM,SAAR;AALc,CAAL,CAA7B;;AAQA,MAAME,WAAW,GAAGR,OAAO,KAAK;AAC9BS,EAAAA,SAAS,EAAET,OAAO,CAACU,SAAR,EADmB;AAE9BC,EAAAA,OAAO,EAAEX,OAAO,CAACE,UAAR,EAFqB;AAG9BU,EAAAA,KAAK,EAAEZ,OAAO,CAACE,UAAR,EAHuB;AAI9BW,EAAAA,YAAY,EAAEb,OAAO,CAACE,UAAR,EAJgB;AAK9BY,EAAAA,QAAQ,EAAEd,OAAO,CAACE,UAAR,EALoB;AAM9Ba,EAAAA,OAAO,EAAEf,OAAO,CAACgB,SAAR,CAAkBjB,aAAlB;AANqB,CAAL,CAA3B;;AASA,MAAMkB,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMlB,OAAO,GAAG,IAAIL,OAAJ,CAAYuB,OAAZ,CAAhB;AACA,QAAMC,MAAM,GAAGnB,OAAO,CAACgB,SAAR,CAAkBR,WAAlB,CAAf;AAEA,SAAO;AACLW,IAAAA;AADK,GAAP;AAGD,CAPD;;AASA,MAAMC,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,QAAMC,eAAe,GAAGD,IAAI,CAACF,MAAL,CAAYI,MAAZ,CAAmB,CAAC;AAAEd,IAAAA;AAAF,GAAD,KAAmBZ,OAAO,CAACY,SAAD,CAA7C,CAAxB;;AACA,MAAIa,eAAe,CAACE,MAAhB,GAAyB,CAA7B,EAAgC;AAC9B,UAAM1B,mBAAmB,CAACwB,eAAe,CAAC,CAAD,CAAf,CAAmBb,SAApB,CAAzB;AACD;;AAED,SAAOY,IAAP;AACD,CAPD;;AASAI,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,MADe;AAEfG,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * DescribeGroups Response (Version: 0) => [groups]\n *   groups => error_code group_id state protocol_type protocol [members]\n *     error_code => INT16\n *     group_id => STRING\n *     state => STRING\n *     protocol_type => STRING\n *     protocol => STRING\n *     members => member_id client_id client_host member_metadata member_assignment\n *       member_id => STRING\n *       client_id => STRING\n *       client_host => STRING\n *       member_metadata => BYTES\n *       member_assignment => BYTES\n */\n\nconst decoderMember = decoder => ({\n  memberId: decoder.readString(),\n  clientId: decoder.readString(),\n  clientHost: decoder.readString(),\n  memberMetadata: decoder.readBytes(),\n  memberAssignment: decoder.readBytes(),\n})\n\nconst decodeGroup = decoder => ({\n  errorCode: decoder.readInt16(),\n  groupId: decoder.readString(),\n  state: decoder.readString(),\n  protocolType: decoder.readString(),\n  protocol: decoder.readString(),\n  members: decoder.readArray(decoderMember),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const groups = decoder.readArray(decodeGroup)\n\n  return {\n    groups,\n  }\n}\n\nconst parse = async data => {\n  const groupsWithError = data.groups.filter(({ errorCode }) => failure(errorCode))\n  if (groupsWithError.length > 0) {\n    throw createErrorFromCode(groupsWithError[0].errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}