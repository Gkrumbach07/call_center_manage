{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  parse: parseV0\n} = require('../v0/response');\n/**\n * v2 (supported in 0.10.0 or later)\n * ProduceResponse => [TopicName [Partition ErrorCode Offset Timestamp]] ThrottleTime\n *   TopicName => string\n *   Partition => int32\n *   ErrorCode => int16\n *   Offset => int64\n *   Timestamp => int64\n *   ThrottleTime => int32\n */\n\n\nconst partition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  offset: decoder.readInt64().toString(),\n  timestamp: decoder.readInt64().toString()\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const topics = decoder.readArray(decoder => ({\n    topicName: decoder.readString(),\n    partitions: decoder.readArray(partition)\n  }));\n  const throttleTime = decoder.readInt32();\n  return {\n    topics,\n    throttleTime\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/produce/v2/response.js"],"names":["Decoder","require","parse","parseV0","partition","decoder","readInt32","errorCode","readInt16","offset","readInt64","toString","timestamp","decode","rawData","topics","readArray","topicName","readString","partitions","throttleTime","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,KAAK,EAAEC;AAAT,IAAqBF,OAAO,CAAC,gBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,SAAS,GAAGC,OAAO,KAAK;AAC5BD,EAAAA,SAAS,EAAEC,OAAO,CAACC,SAAR,EADiB;AAE5BC,EAAAA,SAAS,EAAEF,OAAO,CAACG,SAAR,EAFiB;AAG5BC,EAAAA,MAAM,EAAEJ,OAAO,CAACK,SAAR,GAAoBC,QAApB,EAHoB;AAI5BC,EAAAA,SAAS,EAAEP,OAAO,CAACK,SAAR,GAAoBC,QAApB;AAJiB,CAAL,CAAzB;;AAOA,MAAME,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMT,OAAO,GAAG,IAAIL,OAAJ,CAAYc,OAAZ,CAAhB;AACA,QAAMC,MAAM,GAAGV,OAAO,CAACW,SAAR,CAAkBX,OAAO,KAAK;AAC3CY,IAAAA,SAAS,EAAEZ,OAAO,CAACa,UAAR,EADgC;AAE3CC,IAAAA,UAAU,EAAEd,OAAO,CAACW,SAAR,CAAkBZ,SAAlB;AAF+B,GAAL,CAAzB,CAAf;AAKA,QAAMgB,YAAY,GAAGf,OAAO,CAACC,SAAR,EAArB;AAEA,SAAO;AACLS,IAAAA,MADK;AAELK,IAAAA;AAFK,GAAP;AAID,CAbD;;AAeAC,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,MADe;AAEfX,EAAAA,KAAK,EAAEC;AAFQ,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV0 } = require('../v0/response')\n\n/**\n * v2 (supported in 0.10.0 or later)\n * ProduceResponse => [TopicName [Partition ErrorCode Offset Timestamp]] ThrottleTime\n *   TopicName => string\n *   Partition => int32\n *   ErrorCode => int16\n *   Offset => int64\n *   Timestamp => int64\n *   ThrottleTime => int32\n */\n\nconst partition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  offset: decoder.readInt64().toString(),\n  timestamp: decoder.readInt64().toString(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const topics = decoder.readArray(decoder => ({\n    topicName: decoder.readString(),\n    partitions: decoder.readArray(partition),\n  }))\n\n  const throttleTime = decoder.readInt32()\n\n  return {\n    topics,\n    throttleTime,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"]},"metadata":{},"sourceType":"script"}