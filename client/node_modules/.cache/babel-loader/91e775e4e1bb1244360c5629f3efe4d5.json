{"ast":null,"code":"const createRetry = require('../retry');\n\nconst {\n  CONNECTION_STATUS\n} = require('../network/connectionStatus');\n\nconst {\n  DefaultPartitioner\n} = require('./partitioners/');\n\nconst InstrumentationEventEmitter = require('../instrumentation/emitter');\n\nconst createEosManager = require('./eosManager');\n\nconst createMessageProducer = require('./messageProducer');\n\nconst {\n  events,\n  wrap: wrapEvent,\n  unwrap: unwrapEvent\n} = require('./instrumentationEvents');\n\nconst {\n  KafkaJSNonRetriableError\n} = require('../errors');\n\nconst {\n  values,\n  keys\n} = Object;\nconst eventNames = values(events);\nconst eventKeys = keys(events).map(key => `producer.events.${key}`).join(', ');\nconst {\n  CONNECT,\n  DISCONNECT\n} = events;\n/**\n *\n * @param {Object} params\n * @param {import('../../types').Cluster} params.cluster\n * @param {import('../../types').Logger} params.Logger\n * @param {import('../../types').ICustomPartitioner} [params.createPartitioner]\n * @param {import('../../types').RetryOptions} params.retry\n * @param {boolean} [params.idempotent]\n * @param {string} [params.transactionalId]\n * @param {number} [params.transactionTimeout]\n * @param {import('../instrumentation/emitter')} [params.instrumentationEmitter]\n *\n * @returns {import('../../types').Producer}\n */\n\nmodule.exports = ({\n  cluster,\n  logger: rootLogger,\n  createPartitioner = DefaultPartitioner,\n  retry,\n  idempotent = false,\n  transactionalId,\n  transactionTimeout,\n  instrumentationEmitter: rootInstrumentationEmitter\n}) => {\n  let connectionStatus = CONNECTION_STATUS.DISCONNECTED;\n  retry = retry || {\n    retries: idempotent ? Number.MAX_SAFE_INTEGER : 5\n  };\n\n  if (idempotent && retry.retries < 1) {\n    throw new KafkaJSNonRetriableError('Idempotent producer must allow retries to protect against transient errors');\n  }\n\n  const logger = rootLogger.namespace('Producer');\n\n  if (idempotent && retry.retries < Number.MAX_SAFE_INTEGER) {\n    logger.warn('Limiting retries for the idempotent producer may invalidate EoS guarantees');\n  }\n\n  const partitioner = createPartitioner();\n  const retrier = createRetry(Object.assign({}, cluster.retry, retry));\n  const instrumentationEmitter = rootInstrumentationEmitter || new InstrumentationEventEmitter();\n  const idempotentEosManager = createEosManager({\n    logger,\n    cluster,\n    transactionTimeout,\n    transactional: false,\n    transactionalId\n  });\n  const {\n    send,\n    sendBatch\n  } = createMessageProducer({\n    logger,\n    cluster,\n    partitioner,\n    eosManager: idempotentEosManager,\n    idempotent,\n    retrier,\n    getConnectionStatus: () => connectionStatus\n  });\n  let transactionalEosManager;\n  /**\n   * @param {string} eventName\n   * @param {AsyncFunction} listener\n   * @return {Function} removeListener\n   */\n\n  const on = (eventName, listener) => {\n    if (!eventNames.includes(eventName)) {\n      throw new KafkaJSNonRetriableError(`Event name should be one of ${eventKeys}`);\n    }\n\n    return instrumentationEmitter.addListener(unwrapEvent(eventName), event => {\n      event.type = wrapEvent(event.type);\n      Promise.resolve(listener(event)).catch(e => {\n        logger.error(`Failed to execute listener: ${e.message}`, {\n          eventName,\n          stack: e.stack\n        });\n      });\n    });\n  };\n  /**\n   * Begin a transaction. The returned object contains methods to send messages\n   * to the transaction and end the transaction by committing or aborting.\n   *\n   * Only messages sent on the transaction object will participate in the transaction.\n   *\n   * Calling any of the transactional methods after the transaction has ended\n   * will raise an exception (use `isActive` to ascertain if ended).\n   * @returns {Promise<Transaction>}\n   *\n   * @typedef {Object} Transaction\n   * @property {Function} send  Identical to the producer \"send\" method\n   * @property {Function} sendBatch Identical to the producer \"sendBatch\" method\n   * @property {Function} abort Abort the transaction\n   * @property {Function} commit  Commit the transaction\n   * @property {Function} isActive  Whether the transaction is active\n   */\n\n\n  const transaction = async () => {\n    if (!transactionalId) {\n      throw new KafkaJSNonRetriableError('Must provide transactional id for transactional producer');\n    }\n\n    let transactionDidEnd = false;\n    transactionalEosManager = transactionalEosManager || createEosManager({\n      logger,\n      cluster,\n      transactionTimeout,\n      transactional: true,\n      transactionalId\n    });\n\n    if (transactionalEosManager.isInTransaction()) {\n      throw new KafkaJSNonRetriableError('There is already an ongoing transaction for this producer. Please end the transaction before beginning another.');\n    } // We only initialize the producer id once\n\n\n    if (!transactionalEosManager.isInitialized()) {\n      await transactionalEosManager.initProducerId();\n    }\n\n    transactionalEosManager.beginTransaction();\n    const {\n      send: sendTxn,\n      sendBatch: sendBatchTxn\n    } = createMessageProducer({\n      logger,\n      cluster,\n      partitioner,\n      retrier,\n      eosManager: transactionalEosManager,\n      idempotent: true,\n      getConnectionStatus: () => connectionStatus\n    });\n\n    const isActive = () => transactionalEosManager.isInTransaction() && !transactionDidEnd;\n\n    const transactionGuard = fn => (...args) => {\n      if (!isActive()) {\n        return Promise.reject(new KafkaJSNonRetriableError('Cannot continue to use transaction once ended'));\n      }\n\n      return fn(...args);\n    };\n\n    return {\n      sendBatch: transactionGuard(sendBatchTxn),\n      send: transactionGuard(sendTxn),\n\n      /**\n       * Abort the ongoing transaction.\n       *\n       * @throws {KafkaJSNonRetriableError} If transaction has ended\n       */\n      abort: transactionGuard(async () => {\n        await transactionalEosManager.abort();\n        transactionDidEnd = true;\n      }),\n\n      /**\n       * Commit the ongoing transaction.\n       *\n       * @throws {KafkaJSNonRetriableError} If transaction has ended\n       */\n      commit: transactionGuard(async () => {\n        await transactionalEosManager.commit();\n        transactionDidEnd = true;\n      }),\n\n      /**\n       * Sends a list of specified offsets to the consumer group coordinator, and also marks those offsets as part of the current transaction.\n       *\n       * @throws {KafkaJSNonRetriableError} If transaction has ended\n       */\n      sendOffsets: transactionGuard(async ({\n        consumerGroupId,\n        topics\n      }) => {\n        await transactionalEosManager.sendOffsets({\n          consumerGroupId,\n          topics\n        });\n\n        for (const topicOffsets of topics) {\n          const {\n            topic,\n            partitions\n          } = topicOffsets;\n\n          for (const {\n            partition,\n            offset\n          } of partitions) {\n            cluster.markOffsetAsCommitted({\n              groupId: consumerGroupId,\n              topic,\n              partition,\n              offset\n            });\n          }\n        }\n      }),\n      isActive\n    };\n  };\n  /**\n   * @returns {Object} logger\n   */\n\n\n  const getLogger = () => logger;\n\n  return {\n    /**\n     * @returns {Promise}\n     */\n    connect: async () => {\n      await cluster.connect();\n      connectionStatus = CONNECTION_STATUS.CONNECTED;\n      instrumentationEmitter.emit(CONNECT);\n\n      if (idempotent && !idempotentEosManager.isInitialized()) {\n        await idempotentEosManager.initProducerId();\n      }\n    },\n\n    /**\n     * @return {Promise}\n     */\n    disconnect: async () => {\n      connectionStatus = CONNECTION_STATUS.DISCONNECTING;\n      await cluster.disconnect();\n      connectionStatus = CONNECTION_STATUS.DISCONNECTED;\n      instrumentationEmitter.emit(DISCONNECT);\n    },\n    isIdempotent: () => {\n      return idempotent;\n    },\n    events,\n    on,\n    send,\n    sendBatch,\n    transaction,\n    logger: getLogger\n  };\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/producer/index.js"],"names":["createRetry","require","CONNECTION_STATUS","DefaultPartitioner","InstrumentationEventEmitter","createEosManager","createMessageProducer","events","wrap","wrapEvent","unwrap","unwrapEvent","KafkaJSNonRetriableError","values","keys","Object","eventNames","eventKeys","map","key","join","CONNECT","DISCONNECT","module","exports","cluster","logger","rootLogger","createPartitioner","retry","idempotent","transactionalId","transactionTimeout","instrumentationEmitter","rootInstrumentationEmitter","connectionStatus","DISCONNECTED","retries","Number","MAX_SAFE_INTEGER","namespace","warn","partitioner","retrier","assign","idempotentEosManager","transactional","send","sendBatch","eosManager","getConnectionStatus","transactionalEosManager","on","eventName","listener","includes","addListener","event","type","Promise","resolve","catch","e","error","message","stack","transaction","transactionDidEnd","isInTransaction","isInitialized","initProducerId","beginTransaction","sendTxn","sendBatchTxn","isActive","transactionGuard","fn","args","reject","abort","commit","sendOffsets","consumerGroupId","topics","topicOffsets","topic","partitions","partition","offset","markOffsetAsCommitted","groupId","getLogger","connect","CONNECTED","emit","disconnect","DISCONNECTING","isIdempotent"],"mappings":"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","sourcesContent":["const createRetry = require('../retry')\nconst { CONNECTION_STATUS } = require('../network/connectionStatus')\nconst { DefaultPartitioner } = require('./partitioners/')\nconst InstrumentationEventEmitter = require('../instrumentation/emitter')\nconst createEosManager = require('./eosManager')\nconst createMessageProducer = require('./messageProducer')\nconst { events, wrap: wrapEvent, unwrap: unwrapEvent } = require('./instrumentationEvents')\nconst { KafkaJSNonRetriableError } = require('../errors')\n\nconst { values, keys } = Object\nconst eventNames = values(events)\nconst eventKeys = keys(events)\n  .map(key => `producer.events.${key}`)\n  .join(', ')\n\nconst { CONNECT, DISCONNECT } = events\n\n/**\n *\n * @param {Object} params\n * @param {import('../../types').Cluster} params.cluster\n * @param {import('../../types').Logger} params.Logger\n * @param {import('../../types').ICustomPartitioner} [params.createPartitioner]\n * @param {import('../../types').RetryOptions} params.retry\n * @param {boolean} [params.idempotent]\n * @param {string} [params.transactionalId]\n * @param {number} [params.transactionTimeout]\n * @param {import('../instrumentation/emitter')} [params.instrumentationEmitter]\n *\n * @returns {import('../../types').Producer}\n */\nmodule.exports = ({\n  cluster,\n  logger: rootLogger,\n  createPartitioner = DefaultPartitioner,\n  retry,\n  idempotent = false,\n  transactionalId,\n  transactionTimeout,\n  instrumentationEmitter: rootInstrumentationEmitter,\n}) => {\n  let connectionStatus = CONNECTION_STATUS.DISCONNECTED\n  retry = retry || { retries: idempotent ? Number.MAX_SAFE_INTEGER : 5 }\n\n  if (idempotent && retry.retries < 1) {\n    throw new KafkaJSNonRetriableError(\n      'Idempotent producer must allow retries to protect against transient errors'\n    )\n  }\n\n  const logger = rootLogger.namespace('Producer')\n\n  if (idempotent && retry.retries < Number.MAX_SAFE_INTEGER) {\n    logger.warn('Limiting retries for the idempotent producer may invalidate EoS guarantees')\n  }\n\n  const partitioner = createPartitioner()\n  const retrier = createRetry(Object.assign({}, cluster.retry, retry))\n  const instrumentationEmitter = rootInstrumentationEmitter || new InstrumentationEventEmitter()\n  const idempotentEosManager = createEosManager({\n    logger,\n    cluster,\n    transactionTimeout,\n    transactional: false,\n    transactionalId,\n  })\n\n  const { send, sendBatch } = createMessageProducer({\n    logger,\n    cluster,\n    partitioner,\n    eosManager: idempotentEosManager,\n    idempotent,\n    retrier,\n    getConnectionStatus: () => connectionStatus,\n  })\n\n  let transactionalEosManager\n\n  /**\n   * @param {string} eventName\n   * @param {AsyncFunction} listener\n   * @return {Function} removeListener\n   */\n  const on = (eventName, listener) => {\n    if (!eventNames.includes(eventName)) {\n      throw new KafkaJSNonRetriableError(`Event name should be one of ${eventKeys}`)\n    }\n\n    return instrumentationEmitter.addListener(unwrapEvent(eventName), event => {\n      event.type = wrapEvent(event.type)\n      Promise.resolve(listener(event)).catch(e => {\n        logger.error(`Failed to execute listener: ${e.message}`, {\n          eventName,\n          stack: e.stack,\n        })\n      })\n    })\n  }\n\n  /**\n   * Begin a transaction. The returned object contains methods to send messages\n   * to the transaction and end the transaction by committing or aborting.\n   *\n   * Only messages sent on the transaction object will participate in the transaction.\n   *\n   * Calling any of the transactional methods after the transaction has ended\n   * will raise an exception (use `isActive` to ascertain if ended).\n   * @returns {Promise<Transaction>}\n   *\n   * @typedef {Object} Transaction\n   * @property {Function} send  Identical to the producer \"send\" method\n   * @property {Function} sendBatch Identical to the producer \"sendBatch\" method\n   * @property {Function} abort Abort the transaction\n   * @property {Function} commit  Commit the transaction\n   * @property {Function} isActive  Whether the transaction is active\n   */\n  const transaction = async () => {\n    if (!transactionalId) {\n      throw new KafkaJSNonRetriableError('Must provide transactional id for transactional producer')\n    }\n\n    let transactionDidEnd = false\n    transactionalEosManager =\n      transactionalEosManager ||\n      createEosManager({\n        logger,\n        cluster,\n        transactionTimeout,\n        transactional: true,\n        transactionalId,\n      })\n\n    if (transactionalEosManager.isInTransaction()) {\n      throw new KafkaJSNonRetriableError(\n        'There is already an ongoing transaction for this producer. Please end the transaction before beginning another.'\n      )\n    }\n\n    // We only initialize the producer id once\n    if (!transactionalEosManager.isInitialized()) {\n      await transactionalEosManager.initProducerId()\n    }\n    transactionalEosManager.beginTransaction()\n\n    const { send: sendTxn, sendBatch: sendBatchTxn } = createMessageProducer({\n      logger,\n      cluster,\n      partitioner,\n      retrier,\n      eosManager: transactionalEosManager,\n      idempotent: true,\n      getConnectionStatus: () => connectionStatus,\n    })\n\n    const isActive = () => transactionalEosManager.isInTransaction() && !transactionDidEnd\n\n    const transactionGuard = fn => (...args) => {\n      if (!isActive()) {\n        return Promise.reject(\n          new KafkaJSNonRetriableError('Cannot continue to use transaction once ended')\n        )\n      }\n\n      return fn(...args)\n    }\n\n    return {\n      sendBatch: transactionGuard(sendBatchTxn),\n      send: transactionGuard(sendTxn),\n      /**\n       * Abort the ongoing transaction.\n       *\n       * @throws {KafkaJSNonRetriableError} If transaction has ended\n       */\n      abort: transactionGuard(async () => {\n        await transactionalEosManager.abort()\n        transactionDidEnd = true\n      }),\n      /**\n       * Commit the ongoing transaction.\n       *\n       * @throws {KafkaJSNonRetriableError} If transaction has ended\n       */\n      commit: transactionGuard(async () => {\n        await transactionalEosManager.commit()\n        transactionDidEnd = true\n      }),\n      /**\n       * Sends a list of specified offsets to the consumer group coordinator, and also marks those offsets as part of the current transaction.\n       *\n       * @throws {KafkaJSNonRetriableError} If transaction has ended\n       */\n      sendOffsets: transactionGuard(async ({ consumerGroupId, topics }) => {\n        await transactionalEosManager.sendOffsets({ consumerGroupId, topics })\n\n        for (const topicOffsets of topics) {\n          const { topic, partitions } = topicOffsets\n          for (const { partition, offset } of partitions) {\n            cluster.markOffsetAsCommitted({\n              groupId: consumerGroupId,\n              topic,\n              partition,\n              offset,\n            })\n          }\n        }\n      }),\n      isActive,\n    }\n  }\n\n  /**\n   * @returns {Object} logger\n   */\n  const getLogger = () => logger\n\n  return {\n    /**\n     * @returns {Promise}\n     */\n    connect: async () => {\n      await cluster.connect()\n      connectionStatus = CONNECTION_STATUS.CONNECTED\n      instrumentationEmitter.emit(CONNECT)\n\n      if (idempotent && !idempotentEosManager.isInitialized()) {\n        await idempotentEosManager.initProducerId()\n      }\n    },\n    /**\n     * @return {Promise}\n     */\n    disconnect: async () => {\n      connectionStatus = CONNECTION_STATUS.DISCONNECTING\n      await cluster.disconnect()\n      connectionStatus = CONNECTION_STATUS.DISCONNECTED\n      instrumentationEmitter.emit(DISCONNECT)\n    },\n    isIdempotent: () => {\n      return idempotent\n    },\n    events,\n    on,\n    send,\n    sendBatch,\n    transaction,\n    logger: getLogger,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}