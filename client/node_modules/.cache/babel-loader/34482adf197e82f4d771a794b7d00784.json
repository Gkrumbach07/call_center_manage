{"ast":null,"code":"const plain = require('../../protocol/sasl/plain');\n\nconst {\n  KafkaJSSASLAuthenticationError\n} = require('../../errors');\n\nmodule.exports = class PlainAuthenticator {\n  constructor(connection, logger, saslAuthenticate) {\n    this.connection = connection;\n    this.logger = logger.namespace('SASLPlainAuthenticator');\n    this.saslAuthenticate = saslAuthenticate;\n  }\n\n  async authenticate() {\n    const {\n      sasl\n    } = this.connection;\n\n    if (sasl.username == null || sasl.password == null) {\n      throw new KafkaJSSASLAuthenticationError('SASL Plain: Invalid username or password');\n    }\n\n    const request = plain.request(sasl);\n    const response = plain.response;\n    const {\n      host,\n      port\n    } = this.connection;\n    const broker = `${host}:${port}`;\n\n    try {\n      this.logger.debug('Authenticate with SASL PLAIN', {\n        broker\n      });\n      await this.saslAuthenticate({\n        request,\n        response\n      });\n      this.logger.debug('SASL PLAIN authentication successful', {\n        broker\n      });\n    } catch (e) {\n      const error = new KafkaJSSASLAuthenticationError(`SASL PLAIN authentication failed: ${e.message}`);\n      this.logger.error(error.message, {\n        broker\n      });\n      throw error;\n    }\n  }\n\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/broker/saslAuthenticator/plain.js"],"names":["plain","require","KafkaJSSASLAuthenticationError","module","exports","PlainAuthenticator","constructor","connection","logger","saslAuthenticate","namespace","authenticate","sasl","username","password","request","response","host","port","broker","debug","e","error","message"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,2BAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAqCD,OAAO,CAAC,cAAD,CAAlD;;AAEAE,MAAM,CAACC,OAAP,GAAiB,MAAMC,kBAAN,CAAyB;AACxCC,EAAAA,WAAW,CAACC,UAAD,EAAaC,MAAb,EAAqBC,gBAArB,EAAuC;AAChD,SAAKF,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcA,MAAM,CAACE,SAAP,CAAiB,wBAAjB,CAAd;AACA,SAAKD,gBAAL,GAAwBA,gBAAxB;AACD;;AAED,QAAME,YAAN,GAAqB;AACnB,UAAM;AAAEC,MAAAA;AAAF,QAAW,KAAKL,UAAtB;;AACA,QAAIK,IAAI,CAACC,QAAL,IAAiB,IAAjB,IAAyBD,IAAI,CAACE,QAAL,IAAiB,IAA9C,EAAoD;AAClD,YAAM,IAAIZ,8BAAJ,CAAmC,0CAAnC,CAAN;AACD;;AAED,UAAMa,OAAO,GAAGf,KAAK,CAACe,OAAN,CAAcH,IAAd,CAAhB;AACA,UAAMI,QAAQ,GAAGhB,KAAK,CAACgB,QAAvB;AACA,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAiB,KAAKX,UAA5B;AACA,UAAMY,MAAM,GAAI,GAAEF,IAAK,IAAGC,IAAK,EAA/B;;AAEA,QAAI;AACF,WAAKV,MAAL,CAAYY,KAAZ,CAAkB,8BAAlB,EAAkD;AAAED,QAAAA;AAAF,OAAlD;AACA,YAAM,KAAKV,gBAAL,CAAsB;AAAEM,QAAAA,OAAF;AAAWC,QAAAA;AAAX,OAAtB,CAAN;AACA,WAAKR,MAAL,CAAYY,KAAZ,CAAkB,sCAAlB,EAA0D;AAAED,QAAAA;AAAF,OAA1D;AACD,KAJD,CAIE,OAAOE,CAAP,EAAU;AACV,YAAMC,KAAK,GAAG,IAAIpB,8BAAJ,CACX,qCAAoCmB,CAAC,CAACE,OAAQ,EADnC,CAAd;AAGA,WAAKf,MAAL,CAAYc,KAAZ,CAAkBA,KAAK,CAACC,OAAxB,EAAiC;AAAEJ,QAAAA;AAAF,OAAjC;AACA,YAAMG,KAAN;AACD;AACF;;AA7BuC,CAA1C","sourcesContent":["const plain = require('../../protocol/sasl/plain')\nconst { KafkaJSSASLAuthenticationError } = require('../../errors')\n\nmodule.exports = class PlainAuthenticator {\n  constructor(connection, logger, saslAuthenticate) {\n    this.connection = connection\n    this.logger = logger.namespace('SASLPlainAuthenticator')\n    this.saslAuthenticate = saslAuthenticate\n  }\n\n  async authenticate() {\n    const { sasl } = this.connection\n    if (sasl.username == null || sasl.password == null) {\n      throw new KafkaJSSASLAuthenticationError('SASL Plain: Invalid username or password')\n    }\n\n    const request = plain.request(sasl)\n    const response = plain.response\n    const { host, port } = this.connection\n    const broker = `${host}:${port}`\n\n    try {\n      this.logger.debug('Authenticate with SASL PLAIN', { broker })\n      await this.saslAuthenticate({ request, response })\n      this.logger.debug('SASL PLAIN authentication successful', { broker })\n    } catch (e) {\n      const error = new KafkaJSSASLAuthenticationError(\n        `SASL PLAIN authentication failed: ${e.message}`\n      )\n      this.logger.error(error.message, { broker })\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}