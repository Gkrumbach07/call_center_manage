{"ast":null,"code":"const Encoder = require('../../../encoder');\n\nconst {\n  AddOffsetsToTxn: apiKey\n} = require('../../apiKeys');\n/**\n * AddOffsetsToTxn Request (Version: 0) => transactional_id producer_id producer_epoch group_id\n *   transactional_id => STRING\n *   producer_id => INT64\n *   producer_epoch => INT16\n *   group_id => STRING\n */\n\n\nmodule.exports = ({\n  transactionalId,\n  producerId,\n  producerEpoch,\n  groupId\n}) => ({\n  apiKey,\n  apiVersion: 0,\n  apiName: 'AddOffsetsToTxn',\n  encode: async () => {\n    return new Encoder().writeString(transactionalId).writeInt64(producerId).writeInt16(producerEpoch).writeString(groupId);\n  }\n});","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/addOffsetsToTxn/v0/request.js"],"names":["Encoder","require","AddOffsetsToTxn","apiKey","module","exports","transactionalId","producerId","producerEpoch","groupId","apiVersion","apiName","encode","writeString","writeInt64","writeInt16"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,eAAe,EAAEC;AAAnB,IAA8BF,OAAO,CAAC,eAAD,CAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,eAAF;AAAmBC,EAAAA,UAAnB;AAA+BC,EAAAA,aAA/B;AAA8CC,EAAAA;AAA9C,CAAD,MAA8D;AAC7EN,EAAAA,MAD6E;AAE7EO,EAAAA,UAAU,EAAE,CAFiE;AAG7EC,EAAAA,OAAO,EAAE,iBAHoE;AAI7EC,EAAAA,MAAM,EAAE,YAAY;AAClB,WAAO,IAAIZ,OAAJ,GACJa,WADI,CACQP,eADR,EAEJQ,UAFI,CAEOP,UAFP,EAGJQ,UAHI,CAGOP,aAHP,EAIJK,WAJI,CAIQJ,OAJR,CAAP;AAKD;AAV4E,CAA9D,CAAjB","sourcesContent":["const Encoder = require('../../../encoder')\nconst { AddOffsetsToTxn: apiKey } = require('../../apiKeys')\n\n/**\n * AddOffsetsToTxn Request (Version: 0) => transactional_id producer_id producer_epoch group_id\n *   transactional_id => STRING\n *   producer_id => INT64\n *   producer_epoch => INT16\n *   group_id => STRING\n */\n\nmodule.exports = ({ transactionalId, producerId, producerEpoch, groupId }) => ({\n  apiKey,\n  apiVersion: 0,\n  apiName: 'AddOffsetsToTxn',\n  encode: async () => {\n    return new Encoder()\n      .writeString(transactionalId)\n      .writeInt64(producerId)\n      .writeInt16(producerEpoch)\n      .writeString(groupId)\n  },\n})\n"]},"metadata":{},"sourceType":"script"}