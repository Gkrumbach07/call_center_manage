{"ast":null,"code":"const responseV0 = require('../v0/response');\n\nconst Decoder = require('../../../decoder');\n/**\n * ListGroups Response (Version: 1) => error_code [groups]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   groups => group_id protocol_type\n *     group_id => STRING\n *     protocol_type => STRING\n */\n\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const errorCode = decoder.readInt16();\n  const groups = decoder.readArray(responseV0.decodeGroup);\n  return {\n    throttleTime,\n    errorCode,\n    groups\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse: responseV0.parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/listGroups/v1/response.js"],"names":["responseV0","require","Decoder","decode","rawData","decoder","throttleTime","readInt32","errorCode","readInt16","groups","readArray","decodeGroup","module","exports","parse"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,gBAAD,CAA1B;;AAEA,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAME,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,OAAO,GAAG,IAAIH,OAAJ,CAAYE,OAAZ,CAAhB;AACA,QAAME,YAAY,GAAGD,OAAO,CAACE,SAAR,EAArB;AACA,QAAMC,SAAS,GAAGH,OAAO,CAACI,SAAR,EAAlB;AACA,QAAMC,MAAM,GAAGL,OAAO,CAACM,SAAR,CAAkBX,UAAU,CAACY,WAA7B,CAAf;AAEA,SAAO;AACLN,IAAAA,YADK;AAELE,IAAAA,SAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAXD;;AAaAG,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,MADe;AAEfY,EAAAA,KAAK,EAAEf,UAAU,CAACe;AAFH,CAAjB","sourcesContent":["const responseV0 = require('../v0/response')\n\nconst Decoder = require('../../../decoder')\n\n/**\n * ListGroups Response (Version: 1) => error_code [groups]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   groups => group_id protocol_type\n *     group_id => STRING\n *     protocol_type => STRING\n */\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const errorCode = decoder.readInt16()\n  const groups = decoder.readArray(responseV0.decodeGroup)\n\n  return {\n    throttleTime,\n    errorCode,\n    groups,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: responseV0.parse,\n}\n"]},"metadata":{},"sourceType":"script"}