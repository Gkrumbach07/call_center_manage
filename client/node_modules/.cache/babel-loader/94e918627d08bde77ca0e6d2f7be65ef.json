{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  parse: parseV0\n} = require('../v0/response');\n/**\n * DescribeConfigs Response (Version: 1) => throttle_time_ms [resources]\n *   throttle_time_ms => INT32\n *   resources => error_code error_message resource_type resource_name [config_entries]\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n *     resource_type => INT8\n *     resource_name => STRING\n *     config_entries => config_name config_value read_only config_source is_sensitive [config_synonyms]\n *       config_name => STRING\n *       config_value => NULLABLE_STRING\n *       read_only => BOOLEAN\n *       config_source => INT8\n *       is_sensitive => BOOLEAN\n *       config_synonyms => config_name config_value config_source\n *         config_name => STRING\n *         config_value => NULLABLE_STRING\n *         config_source => INT8\n */\n\n\nconst decodeSynonyms = decoder => ({\n  configName: decoder.readString(),\n  configValue: decoder.readString(),\n  configSource: decoder.readInt8()\n});\n\nconst decodeConfigEntries = decoder => ({\n  configName: decoder.readString(),\n  configValue: decoder.readString(),\n  readOnly: decoder.readBoolean(),\n  isDefault: decoder.readBoolean(),\n  isSensitive: decoder.readBoolean(),\n  configSynonyms: decoder.readArray(decodeSynonyms)\n});\n\nconst decodeResources = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  configEntries: decoder.readArray(decodeConfigEntries)\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const resources = decoder.readArray(decodeResources);\n  return {\n    throttleTime,\n    resources\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/describeConfigs/v1/response.js"],"names":["Decoder","require","parse","parseV0","decodeSynonyms","decoder","configName","readString","configValue","configSource","readInt8","decodeConfigEntries","readOnly","readBoolean","isDefault","isSensitive","configSynonyms","readArray","decodeResources","errorCode","readInt16","errorMessage","resourceType","resourceName","configEntries","decode","rawData","throttleTime","readInt32","resources","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,KAAK,EAAEC;AAAT,IAAqBF,OAAO,CAAC,gBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,cAAc,GAAGC,OAAO,KAAK;AACjCC,EAAAA,UAAU,EAAED,OAAO,CAACE,UAAR,EADqB;AAEjCC,EAAAA,WAAW,EAAEH,OAAO,CAACE,UAAR,EAFoB;AAGjCE,EAAAA,YAAY,EAAEJ,OAAO,CAACK,QAAR;AAHmB,CAAL,CAA9B;;AAMA,MAAMC,mBAAmB,GAAGN,OAAO,KAAK;AACtCC,EAAAA,UAAU,EAAED,OAAO,CAACE,UAAR,EAD0B;AAEtCC,EAAAA,WAAW,EAAEH,OAAO,CAACE,UAAR,EAFyB;AAGtCK,EAAAA,QAAQ,EAAEP,OAAO,CAACQ,WAAR,EAH4B;AAItCC,EAAAA,SAAS,EAAET,OAAO,CAACQ,WAAR,EAJ2B;AAKtCE,EAAAA,WAAW,EAAEV,OAAO,CAACQ,WAAR,EALyB;AAMtCG,EAAAA,cAAc,EAAEX,OAAO,CAACY,SAAR,CAAkBb,cAAlB;AANsB,CAAL,CAAnC;;AASA,MAAMc,eAAe,GAAGb,OAAO,KAAK;AAClCc,EAAAA,SAAS,EAAEd,OAAO,CAACe,SAAR,EADuB;AAElCC,EAAAA,YAAY,EAAEhB,OAAO,CAACE,UAAR,EAFoB;AAGlCe,EAAAA,YAAY,EAAEjB,OAAO,CAACK,QAAR,EAHoB;AAIlCa,EAAAA,YAAY,EAAElB,OAAO,CAACE,UAAR,EAJoB;AAKlCiB,EAAAA,aAAa,EAAEnB,OAAO,CAACY,SAAR,CAAkBN,mBAAlB;AALmB,CAAL,CAA/B;;AAQA,MAAMc,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMrB,OAAO,GAAG,IAAIL,OAAJ,CAAY0B,OAAZ,CAAhB;AACA,QAAMC,YAAY,GAAGtB,OAAO,CAACuB,SAAR,EAArB;AACA,QAAMC,SAAS,GAAGxB,OAAO,CAACY,SAAR,CAAkBC,eAAlB,CAAlB;AAEA,SAAO;AACLS,IAAAA,YADK;AAELE,IAAAA;AAFK,GAAP;AAID,CATD;;AAWAC,MAAM,CAACC,OAAP,GAAiB;AACfN,EAAAA,MADe;AAEfvB,EAAAA,KAAK,EAAEC;AAFQ,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV0 } = require('../v0/response')\n\n/**\n * DescribeConfigs Response (Version: 1) => throttle_time_ms [resources]\n *   throttle_time_ms => INT32\n *   resources => error_code error_message resource_type resource_name [config_entries]\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n *     resource_type => INT8\n *     resource_name => STRING\n *     config_entries => config_name config_value read_only config_source is_sensitive [config_synonyms]\n *       config_name => STRING\n *       config_value => NULLABLE_STRING\n *       read_only => BOOLEAN\n *       config_source => INT8\n *       is_sensitive => BOOLEAN\n *       config_synonyms => config_name config_value config_source\n *         config_name => STRING\n *         config_value => NULLABLE_STRING\n *         config_source => INT8\n */\n\nconst decodeSynonyms = decoder => ({\n  configName: decoder.readString(),\n  configValue: decoder.readString(),\n  configSource: decoder.readInt8(),\n})\n\nconst decodeConfigEntries = decoder => ({\n  configName: decoder.readString(),\n  configValue: decoder.readString(),\n  readOnly: decoder.readBoolean(),\n  isDefault: decoder.readBoolean(),\n  isSensitive: decoder.readBoolean(),\n  configSynonyms: decoder.readArray(decodeSynonyms),\n})\n\nconst decodeResources = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  configEntries: decoder.readArray(decodeConfigEntries),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const resources = decoder.readArray(decodeResources)\n\n  return {\n    throttleTime,\n    resources,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"]},"metadata":{},"sourceType":"script"}