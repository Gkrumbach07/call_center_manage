{"ast":null,"code":"const createSendMessages = require('./sendMessages');\n\nconst {\n  KafkaJSError,\n  KafkaJSNonRetriableError\n} = require('../errors');\n\nconst {\n  CONNECTION_STATUS\n} = require('../network/connectionStatus');\n\nmodule.exports = ({\n  logger,\n  cluster,\n  partitioner,\n  eosManager,\n  idempotent,\n  retrier,\n  getConnectionStatus\n}) => {\n  const sendMessages = createSendMessages({\n    logger,\n    cluster,\n    retrier,\n    partitioner,\n    eosManager\n  });\n\n  const validateConnectionStatus = () => {\n    const connectionStatus = getConnectionStatus();\n\n    switch (connectionStatus) {\n      case CONNECTION_STATUS.DISCONNECTING:\n        throw new KafkaJSNonRetriableError(`The producer is disconnecting; therefore, it can't safely accept messages anymore`);\n\n      case CONNECTION_STATUS.DISCONNECTED:\n        throw new KafkaJSError('The producer is disconnected');\n    }\n  };\n  /**\n   * @typedef {Object} TopicMessages\n   * @property {string} topic\n   * @property {Array} messages An array of objects with \"key\" and \"value\", example:\n   *                         [{ key: 'my-key', value: 'my-value'}]\n   *\n   * @typedef {Object} SendBatchRequest\n   * @property {Array<TopicMessages>} topicMessages\n   * @property {number} [acks=-1] Control the number of required acks.\n   *                           -1 = all replicas must acknowledge\n   *                            0 = no acknowledgments\n   *                            1 = only waits for the leader to acknowledge\n   *\n   * @property {number} [timeout=30000] The time to await a response in ms\n   * @property {Compression.Types} [compression=Compression.Types.None] Compression codec\n   *\n   * @param {SendBatchRequest}\n   * @returns {Promise}\n   */\n\n\n  const sendBatch = async ({\n    acks = -1,\n    timeout,\n    compression,\n    topicMessages = []\n  }) => {\n    if (topicMessages.some(({\n      topic\n    }) => !topic)) {\n      throw new KafkaJSNonRetriableError(`Invalid topic`);\n    }\n\n    if (idempotent && acks !== -1) {\n      throw new KafkaJSNonRetriableError(`Not requiring ack for all messages invalidates the idempotent producer's EoS guarantees`);\n    }\n\n    for (const {\n      topic,\n      messages\n    } of topicMessages) {\n      if (!messages) {\n        throw new KafkaJSNonRetriableError(`Invalid messages array [${messages}] for topic \"${topic}\"`);\n      }\n\n      const messageWithoutValue = messages.find(message => message.value === undefined);\n\n      if (messageWithoutValue) {\n        throw new KafkaJSNonRetriableError(`Invalid message without value for topic \"${topic}\": ${JSON.stringify(messageWithoutValue)}`);\n      }\n    }\n\n    validateConnectionStatus();\n    const mergedTopicMessages = topicMessages.reduce((merged, {\n      topic,\n      messages\n    }) => {\n      const index = merged.findIndex(({\n        topic: mergedTopic\n      }) => topic === mergedTopic);\n\n      if (index === -1) {\n        merged.push({\n          topic,\n          messages\n        });\n      } else {\n        merged[index].messages = [...merged[index].messages, ...messages];\n      }\n\n      return merged;\n    }, []);\n    return await sendMessages({\n      acks,\n      timeout,\n      compression,\n      topicMessages: mergedTopicMessages\n    });\n  };\n  /**\n   * @param {ProduceRequest} ProduceRequest\n   * @returns {Promise}\n   *\n   * @typedef {Object} ProduceRequest\n   * @property {string} topic\n   * @property {Array} messages An array of objects with \"key\" and \"value\", example:\n   *                         [{ key: 'my-key', value: 'my-value'}]\n   * @property {number} [acks=-1] Control the number of required acks.\n   *                           -1 = all replicas must acknowledge\n   *                            0 = no acknowledgments\n   *                            1 = only waits for the leader to acknowledge\n   * @property {number} [timeout=30000] The time to await a response in ms\n   * @property {Compression.Types} [compression=Compression.Types.None] Compression codec\n   */\n\n\n  const send = async ({\n    acks,\n    timeout,\n    compression,\n    topic,\n    messages\n  }) => {\n    const topicMessage = {\n      topic,\n      messages\n    };\n    return sendBatch({\n      acks,\n      timeout,\n      compression,\n      topicMessages: [topicMessage]\n    });\n  };\n\n  return {\n    send,\n    sendBatch\n  };\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/producer/messageProducer.js"],"names":["createSendMessages","require","KafkaJSError","KafkaJSNonRetriableError","CONNECTION_STATUS","module","exports","logger","cluster","partitioner","eosManager","idempotent","retrier","getConnectionStatus","sendMessages","validateConnectionStatus","connectionStatus","DISCONNECTING","DISCONNECTED","sendBatch","acks","timeout","compression","topicMessages","some","topic","messages","messageWithoutValue","find","message","value","undefined","JSON","stringify","mergedTopicMessages","reduce","merged","index","findIndex","mergedTopic","push","send","topicMessage"],"mappings":"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","sourcesContent":["const createSendMessages = require('./sendMessages')\nconst { KafkaJSError, KafkaJSNonRetriableError } = require('../errors')\nconst { CONNECTION_STATUS } = require('../network/connectionStatus')\n\nmodule.exports = ({\n  logger,\n  cluster,\n  partitioner,\n  eosManager,\n  idempotent,\n  retrier,\n  getConnectionStatus,\n}) => {\n  const sendMessages = createSendMessages({\n    logger,\n    cluster,\n    retrier,\n    partitioner,\n    eosManager,\n  })\n\n  const validateConnectionStatus = () => {\n    const connectionStatus = getConnectionStatus()\n\n    switch (connectionStatus) {\n      case CONNECTION_STATUS.DISCONNECTING:\n        throw new KafkaJSNonRetriableError(\n          `The producer is disconnecting; therefore, it can't safely accept messages anymore`\n        )\n      case CONNECTION_STATUS.DISCONNECTED:\n        throw new KafkaJSError('The producer is disconnected')\n    }\n  }\n\n  /**\n   * @typedef {Object} TopicMessages\n   * @property {string} topic\n   * @property {Array} messages An array of objects with \"key\" and \"value\", example:\n   *                         [{ key: 'my-key', value: 'my-value'}]\n   *\n   * @typedef {Object} SendBatchRequest\n   * @property {Array<TopicMessages>} topicMessages\n   * @property {number} [acks=-1] Control the number of required acks.\n   *                           -1 = all replicas must acknowledge\n   *                            0 = no acknowledgments\n   *                            1 = only waits for the leader to acknowledge\n   *\n   * @property {number} [timeout=30000] The time to await a response in ms\n   * @property {Compression.Types} [compression=Compression.Types.None] Compression codec\n   *\n   * @param {SendBatchRequest}\n   * @returns {Promise}\n   */\n  const sendBatch = async ({ acks = -1, timeout, compression, topicMessages = [] }) => {\n    if (topicMessages.some(({ topic }) => !topic)) {\n      throw new KafkaJSNonRetriableError(`Invalid topic`)\n    }\n\n    if (idempotent && acks !== -1) {\n      throw new KafkaJSNonRetriableError(\n        `Not requiring ack for all messages invalidates the idempotent producer's EoS guarantees`\n      )\n    }\n\n    for (const { topic, messages } of topicMessages) {\n      if (!messages) {\n        throw new KafkaJSNonRetriableError(\n          `Invalid messages array [${messages}] for topic \"${topic}\"`\n        )\n      }\n\n      const messageWithoutValue = messages.find(message => message.value === undefined)\n      if (messageWithoutValue) {\n        throw new KafkaJSNonRetriableError(\n          `Invalid message without value for topic \"${topic}\": ${JSON.stringify(\n            messageWithoutValue\n          )}`\n        )\n      }\n    }\n\n    validateConnectionStatus()\n    const mergedTopicMessages = topicMessages.reduce((merged, { topic, messages }) => {\n      const index = merged.findIndex(({ topic: mergedTopic }) => topic === mergedTopic)\n\n      if (index === -1) {\n        merged.push({ topic, messages })\n      } else {\n        merged[index].messages = [...merged[index].messages, ...messages]\n      }\n\n      return merged\n    }, [])\n\n    return await sendMessages({\n      acks,\n      timeout,\n      compression,\n      topicMessages: mergedTopicMessages,\n    })\n  }\n\n  /**\n   * @param {ProduceRequest} ProduceRequest\n   * @returns {Promise}\n   *\n   * @typedef {Object} ProduceRequest\n   * @property {string} topic\n   * @property {Array} messages An array of objects with \"key\" and \"value\", example:\n   *                         [{ key: 'my-key', value: 'my-value'}]\n   * @property {number} [acks=-1] Control the number of required acks.\n   *                           -1 = all replicas must acknowledge\n   *                            0 = no acknowledgments\n   *                            1 = only waits for the leader to acknowledge\n   * @property {number} [timeout=30000] The time to await a response in ms\n   * @property {Compression.Types} [compression=Compression.Types.None] Compression codec\n   */\n  const send = async ({ acks, timeout, compression, topic, messages }) => {\n    const topicMessage = { topic, messages }\n    return sendBatch({\n      acks,\n      timeout,\n      compression,\n      topicMessages: [topicMessage],\n    })\n  }\n\n  return {\n    send,\n    sendBatch,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}