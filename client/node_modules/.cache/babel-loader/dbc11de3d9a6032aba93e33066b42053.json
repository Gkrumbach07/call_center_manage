{"ast":null,"code":"const {\n  createLogger,\n  LEVELS: {\n    INFO\n  }\n} = require('./loggers');\n\nconst InstrumentationEventEmitter = require('./instrumentation/emitter');\n\nconst LoggerConsole = require('./loggers/console');\n\nconst Cluster = require('./cluster');\n\nconst createProducer = require('./producer');\n\nconst createConsumer = require('./consumer');\n\nconst createAdmin = require('./admin');\n\nconst ISOLATION_LEVEL = require('./protocol/isolationLevel');\n\nconst defaultSocketFactory = require('./network/socketFactory');\n\nconst PRIVATE = {\n  CREATE_CLUSTER: Symbol('private:Kafka:createCluster'),\n  CLUSTER_RETRY: Symbol('private:Kafka:clusterRetry'),\n  LOGGER: Symbol('private:Kafka:logger'),\n  OFFSETS: Symbol('private:Kafka:offsets')\n};\nconst DEFAULT_METADATA_MAX_AGE = 300000;\nmodule.exports = class Client {\n  constructor({\n    brokers,\n    ssl,\n    sasl,\n    clientId,\n    connectionTimeout,\n    authenticationTimeout,\n    reauthenticationThreshold,\n    requestTimeout,\n    enforceRequestTimeout = false,\n    retry,\n    socketFactory = defaultSocketFactory(),\n    logLevel = INFO,\n    logCreator = LoggerConsole\n  }) {\n    this[PRIVATE.OFFSETS] = new Map();\n    this[PRIVATE.LOGGER] = createLogger({\n      level: logLevel,\n      logCreator\n    });\n    this[PRIVATE.CLUSTER_RETRY] = retry;\n\n    this[PRIVATE.CREATE_CLUSTER] = ({\n      metadataMaxAge,\n      allowAutoTopicCreation = true,\n      maxInFlightRequests = null,\n      instrumentationEmitter = null,\n      isolationLevel\n    }) => new Cluster({\n      logger: this[PRIVATE.LOGGER],\n      retry: this[PRIVATE.CLUSTER_RETRY],\n      offsets: this[PRIVATE.OFFSETS],\n      socketFactory,\n      brokers,\n      ssl,\n      sasl,\n      clientId,\n      connectionTimeout,\n      authenticationTimeout,\n      reauthenticationThreshold,\n      requestTimeout,\n      enforceRequestTimeout,\n      metadataMaxAge,\n      instrumentationEmitter,\n      allowAutoTopicCreation,\n      maxInFlightRequests,\n      isolationLevel\n    });\n  }\n  /**\n   * @public\n   */\n\n\n  producer({\n    createPartitioner,\n    retry,\n    metadataMaxAge = DEFAULT_METADATA_MAX_AGE,\n    allowAutoTopicCreation,\n    idempotent,\n    transactionalId,\n    transactionTimeout,\n    maxInFlightRequests\n  } = {}) {\n    const instrumentationEmitter = new InstrumentationEventEmitter();\n    const cluster = this[PRIVATE.CREATE_CLUSTER]({\n      metadataMaxAge,\n      allowAutoTopicCreation,\n      maxInFlightRequests,\n      instrumentationEmitter\n    });\n    return createProducer({\n      retry: { ...this[PRIVATE.CLUSTER_RETRY],\n        ...retry\n      },\n      logger: this[PRIVATE.LOGGER],\n      cluster,\n      createPartitioner,\n      idempotent,\n      transactionalId,\n      transactionTimeout,\n      instrumentationEmitter\n    });\n  }\n  /**\n   * @public\n   */\n\n\n  consumer({\n    groupId,\n    partitionAssigners,\n    metadataMaxAge = DEFAULT_METADATA_MAX_AGE,\n    sessionTimeout,\n    rebalanceTimeout,\n    heartbeatInterval,\n    maxBytesPerPartition,\n    minBytes,\n    maxBytes,\n    maxWaitTimeInMs,\n    retry = {\n      retries: 5\n    },\n    allowAutoTopicCreation,\n    maxInFlightRequests,\n    readUncommitted = false,\n    rackId = ''\n  } = {}) {\n    const isolationLevel = readUncommitted ? ISOLATION_LEVEL.READ_UNCOMMITTED : ISOLATION_LEVEL.READ_COMMITTED;\n    const instrumentationEmitter = new InstrumentationEventEmitter();\n    const cluster = this[PRIVATE.CREATE_CLUSTER]({\n      metadataMaxAge,\n      allowAutoTopicCreation,\n      maxInFlightRequests,\n      isolationLevel,\n      instrumentationEmitter\n    });\n    return createConsumer({\n      retry: { ...this[PRIVATE.CLUSTER_RETRY],\n        ...retry\n      },\n      logger: this[PRIVATE.LOGGER],\n      cluster,\n      groupId,\n      partitionAssigners,\n      sessionTimeout,\n      rebalanceTimeout,\n      heartbeatInterval,\n      maxBytesPerPartition,\n      minBytes,\n      maxBytes,\n      maxWaitTimeInMs,\n      isolationLevel,\n      instrumentationEmitter,\n      rackId,\n      metadataMaxAge\n    });\n  }\n  /**\n   * @public\n   */\n\n\n  admin({\n    retry\n  } = {}) {\n    const instrumentationEmitter = new InstrumentationEventEmitter();\n    const cluster = this[PRIVATE.CREATE_CLUSTER]({\n      allowAutoTopicCreation: false,\n      instrumentationEmitter\n    });\n    return createAdmin({\n      retry: { ...this[PRIVATE.CLUSTER_RETRY],\n        ...retry\n      },\n      logger: this[PRIVATE.LOGGER],\n      instrumentationEmitter,\n      cluster\n    });\n  }\n  /**\n   * @public\n   */\n\n\n  logger() {\n    return this[PRIVATE.LOGGER];\n  }\n\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/index.js"],"names":["createLogger","LEVELS","INFO","require","InstrumentationEventEmitter","LoggerConsole","Cluster","createProducer","createConsumer","createAdmin","ISOLATION_LEVEL","defaultSocketFactory","PRIVATE","CREATE_CLUSTER","Symbol","CLUSTER_RETRY","LOGGER","OFFSETS","DEFAULT_METADATA_MAX_AGE","module","exports","Client","constructor","brokers","ssl","sasl","clientId","connectionTimeout","authenticationTimeout","reauthenticationThreshold","requestTimeout","enforceRequestTimeout","retry","socketFactory","logLevel","logCreator","Map","level","metadataMaxAge","allowAutoTopicCreation","maxInFlightRequests","instrumentationEmitter","isolationLevel","logger","offsets","producer","createPartitioner","idempotent","transactionalId","transactionTimeout","cluster","consumer","groupId","partitionAssigners","sessionTimeout","rebalanceTimeout","heartbeatInterval","maxBytesPerPartition","minBytes","maxBytes","maxWaitTimeInMs","retries","readUncommitted","rackId","READ_UNCOMMITTED","READ_COMMITTED","admin"],"mappings":"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","sourcesContent":["const {\n  createLogger,\n  LEVELS: { INFO },\n} = require('./loggers')\n\nconst InstrumentationEventEmitter = require('./instrumentation/emitter')\nconst LoggerConsole = require('./loggers/console')\nconst Cluster = require('./cluster')\nconst createProducer = require('./producer')\nconst createConsumer = require('./consumer')\nconst createAdmin = require('./admin')\nconst ISOLATION_LEVEL = require('./protocol/isolationLevel')\nconst defaultSocketFactory = require('./network/socketFactory')\n\nconst PRIVATE = {\n  CREATE_CLUSTER: Symbol('private:Kafka:createCluster'),\n  CLUSTER_RETRY: Symbol('private:Kafka:clusterRetry'),\n  LOGGER: Symbol('private:Kafka:logger'),\n  OFFSETS: Symbol('private:Kafka:offsets'),\n}\n\nconst DEFAULT_METADATA_MAX_AGE = 300000\n\nmodule.exports = class Client {\n  constructor({\n    brokers,\n    ssl,\n    sasl,\n    clientId,\n    connectionTimeout,\n    authenticationTimeout,\n    reauthenticationThreshold,\n    requestTimeout,\n    enforceRequestTimeout = false,\n    retry,\n    socketFactory = defaultSocketFactory(),\n    logLevel = INFO,\n    logCreator = LoggerConsole,\n  }) {\n    this[PRIVATE.OFFSETS] = new Map()\n    this[PRIVATE.LOGGER] = createLogger({ level: logLevel, logCreator })\n    this[PRIVATE.CLUSTER_RETRY] = retry\n    this[PRIVATE.CREATE_CLUSTER] = ({\n      metadataMaxAge,\n      allowAutoTopicCreation = true,\n      maxInFlightRequests = null,\n      instrumentationEmitter = null,\n      isolationLevel,\n    }) =>\n      new Cluster({\n        logger: this[PRIVATE.LOGGER],\n        retry: this[PRIVATE.CLUSTER_RETRY],\n        offsets: this[PRIVATE.OFFSETS],\n        socketFactory,\n        brokers,\n        ssl,\n        sasl,\n        clientId,\n        connectionTimeout,\n        authenticationTimeout,\n        reauthenticationThreshold,\n        requestTimeout,\n        enforceRequestTimeout,\n        metadataMaxAge,\n        instrumentationEmitter,\n        allowAutoTopicCreation,\n        maxInFlightRequests,\n        isolationLevel,\n      })\n  }\n\n  /**\n   * @public\n   */\n  producer({\n    createPartitioner,\n    retry,\n    metadataMaxAge = DEFAULT_METADATA_MAX_AGE,\n    allowAutoTopicCreation,\n    idempotent,\n    transactionalId,\n    transactionTimeout,\n    maxInFlightRequests,\n  } = {}) {\n    const instrumentationEmitter = new InstrumentationEventEmitter()\n    const cluster = this[PRIVATE.CREATE_CLUSTER]({\n      metadataMaxAge,\n      allowAutoTopicCreation,\n      maxInFlightRequests,\n      instrumentationEmitter,\n    })\n\n    return createProducer({\n      retry: { ...this[PRIVATE.CLUSTER_RETRY], ...retry },\n      logger: this[PRIVATE.LOGGER],\n      cluster,\n      createPartitioner,\n      idempotent,\n      transactionalId,\n      transactionTimeout,\n      instrumentationEmitter,\n    })\n  }\n\n  /**\n   * @public\n   */\n  consumer({\n    groupId,\n    partitionAssigners,\n    metadataMaxAge = DEFAULT_METADATA_MAX_AGE,\n    sessionTimeout,\n    rebalanceTimeout,\n    heartbeatInterval,\n    maxBytesPerPartition,\n    minBytes,\n    maxBytes,\n    maxWaitTimeInMs,\n    retry = { retries: 5 },\n    allowAutoTopicCreation,\n    maxInFlightRequests,\n    readUncommitted = false,\n    rackId = '',\n  } = {}) {\n    const isolationLevel = readUncommitted\n      ? ISOLATION_LEVEL.READ_UNCOMMITTED\n      : ISOLATION_LEVEL.READ_COMMITTED\n\n    const instrumentationEmitter = new InstrumentationEventEmitter()\n    const cluster = this[PRIVATE.CREATE_CLUSTER]({\n      metadataMaxAge,\n      allowAutoTopicCreation,\n      maxInFlightRequests,\n      isolationLevel,\n      instrumentationEmitter,\n    })\n\n    return createConsumer({\n      retry: { ...this[PRIVATE.CLUSTER_RETRY], ...retry },\n      logger: this[PRIVATE.LOGGER],\n      cluster,\n      groupId,\n      partitionAssigners,\n      sessionTimeout,\n      rebalanceTimeout,\n      heartbeatInterval,\n      maxBytesPerPartition,\n      minBytes,\n      maxBytes,\n      maxWaitTimeInMs,\n      isolationLevel,\n      instrumentationEmitter,\n      rackId,\n      metadataMaxAge,\n    })\n  }\n\n  /**\n   * @public\n   */\n  admin({ retry } = {}) {\n    const instrumentationEmitter = new InstrumentationEventEmitter()\n    const cluster = this[PRIVATE.CREATE_CLUSTER]({\n      allowAutoTopicCreation: false,\n      instrumentationEmitter,\n    })\n\n    return createAdmin({\n      retry: { ...this[PRIVATE.CLUSTER_RETRY], ...retry },\n      logger: this[PRIVATE.LOGGER],\n      instrumentationEmitter,\n      cluster,\n    })\n  }\n\n  /**\n   * @public\n   */\n  logger() {\n    return this[PRIVATE.LOGGER]\n  }\n}\n"]},"metadata":{},"sourceType":"script"}