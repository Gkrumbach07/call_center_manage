{"ast":null,"code":"const apiKeys = require('./apiKeys');\n\nconst {\n  KafkaJSServerDoesNotSupportApiKey\n} = require('../../errors');\n\nconst requests = {\n  Produce: require('./produce'),\n  Fetch: require('./fetch'),\n  ListOffsets: require('./listOffsets'),\n  Metadata: require('./metadata'),\n  LeaderAndIsr: {},\n  StopReplica: {},\n  UpdateMetadata: {},\n  ControlledShutdown: {},\n  OffsetCommit: require('./offsetCommit'),\n  OffsetFetch: require('./offsetFetch'),\n  GroupCoordinator: require('./findCoordinator'),\n  JoinGroup: require('./joinGroup'),\n  Heartbeat: require('./heartbeat'),\n  LeaveGroup: require('./leaveGroup'),\n  SyncGroup: require('./syncGroup'),\n  DescribeGroups: require('./describeGroups'),\n  ListGroups: require('./listGroups'),\n  SaslHandshake: require('./saslHandshake'),\n  ApiVersions: require('./apiVersions'),\n  CreateTopics: require('./createTopics'),\n  DeleteTopics: require('./deleteTopics'),\n  DeleteRecords: require('./deleteRecords'),\n  InitProducerId: require('./initProducerId'),\n  OffsetForLeaderEpoch: {},\n  AddPartitionsToTxn: require('./addPartitionsToTxn'),\n  AddOffsetsToTxn: require('./addOffsetsToTxn'),\n  EndTxn: require('./endTxn'),\n  WriteTxnMarkers: {},\n  TxnOffsetCommit: require('./txnOffsetCommit'),\n  DescribeAcls: require('./describeAcls'),\n  CreateAcls: require('./createAcls'),\n  DeleteAcls: require('./deleteAcls'),\n  DescribeConfigs: require('./describeConfigs'),\n  AlterConfigs: require('./alterConfigs'),\n  AlterReplicaLogDirs: {},\n  DescribeLogDirs: {},\n  SaslAuthenticate: require('./saslAuthenticate'),\n  CreatePartitions: require('./createPartitions'),\n  CreateDelegationToken: {},\n  RenewDelegationToken: {},\n  ExpireDelegationToken: {},\n  DescribeDelegationToken: {},\n  DeleteGroups: require('./deleteGroups')\n};\nconst names = Object.keys(apiKeys);\nconst keys = Object.values(apiKeys);\n\nconst findApiName = apiKey => names[keys.indexOf(apiKey)];\n\nconst lookup = versions => (apiKey, definition) => {\n  const version = versions[apiKey];\n  const availableVersions = definition.versions.map(Number);\n  const bestImplementedVersion = Math.max.apply(this, availableVersions);\n\n  if (!version || version.maxVersion == null) {\n    throw new KafkaJSServerDoesNotSupportApiKey(`The Kafka server does not support the requested API version`, {\n      apiKey,\n      apiName: findApiName(apiKey)\n    });\n  }\n\n  const bestSupportedVersion = Math.min(bestImplementedVersion, version.maxVersion);\n  return definition.protocol({\n    version: bestSupportedVersion\n  });\n};\n\nmodule.exports = {\n  requests,\n  lookup\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/index.js"],"names":["apiKeys","require","KafkaJSServerDoesNotSupportApiKey","requests","Produce","Fetch","ListOffsets","Metadata","LeaderAndIsr","StopReplica","UpdateMetadata","ControlledShutdown","OffsetCommit","OffsetFetch","GroupCoordinator","JoinGroup","Heartbeat","LeaveGroup","SyncGroup","DescribeGroups","ListGroups","SaslHandshake","ApiVersions","CreateTopics","DeleteTopics","DeleteRecords","InitProducerId","OffsetForLeaderEpoch","AddPartitionsToTxn","AddOffsetsToTxn","EndTxn","WriteTxnMarkers","TxnOffsetCommit","DescribeAcls","CreateAcls","DeleteAcls","DescribeConfigs","AlterConfigs","AlterReplicaLogDirs","DescribeLogDirs","SaslAuthenticate","CreatePartitions","CreateDelegationToken","RenewDelegationToken","ExpireDelegationToken","DescribeDelegationToken","DeleteGroups","names","Object","keys","values","findApiName","apiKey","indexOf","lookup","versions","definition","version","availableVersions","map","Number","bestImplementedVersion","Math","max","apply","maxVersion","apiName","bestSupportedVersion","min","protocol","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAwCD,OAAO,CAAC,cAAD,CAArD;;AAEA,MAAME,QAAQ,GAAG;AACfC,EAAAA,OAAO,EAAEH,OAAO,CAAC,WAAD,CADD;AAEfI,EAAAA,KAAK,EAAEJ,OAAO,CAAC,SAAD,CAFC;AAGfK,EAAAA,WAAW,EAAEL,OAAO,CAAC,eAAD,CAHL;AAIfM,EAAAA,QAAQ,EAAEN,OAAO,CAAC,YAAD,CAJF;AAKfO,EAAAA,YAAY,EAAE,EALC;AAMfC,EAAAA,WAAW,EAAE,EANE;AAOfC,EAAAA,cAAc,EAAE,EAPD;AAQfC,EAAAA,kBAAkB,EAAE,EARL;AASfC,EAAAA,YAAY,EAAEX,OAAO,CAAC,gBAAD,CATN;AAUfY,EAAAA,WAAW,EAAEZ,OAAO,CAAC,eAAD,CAVL;AAWfa,EAAAA,gBAAgB,EAAEb,OAAO,CAAC,mBAAD,CAXV;AAYfc,EAAAA,SAAS,EAAEd,OAAO,CAAC,aAAD,CAZH;AAafe,EAAAA,SAAS,EAAEf,OAAO,CAAC,aAAD,CAbH;AAcfgB,EAAAA,UAAU,EAAEhB,OAAO,CAAC,cAAD,CAdJ;AAefiB,EAAAA,SAAS,EAAEjB,OAAO,CAAC,aAAD,CAfH;AAgBfkB,EAAAA,cAAc,EAAElB,OAAO,CAAC,kBAAD,CAhBR;AAiBfmB,EAAAA,UAAU,EAAEnB,OAAO,CAAC,cAAD,CAjBJ;AAkBfoB,EAAAA,aAAa,EAAEpB,OAAO,CAAC,iBAAD,CAlBP;AAmBfqB,EAAAA,WAAW,EAAErB,OAAO,CAAC,eAAD,CAnBL;AAoBfsB,EAAAA,YAAY,EAAEtB,OAAO,CAAC,gBAAD,CApBN;AAqBfuB,EAAAA,YAAY,EAAEvB,OAAO,CAAC,gBAAD,CArBN;AAsBfwB,EAAAA,aAAa,EAAExB,OAAO,CAAC,iBAAD,CAtBP;AAuBfyB,EAAAA,cAAc,EAAEzB,OAAO,CAAC,kBAAD,CAvBR;AAwBf0B,EAAAA,oBAAoB,EAAE,EAxBP;AAyBfC,EAAAA,kBAAkB,EAAE3B,OAAO,CAAC,sBAAD,CAzBZ;AA0Bf4B,EAAAA,eAAe,EAAE5B,OAAO,CAAC,mBAAD,CA1BT;AA2Bf6B,EAAAA,MAAM,EAAE7B,OAAO,CAAC,UAAD,CA3BA;AA4Bf8B,EAAAA,eAAe,EAAE,EA5BF;AA6BfC,EAAAA,eAAe,EAAE/B,OAAO,CAAC,mBAAD,CA7BT;AA8BfgC,EAAAA,YAAY,EAAEhC,OAAO,CAAC,gBAAD,CA9BN;AA+BfiC,EAAAA,UAAU,EAAEjC,OAAO,CAAC,cAAD,CA/BJ;AAgCfkC,EAAAA,UAAU,EAAElC,OAAO,CAAC,cAAD,CAhCJ;AAiCfmC,EAAAA,eAAe,EAAEnC,OAAO,CAAC,mBAAD,CAjCT;AAkCfoC,EAAAA,YAAY,EAAEpC,OAAO,CAAC,gBAAD,CAlCN;AAmCfqC,EAAAA,mBAAmB,EAAE,EAnCN;AAoCfC,EAAAA,eAAe,EAAE,EApCF;AAqCfC,EAAAA,gBAAgB,EAAEvC,OAAO,CAAC,oBAAD,CArCV;AAsCfwC,EAAAA,gBAAgB,EAAExC,OAAO,CAAC,oBAAD,CAtCV;AAuCfyC,EAAAA,qBAAqB,EAAE,EAvCR;AAwCfC,EAAAA,oBAAoB,EAAE,EAxCP;AAyCfC,EAAAA,qBAAqB,EAAE,EAzCR;AA0CfC,EAAAA,uBAAuB,EAAE,EA1CV;AA2CfC,EAAAA,YAAY,EAAE7C,OAAO,CAAC,gBAAD;AA3CN,CAAjB;AA8CA,MAAM8C,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYjD,OAAZ,CAAd;AACA,MAAMiD,IAAI,GAAGD,MAAM,CAACE,MAAP,CAAclD,OAAd,CAAb;;AACA,MAAMmD,WAAW,GAAGC,MAAM,IAAIL,KAAK,CAACE,IAAI,CAACI,OAAL,CAAaD,MAAb,CAAD,CAAnC;;AAEA,MAAME,MAAM,GAAGC,QAAQ,IAAI,CAACH,MAAD,EAASI,UAAT,KAAwB;AACjD,QAAMC,OAAO,GAAGF,QAAQ,CAACH,MAAD,CAAxB;AACA,QAAMM,iBAAiB,GAAGF,UAAU,CAACD,QAAX,CAAoBI,GAApB,CAAwBC,MAAxB,CAA1B;AACA,QAAMC,sBAAsB,GAAGC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBN,iBAArB,CAA/B;;AAEA,MAAI,CAACD,OAAD,IAAYA,OAAO,CAACQ,UAAR,IAAsB,IAAtC,EAA4C;AAC1C,UAAM,IAAI/D,iCAAJ,CACH,6DADG,EAEJ;AAAEkD,MAAAA,MAAF;AAAUc,MAAAA,OAAO,EAAEf,WAAW,CAACC,MAAD;AAA9B,KAFI,CAAN;AAID;;AAED,QAAMe,oBAAoB,GAAGL,IAAI,CAACM,GAAL,CAASP,sBAAT,EAAiCJ,OAAO,CAACQ,UAAzC,CAA7B;AACA,SAAOT,UAAU,CAACa,QAAX,CAAoB;AAAEZ,IAAAA,OAAO,EAAEU;AAAX,GAApB,CAAP;AACD,CAdD;;AAgBAG,MAAM,CAACC,OAAP,GAAiB;AACfpE,EAAAA,QADe;AAEfmD,EAAAA;AAFe,CAAjB","sourcesContent":["const apiKeys = require('./apiKeys')\nconst { KafkaJSServerDoesNotSupportApiKey } = require('../../errors')\n\nconst requests = {\n  Produce: require('./produce'),\n  Fetch: require('./fetch'),\n  ListOffsets: require('./listOffsets'),\n  Metadata: require('./metadata'),\n  LeaderAndIsr: {},\n  StopReplica: {},\n  UpdateMetadata: {},\n  ControlledShutdown: {},\n  OffsetCommit: require('./offsetCommit'),\n  OffsetFetch: require('./offsetFetch'),\n  GroupCoordinator: require('./findCoordinator'),\n  JoinGroup: require('./joinGroup'),\n  Heartbeat: require('./heartbeat'),\n  LeaveGroup: require('./leaveGroup'),\n  SyncGroup: require('./syncGroup'),\n  DescribeGroups: require('./describeGroups'),\n  ListGroups: require('./listGroups'),\n  SaslHandshake: require('./saslHandshake'),\n  ApiVersions: require('./apiVersions'),\n  CreateTopics: require('./createTopics'),\n  DeleteTopics: require('./deleteTopics'),\n  DeleteRecords: require('./deleteRecords'),\n  InitProducerId: require('./initProducerId'),\n  OffsetForLeaderEpoch: {},\n  AddPartitionsToTxn: require('./addPartitionsToTxn'),\n  AddOffsetsToTxn: require('./addOffsetsToTxn'),\n  EndTxn: require('./endTxn'),\n  WriteTxnMarkers: {},\n  TxnOffsetCommit: require('./txnOffsetCommit'),\n  DescribeAcls: require('./describeAcls'),\n  CreateAcls: require('./createAcls'),\n  DeleteAcls: require('./deleteAcls'),\n  DescribeConfigs: require('./describeConfigs'),\n  AlterConfigs: require('./alterConfigs'),\n  AlterReplicaLogDirs: {},\n  DescribeLogDirs: {},\n  SaslAuthenticate: require('./saslAuthenticate'),\n  CreatePartitions: require('./createPartitions'),\n  CreateDelegationToken: {},\n  RenewDelegationToken: {},\n  ExpireDelegationToken: {},\n  DescribeDelegationToken: {},\n  DeleteGroups: require('./deleteGroups'),\n}\n\nconst names = Object.keys(apiKeys)\nconst keys = Object.values(apiKeys)\nconst findApiName = apiKey => names[keys.indexOf(apiKey)]\n\nconst lookup = versions => (apiKey, definition) => {\n  const version = versions[apiKey]\n  const availableVersions = definition.versions.map(Number)\n  const bestImplementedVersion = Math.max.apply(this, availableVersions)\n\n  if (!version || version.maxVersion == null) {\n    throw new KafkaJSServerDoesNotSupportApiKey(\n      `The Kafka server does not support the requested API version`,\n      { apiKey, apiName: findApiName(apiKey) }\n    )\n  }\n\n  const bestSupportedVersion = Math.min(bestImplementedVersion, version.maxVersion)\n  return definition.protocol({ version: bestSupportedVersion })\n}\n\nmodule.exports = {\n  requests,\n  lookup,\n}\n"]},"metadata":{},"sourceType":"script"}