{"ast":null,"code":"const Encoder = require('../protocol/encoder');\n\nconst Decoder = require('../protocol/decoder');\n\nconst MemberMetadata = {\n  /**\n   * @param {Object} metadata\n   * @param {number} metadata.version\n   * @param {Array<string>} metadata.topics\n   * @param {Buffer} [metadata.userData=Buffer.alloc(0)]\n   *\n   * @returns Buffer\n   */\n  encode({\n    version,\n    topics,\n    userData = Buffer.alloc(0)\n  }) {\n    return new Encoder().writeInt16(version).writeArray(topics).writeBytes(userData).buffer;\n  },\n\n  /**\n   * @param {Buffer} buffer\n   * @returns {Object}\n   */\n  decode(buffer) {\n    const decoder = new Decoder(buffer);\n    return {\n      version: decoder.readInt16(),\n      topics: decoder.readArray(d => d.readString()),\n      userData: decoder.readBytes()\n    };\n  }\n\n};\nconst MemberAssignment = {\n  /**\n   * @param {number} version\n   * @param {Object<String,Array>} assignment, example:\n   *                               {\n   *                                 'topic-A': [0, 2, 4, 6],\n   *                                 'topic-B': [0, 2],\n   *                               }\n   * @param {Buffer} [userData=Buffer.alloc(0)]\n   *\n   * @returns Buffer\n   */\n  encode({\n    version,\n    assignment,\n    userData = Buffer.alloc(0)\n  }) {\n    return new Encoder().writeInt16(version).writeArray(Object.keys(assignment).map(topic => new Encoder().writeString(topic).writeArray(assignment[topic]))).writeBytes(userData).buffer;\n  },\n\n  /**\n   * @param {Buffer} buffer\n   * @returns {Object|null}\n   */\n  decode(buffer) {\n    const decoder = new Decoder(buffer);\n\n    const decodePartitions = d => d.readInt32();\n\n    const decodeAssignment = d => ({\n      topic: d.readString(),\n      partitions: d.readArray(decodePartitions)\n    });\n\n    const indexAssignment = (obj, {\n      topic,\n      partitions\n    }) => Object.assign(obj, {\n      [topic]: partitions\n    });\n\n    if (!decoder.canReadInt16()) {\n      return null;\n    }\n\n    return {\n      version: decoder.readInt16(),\n      assignment: decoder.readArray(decodeAssignment).reduce(indexAssignment, {}),\n      userData: decoder.readBytes()\n    };\n  }\n\n};\nmodule.exports = {\n  MemberMetadata,\n  MemberAssignment\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/consumer/assignerProtocol.js"],"names":["Encoder","require","Decoder","MemberMetadata","encode","version","topics","userData","Buffer","alloc","writeInt16","writeArray","writeBytes","buffer","decode","decoder","readInt16","readArray","d","readString","readBytes","MemberAssignment","assignment","Object","keys","map","topic","writeString","decodePartitions","readInt32","decodeAssignment","partitions","indexAssignment","obj","assign","canReadInt16","reduce","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,qBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,qBAAD,CAAvB;;AAEA,MAAME,cAAc,GAAG;AACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,MAAM,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,MAAX;AAAmBC,IAAAA,QAAQ,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb;AAA9B,GAAD,EAAkD;AACtD,WAAO,IAAIT,OAAJ,GACJU,UADI,CACOL,OADP,EAEJM,UAFI,CAEOL,MAFP,EAGJM,UAHI,CAGOL,QAHP,EAGiBM,MAHxB;AAID,GAdoB;;AAgBrB;AACF;AACA;AACA;AACEC,EAAAA,MAAM,CAACD,MAAD,EAAS;AACb,UAAME,OAAO,GAAG,IAAIb,OAAJ,CAAYW,MAAZ,CAAhB;AACA,WAAO;AACLR,MAAAA,OAAO,EAAEU,OAAO,CAACC,SAAR,EADJ;AAELV,MAAAA,MAAM,EAAES,OAAO,CAACE,SAAR,CAAkBC,CAAC,IAAIA,CAAC,CAACC,UAAF,EAAvB,CAFH;AAGLZ,MAAAA,QAAQ,EAAEQ,OAAO,CAACK,SAAR;AAHL,KAAP;AAKD;;AA3BoB,CAAvB;AA8BA,MAAMC,gBAAgB,GAAG;AACvB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEjB,EAAAA,MAAM,CAAC;AAAEC,IAAAA,OAAF;AAAWiB,IAAAA,UAAX;AAAuBf,IAAAA,QAAQ,GAAGC,MAAM,CAACC,KAAP,CAAa,CAAb;AAAlC,GAAD,EAAsD;AAC1D,WAAO,IAAIT,OAAJ,GACJU,UADI,CACOL,OADP,EAEJM,UAFI,CAGHY,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBG,GAAxB,CAA4BC,KAAK,IAC/B,IAAI1B,OAAJ,GAAc2B,WAAd,CAA0BD,KAA1B,EAAiCf,UAAjC,CAA4CW,UAAU,CAACI,KAAD,CAAtD,CADF,CAHG,EAOJd,UAPI,CAOOL,QAPP,EAOiBM,MAPxB;AAQD,GArBsB;;AAuBvB;AACF;AACA;AACA;AACEC,EAAAA,MAAM,CAACD,MAAD,EAAS;AACb,UAAME,OAAO,GAAG,IAAIb,OAAJ,CAAYW,MAAZ,CAAhB;;AACA,UAAMe,gBAAgB,GAAGV,CAAC,IAAIA,CAAC,CAACW,SAAF,EAA9B;;AACA,UAAMC,gBAAgB,GAAGZ,CAAC,KAAK;AAC7BQ,MAAAA,KAAK,EAAER,CAAC,CAACC,UAAF,EADsB;AAE7BY,MAAAA,UAAU,EAAEb,CAAC,CAACD,SAAF,CAAYW,gBAAZ;AAFiB,KAAL,CAA1B;;AAIA,UAAMI,eAAe,GAAG,CAACC,GAAD,EAAM;AAAEP,MAAAA,KAAF;AAASK,MAAAA;AAAT,KAAN,KACtBR,MAAM,CAACW,MAAP,CAAcD,GAAd,EAAmB;AAAE,OAACP,KAAD,GAASK;AAAX,KAAnB,CADF;;AAGA,QAAI,CAAChB,OAAO,CAACoB,YAAR,EAAL,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,WAAO;AACL9B,MAAAA,OAAO,EAAEU,OAAO,CAACC,SAAR,EADJ;AAELM,MAAAA,UAAU,EAAEP,OAAO,CAACE,SAAR,CAAkBa,gBAAlB,EAAoCM,MAApC,CAA2CJ,eAA3C,EAA4D,EAA5D,CAFP;AAGLzB,MAAAA,QAAQ,EAAEQ,OAAO,CAACK,SAAR;AAHL,KAAP;AAKD;;AA9CsB,CAAzB;AAiDAiB,MAAM,CAACC,OAAP,GAAiB;AACfnC,EAAAA,cADe;AAEfkB,EAAAA;AAFe,CAAjB","sourcesContent":["const Encoder = require('../protocol/encoder')\nconst Decoder = require('../protocol/decoder')\n\nconst MemberMetadata = {\n  /**\n   * @param {Object} metadata\n   * @param {number} metadata.version\n   * @param {Array<string>} metadata.topics\n   * @param {Buffer} [metadata.userData=Buffer.alloc(0)]\n   *\n   * @returns Buffer\n   */\n  encode({ version, topics, userData = Buffer.alloc(0) }) {\n    return new Encoder()\n      .writeInt16(version)\n      .writeArray(topics)\n      .writeBytes(userData).buffer\n  },\n\n  /**\n   * @param {Buffer} buffer\n   * @returns {Object}\n   */\n  decode(buffer) {\n    const decoder = new Decoder(buffer)\n    return {\n      version: decoder.readInt16(),\n      topics: decoder.readArray(d => d.readString()),\n      userData: decoder.readBytes(),\n    }\n  },\n}\n\nconst MemberAssignment = {\n  /**\n   * @param {number} version\n   * @param {Object<String,Array>} assignment, example:\n   *                               {\n   *                                 'topic-A': [0, 2, 4, 6],\n   *                                 'topic-B': [0, 2],\n   *                               }\n   * @param {Buffer} [userData=Buffer.alloc(0)]\n   *\n   * @returns Buffer\n   */\n  encode({ version, assignment, userData = Buffer.alloc(0) }) {\n    return new Encoder()\n      .writeInt16(version)\n      .writeArray(\n        Object.keys(assignment).map(topic =>\n          new Encoder().writeString(topic).writeArray(assignment[topic])\n        )\n      )\n      .writeBytes(userData).buffer\n  },\n\n  /**\n   * @param {Buffer} buffer\n   * @returns {Object|null}\n   */\n  decode(buffer) {\n    const decoder = new Decoder(buffer)\n    const decodePartitions = d => d.readInt32()\n    const decodeAssignment = d => ({\n      topic: d.readString(),\n      partitions: d.readArray(decodePartitions),\n    })\n    const indexAssignment = (obj, { topic, partitions }) =>\n      Object.assign(obj, { [topic]: partitions })\n\n    if (!decoder.canReadInt16()) {\n      return null\n    }\n\n    return {\n      version: decoder.readInt16(),\n      assignment: decoder.readArray(decodeAssignment).reduce(indexAssignment, {}),\n      userData: decoder.readBytes(),\n    }\n  },\n}\n\nmodule.exports = {\n  MemberMetadata,\n  MemberAssignment,\n}\n"]},"metadata":{},"sourceType":"script"}