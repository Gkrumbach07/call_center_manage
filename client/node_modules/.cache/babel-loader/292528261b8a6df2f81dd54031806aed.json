{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n/**\n * DescribeAcls Response (Version: 0) => throttle_time_ms error_code error_message [resources]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   resources => resource_type resource_name [acls]\n *     resource_type => INT8\n *     resource_name => STRING\n *     acls => principal host operation permission_type\n *       principal => STRING\n *       host => STRING\n *       operation => INT8\n *       permission_type => INT8\n */\n\n\nconst decodeAcls = decoder => ({\n  principal: decoder.readString(),\n  host: decoder.readString(),\n  operation: decoder.readInt8(),\n  permissionType: decoder.readInt8()\n});\n\nconst decodeResources = decoder => ({\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  acls: decoder.readArray(decodeAcls)\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const errorCode = decoder.readInt16();\n  const errorMessage = decoder.readString();\n  const resources = decoder.readArray(decodeResources);\n  return {\n    throttleTime,\n    errorCode,\n    errorMessage,\n    resources\n  };\n};\n\nconst parse = async data => {\n  if (failure(data.errorCode)) {\n    throw createErrorFromCode(data.errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/describeAcls/v0/response.js"],"names":["Decoder","require","failure","createErrorFromCode","decodeAcls","decoder","principal","readString","host","operation","readInt8","permissionType","decodeResources","resourceType","resourceName","acls","readArray","decode","rawData","throttleTime","readInt32","errorCode","readInt16","errorMessage","resources","parse","data","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAmCF,OAAO,CAAC,gBAAD,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,UAAU,GAAGC,OAAO,KAAK;AAC7BC,EAAAA,SAAS,EAAED,OAAO,CAACE,UAAR,EADkB;AAE7BC,EAAAA,IAAI,EAAEH,OAAO,CAACE,UAAR,EAFuB;AAG7BE,EAAAA,SAAS,EAAEJ,OAAO,CAACK,QAAR,EAHkB;AAI7BC,EAAAA,cAAc,EAAEN,OAAO,CAACK,QAAR;AAJa,CAAL,CAA1B;;AAOA,MAAME,eAAe,GAAGP,OAAO,KAAK;AAClCQ,EAAAA,YAAY,EAAER,OAAO,CAACK,QAAR,EADoB;AAElCI,EAAAA,YAAY,EAAET,OAAO,CAACE,UAAR,EAFoB;AAGlCQ,EAAAA,IAAI,EAAEV,OAAO,CAACW,SAAR,CAAkBZ,UAAlB;AAH4B,CAAL,CAA/B;;AAMA,MAAMa,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMb,OAAO,GAAG,IAAIL,OAAJ,CAAYkB,OAAZ,CAAhB;AACA,QAAMC,YAAY,GAAGd,OAAO,CAACe,SAAR,EAArB;AACA,QAAMC,SAAS,GAAGhB,OAAO,CAACiB,SAAR,EAAlB;AACA,QAAMC,YAAY,GAAGlB,OAAO,CAACE,UAAR,EAArB;AACA,QAAMiB,SAAS,GAAGnB,OAAO,CAACW,SAAR,CAAkBJ,eAAlB,CAAlB;AAEA,SAAO;AACLO,IAAAA,YADK;AAELE,IAAAA,SAFK;AAGLE,IAAAA,YAHK;AAILC,IAAAA;AAJK,GAAP;AAMD,CAbD;;AAeA,MAAMC,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,MAAIxB,OAAO,CAACwB,IAAI,CAACL,SAAN,CAAX,EAA6B;AAC3B,UAAMlB,mBAAmB,CAACuB,IAAI,CAACL,SAAN,CAAzB;AACD;;AAED,SAAOK,IAAP;AACD,CAND;;AAQAC,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,MADe;AAEfQ,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * DescribeAcls Response (Version: 0) => throttle_time_ms error_code error_message [resources]\n *   throttle_time_ms => INT32\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   resources => resource_type resource_name [acls]\n *     resource_type => INT8\n *     resource_name => STRING\n *     acls => principal host operation permission_type\n *       principal => STRING\n *       host => STRING\n *       operation => INT8\n *       permission_type => INT8\n */\n\nconst decodeAcls = decoder => ({\n  principal: decoder.readString(),\n  host: decoder.readString(),\n  operation: decoder.readInt8(),\n  permissionType: decoder.readInt8(),\n})\n\nconst decodeResources = decoder => ({\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  acls: decoder.readArray(decodeAcls),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const errorCode = decoder.readInt16()\n  const errorMessage = decoder.readString()\n  const resources = decoder.readArray(decodeResources)\n\n  return {\n    throttleTime,\n    errorCode,\n    errorMessage,\n    resources,\n  }\n}\n\nconst parse = async data => {\n  if (failure(data.errorCode)) {\n    throw createErrorFromCode(data.errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}