{"ast":null,"code":"/* eslint-disable */\n// Based on the kafka client 0.10.2 murmur2 implementation\n// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L364\nconst SEED = 0x9747b28c; // 'm' and 'r' are mixing constants generated offline.\n// They're not really 'magic', they just happen to work well.\n\nconst M = 0x5bd1e995;\nconst R = 24;\n\nmodule.exports = key => {\n  const data = Buffer.isBuffer(key) ? key : Buffer.from(String(key));\n  const length = data.length; // Initialize the hash to a random value\n\n  let h = SEED ^ length;\n  let length4 = length / 4;\n\n  for (let i = 0; i < length4; i++) {\n    const i4 = i * 4;\n    let k = (data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16) + ((data[i4 + 3] & 0xff) << 24);\n    k *= M;\n    k ^= k >>> R;\n    k *= M;\n    h *= M;\n    h ^= k;\n  } // Handle the last few bytes of the input array\n\n\n  switch (length % 4) {\n    case 3:\n      h ^= (data[(length & ~3) + 2] & 0xff) << 16;\n\n    case 2:\n      h ^= (data[(length & ~3) + 1] & 0xff) << 8;\n\n    case 1:\n      h ^= data[length & ~3] & 0xff;\n      h *= M;\n  }\n\n  h ^= h >>> 13;\n  h *= M;\n  h ^= h >>> 15;\n  return h;\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/producer/partitioners/default/murmur2.js"],"names":["SEED","M","R","module","exports","key","data","Buffer","isBuffer","from","String","length","h","length4","i","i4","k"],"mappings":"AAAA;AAEA;AACA;AAEA,MAAMA,IAAI,GAAG,UAAb,C,CAEA;AACA;;AACA,MAAMC,CAAC,GAAG,UAAV;AACA,MAAMC,CAAC,GAAG,EAAV;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,GAAG,IAAI;AACtB,QAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBH,GAAhB,IAAuBA,GAAvB,GAA6BE,MAAM,CAACE,IAAP,CAAYC,MAAM,CAACL,GAAD,CAAlB,CAA1C;AACA,QAAMM,MAAM,GAAGL,IAAI,CAACK,MAApB,CAFsB,CAItB;;AACA,MAAIC,CAAC,GAAGZ,IAAI,GAAGW,MAAf;AACA,MAAIE,OAAO,GAAGF,MAAM,GAAG,CAAvB;;AAEA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAApB,EAA6BC,CAAC,EAA9B,EAAkC;AAChC,UAAMC,EAAE,GAAGD,CAAC,GAAG,CAAf;AACA,QAAIE,CAAC,GACH,CAACV,IAAI,CAACS,EAAE,GAAG,CAAN,CAAJ,GAAe,IAAhB,KACC,CAACT,IAAI,CAACS,EAAE,GAAG,CAAN,CAAJ,GAAe,IAAhB,KAAyB,CAD1B,KAEC,CAACT,IAAI,CAACS,EAAE,GAAG,CAAN,CAAJ,GAAe,IAAhB,KAAyB,EAF1B,KAGC,CAACT,IAAI,CAACS,EAAE,GAAG,CAAN,CAAJ,GAAe,IAAhB,KAAyB,EAH1B,CADF;AAKAC,IAAAA,CAAC,IAAIf,CAAL;AACAe,IAAAA,CAAC,IAAIA,CAAC,KAAKd,CAAX;AACAc,IAAAA,CAAC,IAAIf,CAAL;AACAW,IAAAA,CAAC,IAAIX,CAAL;AACAW,IAAAA,CAAC,IAAII,CAAL;AACD,GApBqB,CAsBtB;;;AACA,UAAQL,MAAM,GAAG,CAAjB;AACE,SAAK,CAAL;AACEC,MAAAA,CAAC,IAAI,CAACN,IAAI,CAAC,CAACK,MAAM,GAAG,CAAC,CAAX,IAAgB,CAAjB,CAAJ,GAA0B,IAA3B,KAAoC,EAAzC;;AACF,SAAK,CAAL;AACEC,MAAAA,CAAC,IAAI,CAACN,IAAI,CAAC,CAACK,MAAM,GAAG,CAAC,CAAX,IAAgB,CAAjB,CAAJ,GAA0B,IAA3B,KAAoC,CAAzC;;AACF,SAAK,CAAL;AACEC,MAAAA,CAAC,IAAIN,IAAI,CAACK,MAAM,GAAG,CAAC,CAAX,CAAJ,GAAoB,IAAzB;AACAC,MAAAA,CAAC,IAAIX,CAAL;AAPJ;;AAUAW,EAAAA,CAAC,IAAIA,CAAC,KAAK,EAAX;AACAA,EAAAA,CAAC,IAAIX,CAAL;AACAW,EAAAA,CAAC,IAAIA,CAAC,KAAK,EAAX;AAEA,SAAOA,CAAP;AACD,CAtCD","sourcesContent":["/* eslint-disable */\n\n// Based on the kafka client 0.10.2 murmur2 implementation\n// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L364\n\nconst SEED = 0x9747b28c\n\n// 'm' and 'r' are mixing constants generated offline.\n// They're not really 'magic', they just happen to work well.\nconst M = 0x5bd1e995\nconst R = 24\n\nmodule.exports = key => {\n  const data = Buffer.isBuffer(key) ? key : Buffer.from(String(key))\n  const length = data.length\n\n  // Initialize the hash to a random value\n  let h = SEED ^ length\n  let length4 = length / 4\n\n  for (let i = 0; i < length4; i++) {\n    const i4 = i * 4\n    let k =\n      (data[i4 + 0] & 0xff) +\n      ((data[i4 + 1] & 0xff) << 8) +\n      ((data[i4 + 2] & 0xff) << 16) +\n      ((data[i4 + 3] & 0xff) << 24)\n    k *= M\n    k ^= k >>> R\n    k *= M\n    h *= M\n    h ^= k\n  }\n\n  // Handle the last few bytes of the input array\n  switch (length % 4) {\n    case 3:\n      h ^= (data[(length & ~3) + 2] & 0xff) << 16\n    case 2:\n      h ^= (data[(length & ~3) + 1] & 0xff) << 8\n    case 1:\n      h ^= data[length & ~3] & 0xff\n      h *= M\n  }\n\n  h ^= h >>> 13\n  h *= M\n  h ^= h >>> 15\n\n  return h\n}\n"]},"metadata":{},"sourceType":"script"}