{"ast":null,"code":"const createState = topic => ({\n  topic,\n  paused: new Set(),\n  pauseAll: false,\n  resumed: new Set()\n});\n\nmodule.exports = class SubscriptionState {\n  constructor() {\n    this.assignedPartitionsByTopic = {};\n    this.subscriptionStatesByTopic = {};\n  }\n  /**\n   * Replace the current assignment with a new set of assignments\n   *\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n\n\n  assign(topicPartitions = []) {\n    this.assignedPartitionsByTopic = topicPartitions.reduce((assigned, {\n      topic,\n      partitions = []\n    }) => {\n      return { ...assigned,\n        [topic]: {\n          topic,\n          partitions\n        }\n      };\n    }, {});\n  }\n  /**\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n\n\n  pause(topicPartitions = []) {\n    topicPartitions.forEach(({\n      topic,\n      partitions\n    }) => {\n      const state = this.subscriptionStatesByTopic[topic] || createState(topic);\n\n      if (typeof partitions === 'undefined') {\n        state.paused.clear();\n        state.resumed.clear();\n        state.pauseAll = true;\n      } else if (Array.isArray(partitions)) {\n        partitions.forEach(partition => {\n          state.paused.add(partition);\n          state.resumed.delete(partition);\n        });\n        state.pauseAll = false;\n      }\n\n      this.subscriptionStatesByTopic[topic] = state;\n    });\n  }\n  /**\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n\n\n  resume(topicPartitions = []) {\n    topicPartitions.forEach(({\n      topic,\n      partitions\n    }) => {\n      const state = this.subscriptionStatesByTopic[topic] || createState(topic);\n\n      if (typeof partitions === 'undefined') {\n        state.paused.clear();\n        state.resumed.clear();\n        state.pauseAll = false;\n      } else if (Array.isArray(partitions)) {\n        partitions.forEach(partition => {\n          state.paused.delete(partition);\n\n          if (state.pauseAll) {\n            state.resumed.add(partition);\n          }\n        });\n      }\n\n      this.subscriptionStatesByTopic[topic] = state;\n    });\n  }\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n\n\n  assigned() {\n    return Object.values(this.assignedPartitionsByTopic).map(({\n      topic,\n      partitions\n    }) => ({\n      topic,\n      partitions: partitions.sort()\n    }));\n  }\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n\n\n  active() {\n    return Object.values(this.assignedPartitionsByTopic).map(({\n      topic,\n      partitions\n    }) => ({\n      topic,\n      partitions: partitions.filter(partition => !this.isPaused(topic, partition)).sort()\n    }));\n  }\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n\n\n  paused() {\n    return Object.values(this.assignedPartitionsByTopic).map(({\n      topic,\n      partitions\n    }) => ({\n      topic,\n      partitions: partitions.filter(partition => this.isPaused(topic, partition)).sort()\n    })).filter(({\n      partitions\n    }) => partitions.length !== 0);\n  }\n\n  isPaused(topic, partition) {\n    const state = this.subscriptionStatesByTopic[topic];\n\n    if (!state) {\n      return false;\n    }\n\n    const partitionResumed = state.resumed.has(partition);\n    const partitionPaused = state.paused.has(partition);\n    return state.pauseAll && !partitionResumed || partitionPaused;\n  }\n\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/consumer/subscriptionState.js"],"names":["createState","topic","paused","Set","pauseAll","resumed","module","exports","SubscriptionState","constructor","assignedPartitionsByTopic","subscriptionStatesByTopic","assign","topicPartitions","reduce","assigned","partitions","pause","forEach","state","clear","Array","isArray","partition","add","delete","resume","Object","values","map","sort","active","filter","isPaused","length","partitionResumed","has","partitionPaused"],"mappings":"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","sourcesContent":["const createState = topic => ({\n  topic,\n  paused: new Set(),\n  pauseAll: false,\n  resumed: new Set(),\n})\n\nmodule.exports = class SubscriptionState {\n  constructor() {\n    this.assignedPartitionsByTopic = {}\n    this.subscriptionStatesByTopic = {}\n  }\n\n  /**\n   * Replace the current assignment with a new set of assignments\n   *\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  assign(topicPartitions = []) {\n    this.assignedPartitionsByTopic = topicPartitions.reduce(\n      (assigned, { topic, partitions = [] }) => {\n        return { ...assigned, [topic]: { topic, partitions } }\n      },\n      {}\n    )\n  }\n\n  /**\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  pause(topicPartitions = []) {\n    topicPartitions.forEach(({ topic, partitions }) => {\n      const state = this.subscriptionStatesByTopic[topic] || createState(topic)\n\n      if (typeof partitions === 'undefined') {\n        state.paused.clear()\n        state.resumed.clear()\n        state.pauseAll = true\n      } else if (Array.isArray(partitions)) {\n        partitions.forEach(partition => {\n          state.paused.add(partition)\n          state.resumed.delete(partition)\n        })\n        state.pauseAll = false\n      }\n\n      this.subscriptionStatesByTopic[topic] = state\n    })\n  }\n\n  /**\n   * @param {Array<TopicPartitions>} topicPartitions Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  resume(topicPartitions = []) {\n    topicPartitions.forEach(({ topic, partitions }) => {\n      const state = this.subscriptionStatesByTopic[topic] || createState(topic)\n\n      if (typeof partitions === 'undefined') {\n        state.paused.clear()\n        state.resumed.clear()\n        state.pauseAll = false\n      } else if (Array.isArray(partitions)) {\n        partitions.forEach(partition => {\n          state.paused.delete(partition)\n\n          if (state.pauseAll) {\n            state.resumed.add(partition)\n          }\n        })\n      }\n\n      this.subscriptionStatesByTopic[topic] = state\n    })\n  }\n\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  assigned() {\n    return Object.values(this.assignedPartitionsByTopic).map(({ topic, partitions }) => ({\n      topic,\n      partitions: partitions.sort(),\n    }))\n  }\n\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  active() {\n    return Object.values(this.assignedPartitionsByTopic).map(({ topic, partitions }) => ({\n      topic,\n      partitions: partitions.filter(partition => !this.isPaused(topic, partition)).sort(),\n    }))\n  }\n\n  /**\n   * @returns {Array<import(\"../../types\").TopicPartitions>} topicPartitions\n   * Example: [{ topic: 'topic-name', partitions: [1, 2] }]\n   */\n  paused() {\n    return Object.values(this.assignedPartitionsByTopic)\n      .map(({ topic, partitions }) => ({\n        topic,\n        partitions: partitions.filter(partition => this.isPaused(topic, partition)).sort(),\n      }))\n      .filter(({ partitions }) => partitions.length !== 0)\n  }\n\n  isPaused(topic, partition) {\n    const state = this.subscriptionStatesByTopic[topic]\n\n    if (!state) {\n      return false\n    }\n\n    const partitionResumed = state.resumed.has(partition)\n    const partitionPaused = state.paused.has(partition)\n\n    return (state.pauseAll && !partitionResumed) || partitionPaused\n  }\n}\n"]},"metadata":{},"sourceType":"script"}