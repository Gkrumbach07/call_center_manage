{"ast":null,"code":"const Encoder = require('../../../encoder');\n\nconst {\n  OffsetFetch: apiKey\n} = require('../../apiKeys');\n/**\n * OffsetFetch Request (Version: 1) => group_id [topics]\n *   group_id => STRING\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition\n *       partition => INT32\n */\n\n\nmodule.exports = ({\n  groupId,\n  topics\n}) => ({\n  apiKey,\n  apiVersion: 1,\n  apiName: 'OffsetFetch',\n  encode: async () => {\n    return new Encoder().writeString(groupId).writeArray(topics.map(encodeTopic));\n  }\n});\n\nconst encodeTopic = ({\n  topic,\n  partitions\n}) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition));\n};\n\nconst encodePartition = ({\n  partition\n}) => {\n  return new Encoder().writeInt32(partition);\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/offsetFetch/v1/request.js"],"names":["Encoder","require","OffsetFetch","apiKey","module","exports","groupId","topics","apiVersion","apiName","encode","writeString","writeArray","map","encodeTopic","topic","partitions","encodePartition","partition","writeInt32"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,WAAW,EAAEC;AAAf,IAA0BF,OAAO,CAAC,eAAD,CAAvC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAD,MAA0B;AACzCJ,EAAAA,MADyC;AAEzCK,EAAAA,UAAU,EAAE,CAF6B;AAGzCC,EAAAA,OAAO,EAAE,aAHgC;AAIzCC,EAAAA,MAAM,EAAE,YAAY;AAClB,WAAO,IAAIV,OAAJ,GAAcW,WAAd,CAA0BL,OAA1B,EAAmCM,UAAnC,CAA8CL,MAAM,CAACM,GAAP,CAAWC,WAAX,CAA9C,CAAP;AACD;AANwC,CAA1B,CAAjB;;AASA,MAAMA,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA2B;AAC7C,SAAO,IAAIhB,OAAJ,GAAcW,WAAd,CAA0BI,KAA1B,EAAiCH,UAAjC,CAA4CI,UAAU,CAACH,GAAX,CAAeI,eAAf,CAA5C,CAAP;AACD,CAFD;;AAIA,MAAMA,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AACzC,SAAO,IAAIlB,OAAJ,GAAcmB,UAAd,CAAyBD,SAAzB,CAAP;AACD,CAFD","sourcesContent":["const Encoder = require('../../../encoder')\nconst { OffsetFetch: apiKey } = require('../../apiKeys')\n\n/**\n * OffsetFetch Request (Version: 1) => group_id [topics]\n *   group_id => STRING\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition\n *       partition => INT32\n */\n\nmodule.exports = ({ groupId, topics }) => ({\n  apiKey,\n  apiVersion: 1,\n  apiName: 'OffsetFetch',\n  encode: async () => {\n    return new Encoder().writeString(groupId).writeArray(topics.map(encodeTopic))\n  },\n})\n\nconst encodeTopic = ({ topic, partitions }) => {\n  return new Encoder().writeString(topic).writeArray(partitions.map(encodePartition))\n}\n\nconst encodePartition = ({ partition }) => {\n  return new Encoder().writeInt32(partition)\n}\n"]},"metadata":{},"sourceType":"script"}