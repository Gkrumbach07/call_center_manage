{"ast":null,"code":"/* eslint-disable */\nconst Long = require('../../../utils/long'); // Based on the kafka client 0.10.2 murmur2 implementation\n// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L364\n\n\nconst SEED = Long.fromValue(0x9747b28c); // 'm' and 'r' are mixing constants generated offline.\n// They're not really 'magic', they just happen to work well.\n\nconst M = Long.fromValue(0x5bd1e995);\nconst R = Long.fromValue(24);\n\nmodule.exports = key => {\n  const data = Buffer.isBuffer(key) ? key : Buffer.from(String(key));\n  const length = data.length; // Initialize the hash to a random value\n\n  let h = Long.fromValue(SEED.xor(length));\n  let length4 = Math.floor(length / 4);\n\n  for (let i = 0; i < length4; i++) {\n    const i4 = i * 4;\n    let k = (data[i4 + 0] & 0xff) + ((data[i4 + 1] & 0xff) << 8) + ((data[i4 + 2] & 0xff) << 16) + ((data[i4 + 3] & 0xff) << 24);\n    k = Long.fromValue(k);\n    k = k.multiply(M);\n    k = k.xor(k.toInt() >>> R);\n    k = Long.fromValue(k).multiply(M);\n    h = h.multiply(M);\n    h = h.xor(k);\n  } // Handle the last few bytes of the input array\n\n\n  switch (length % 4) {\n    case 3:\n      h = h.xor((data[(length & ~3) + 2] & 0xff) << 16);\n\n    case 2:\n      h = h.xor((data[(length & ~3) + 1] & 0xff) << 8);\n\n    case 1:\n      h = h.xor(data[length & ~3] & 0xff);\n      h = h.multiply(M);\n  }\n\n  h = h.xor(h.toInt() >>> 13);\n  h = h.multiply(M);\n  h = h.xor(h.toInt() >>> 15);\n  return h.toInt();\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/producer/partitioners/defaultJava/murmur2.js"],"names":["Long","require","SEED","fromValue","M","R","module","exports","key","data","Buffer","isBuffer","from","String","length","h","xor","length4","Math","floor","i","i4","k","multiply","toInt"],"mappings":"AAAA;AACA,MAAMA,IAAI,GAAGC,OAAO,CAAC,qBAAD,CAApB,C,CAEA;AACA;;;AAEA,MAAMC,IAAI,GAAGF,IAAI,CAACG,SAAL,CAAe,UAAf,CAAb,C,CAEA;AACA;;AACA,MAAMC,CAAC,GAAGJ,IAAI,CAACG,SAAL,CAAe,UAAf,CAAV;AACA,MAAME,CAAC,GAAGL,IAAI,CAACG,SAAL,CAAe,EAAf,CAAV;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,GAAG,IAAI;AACtB,QAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBH,GAAhB,IAAuBA,GAAvB,GAA6BE,MAAM,CAACE,IAAP,CAAYC,MAAM,CAACL,GAAD,CAAlB,CAA1C;AACA,QAAMM,MAAM,GAAGL,IAAI,CAACK,MAApB,CAFsB,CAItB;;AACA,MAAIC,CAAC,GAAGf,IAAI,CAACG,SAAL,CAAeD,IAAI,CAACc,GAAL,CAASF,MAAT,CAAf,CAAR;AACA,MAAIG,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,MAAM,GAAG,CAApB,CAAd;;AAEA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAApB,EAA6BG,CAAC,EAA9B,EAAkC;AAChC,UAAMC,EAAE,GAAGD,CAAC,GAAG,CAAf;AACA,QAAIE,CAAC,GACH,CAACb,IAAI,CAACY,EAAE,GAAG,CAAN,CAAJ,GAAe,IAAhB,KACC,CAACZ,IAAI,CAACY,EAAE,GAAG,CAAN,CAAJ,GAAe,IAAhB,KAAyB,CAD1B,KAEC,CAACZ,IAAI,CAACY,EAAE,GAAG,CAAN,CAAJ,GAAe,IAAhB,KAAyB,EAF1B,KAGC,CAACZ,IAAI,CAACY,EAAE,GAAG,CAAN,CAAJ,GAAe,IAAhB,KAAyB,EAH1B,CADF;AAKAC,IAAAA,CAAC,GAAGtB,IAAI,CAACG,SAAL,CAAemB,CAAf,CAAJ;AACAA,IAAAA,CAAC,GAAGA,CAAC,CAACC,QAAF,CAAWnB,CAAX,CAAJ;AACAkB,IAAAA,CAAC,GAAGA,CAAC,CAACN,GAAF,CAAMM,CAAC,CAACE,KAAF,OAAcnB,CAApB,CAAJ;AACAiB,IAAAA,CAAC,GAAGtB,IAAI,CAACG,SAAL,CAAemB,CAAf,EAAkBC,QAAlB,CAA2BnB,CAA3B,CAAJ;AACAW,IAAAA,CAAC,GAAGA,CAAC,CAACQ,QAAF,CAAWnB,CAAX,CAAJ;AACAW,IAAAA,CAAC,GAAGA,CAAC,CAACC,GAAF,CAAMM,CAAN,CAAJ;AACD,GArBqB,CAuBtB;;;AACA,UAAQR,MAAM,GAAG,CAAjB;AACE,SAAK,CAAL;AACEC,MAAAA,CAAC,GAAGA,CAAC,CAACC,GAAF,CAAM,CAACP,IAAI,CAAC,CAACK,MAAM,GAAG,CAAC,CAAX,IAAgB,CAAjB,CAAJ,GAA0B,IAA3B,KAAoC,EAA1C,CAAJ;;AACF,SAAK,CAAL;AACEC,MAAAA,CAAC,GAAGA,CAAC,CAACC,GAAF,CAAM,CAACP,IAAI,CAAC,CAACK,MAAM,GAAG,CAAC,CAAX,IAAgB,CAAjB,CAAJ,GAA0B,IAA3B,KAAoC,CAA1C,CAAJ;;AACF,SAAK,CAAL;AACEC,MAAAA,CAAC,GAAGA,CAAC,CAACC,GAAF,CAAMP,IAAI,CAACK,MAAM,GAAG,CAAC,CAAX,CAAJ,GAAoB,IAA1B,CAAJ;AACAC,MAAAA,CAAC,GAAGA,CAAC,CAACQ,QAAF,CAAWnB,CAAX,CAAJ;AAPJ;;AAUAW,EAAAA,CAAC,GAAGA,CAAC,CAACC,GAAF,CAAMD,CAAC,CAACS,KAAF,OAAc,EAApB,CAAJ;AACAT,EAAAA,CAAC,GAAGA,CAAC,CAACQ,QAAF,CAAWnB,CAAX,CAAJ;AACAW,EAAAA,CAAC,GAAGA,CAAC,CAACC,GAAF,CAAMD,CAAC,CAACS,KAAF,OAAc,EAApB,CAAJ;AAEA,SAAOT,CAAC,CAACS,KAAF,EAAP;AACD,CAvCD","sourcesContent":["/* eslint-disable */\nconst Long = require('../../../utils/long')\n\n// Based on the kafka client 0.10.2 murmur2 implementation\n// https://github.com/apache/kafka/blob/0.10.2/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L364\n\nconst SEED = Long.fromValue(0x9747b28c)\n\n// 'm' and 'r' are mixing constants generated offline.\n// They're not really 'magic', they just happen to work well.\nconst M = Long.fromValue(0x5bd1e995)\nconst R = Long.fromValue(24)\n\nmodule.exports = key => {\n  const data = Buffer.isBuffer(key) ? key : Buffer.from(String(key))\n  const length = data.length\n\n  // Initialize the hash to a random value\n  let h = Long.fromValue(SEED.xor(length))\n  let length4 = Math.floor(length / 4)\n\n  for (let i = 0; i < length4; i++) {\n    const i4 = i * 4\n    let k =\n      (data[i4 + 0] & 0xff) +\n      ((data[i4 + 1] & 0xff) << 8) +\n      ((data[i4 + 2] & 0xff) << 16) +\n      ((data[i4 + 3] & 0xff) << 24)\n    k = Long.fromValue(k)\n    k = k.multiply(M)\n    k = k.xor(k.toInt() >>> R)\n    k = Long.fromValue(k).multiply(M)\n    h = h.multiply(M)\n    h = h.xor(k)\n  }\n\n  // Handle the last few bytes of the input array\n  switch (length % 4) {\n    case 3:\n      h = h.xor((data[(length & ~3) + 2] & 0xff) << 16)\n    case 2:\n      h = h.xor((data[(length & ~3) + 1] & 0xff) << 8)\n    case 1:\n      h = h.xor(data[length & ~3] & 0xff)\n      h = h.multiply(M)\n  }\n\n  h = h.xor(h.toInt() >>> 13)\n  h = h.multiply(M)\n  h = h.xor(h.toInt() >>> 15)\n\n  return h.toInt()\n}\n"]},"metadata":{},"sourceType":"script"}