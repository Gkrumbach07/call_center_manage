{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n\nconst flatten = require('../../../../utils/flatten');\n/**\n * OffsetFetch Response (Version: 1) => [responses]\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition offset metadata error_code\n *       partition => INT32\n *       offset => INT64\n *       metadata => NULLABLE_STRING\n *       error_code => INT16\n */\n\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  return {\n    responses: decoder.readArray(decodeResponses)\n  };\n};\n\nconst decodeResponses = decoder => ({\n  topic: decoder.readString(),\n  partitions: decoder.readArray(decodePartitions)\n});\n\nconst decodePartitions = decoder => ({\n  partition: decoder.readInt32(),\n  offset: decoder.readInt64().toString(),\n  metadata: decoder.readString(),\n  errorCode: decoder.readInt16()\n});\n\nconst parse = async data => {\n  const partitionsWithError = data.responses.map(response => response.partitions.filter(partition => failure(partition.errorCode)));\n  const partitionWithError = flatten(partitionsWithError)[0];\n\n  if (partitionWithError) {\n    throw createErrorFromCode(partitionWithError.errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/offsetFetch/v1/response.js"],"names":["Decoder","require","failure","createErrorFromCode","flatten","decode","rawData","decoder","responses","readArray","decodeResponses","topic","readString","partitions","decodePartitions","partition","readInt32","offset","readInt64","toString","metadata","errorCode","readInt16","parse","data","partitionsWithError","map","response","filter","partitionWithError","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAmCF,OAAO,CAAC,gBAAD,CAAhD;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,2BAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,OAAO,GAAG,IAAIP,OAAJ,CAAYM,OAAZ,CAAhB;AACA,SAAO;AACLE,IAAAA,SAAS,EAAED,OAAO,CAACE,SAAR,CAAkBC,eAAlB;AADN,GAAP;AAGD,CALD;;AAOA,MAAMA,eAAe,GAAGH,OAAO,KAAK;AAClCI,EAAAA,KAAK,EAAEJ,OAAO,CAACK,UAAR,EAD2B;AAElCC,EAAAA,UAAU,EAAEN,OAAO,CAACE,SAAR,CAAkBK,gBAAlB;AAFsB,CAAL,CAA/B;;AAKA,MAAMA,gBAAgB,GAAGP,OAAO,KAAK;AACnCQ,EAAAA,SAAS,EAAER,OAAO,CAACS,SAAR,EADwB;AAEnCC,EAAAA,MAAM,EAAEV,OAAO,CAACW,SAAR,GAAoBC,QAApB,EAF2B;AAGnCC,EAAAA,QAAQ,EAAEb,OAAO,CAACK,UAAR,EAHyB;AAInCS,EAAAA,SAAS,EAAEd,OAAO,CAACe,SAAR;AAJwB,CAAL,CAAhC;;AAOA,MAAMC,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,QAAMC,mBAAmB,GAAGD,IAAI,CAAChB,SAAL,CAAekB,GAAf,CAAmBC,QAAQ,IACrDA,QAAQ,CAACd,UAAT,CAAoBe,MAApB,CAA2Bb,SAAS,IAAIb,OAAO,CAACa,SAAS,CAACM,SAAX,CAA/C,CAD0B,CAA5B;AAGA,QAAMQ,kBAAkB,GAAGzB,OAAO,CAACqB,mBAAD,CAAP,CAA6B,CAA7B,CAA3B;;AACA,MAAII,kBAAJ,EAAwB;AACtB,UAAM1B,mBAAmB,CAAC0B,kBAAkB,CAACR,SAApB,CAAzB;AACD;;AAED,SAAOG,IAAP;AACD,CAVD;;AAYAM,MAAM,CAACC,OAAP,GAAiB;AACf1B,EAAAA,MADe;AAEfkB,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\nconst flatten = require('../../../../utils/flatten')\n\n/**\n * OffsetFetch Response (Version: 1) => [responses]\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition offset metadata error_code\n *       partition => INT32\n *       offset => INT64\n *       metadata => NULLABLE_STRING\n *       error_code => INT16\n */\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  return {\n    responses: decoder.readArray(decodeResponses),\n  }\n}\n\nconst decodeResponses = decoder => ({\n  topic: decoder.readString(),\n  partitions: decoder.readArray(decodePartitions),\n})\n\nconst decodePartitions = decoder => ({\n  partition: decoder.readInt32(),\n  offset: decoder.readInt64().toString(),\n  metadata: decoder.readString(),\n  errorCode: decoder.readInt16(),\n})\n\nconst parse = async data => {\n  const partitionsWithError = data.responses.map(response =>\n    response.partitions.filter(partition => failure(partition.errorCode))\n  )\n  const partitionWithError = flatten(partitionsWithError)[0]\n  if (partitionWithError) {\n    throw createErrorFromCode(partitionWithError.errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}