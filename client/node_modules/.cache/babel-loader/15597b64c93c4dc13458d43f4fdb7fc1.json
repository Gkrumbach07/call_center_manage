{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n/**\n * DescribeConfigs Response (Version: 0) => throttle_time_ms [resources]\n *   throttle_time_ms => INT32\n *   resources => error_code error_message resource_type resource_name [config_entries]\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n *     resource_type => INT8\n *     resource_name => STRING\n *     config_entries => config_name config_value read_only is_default is_sensitive\n *       config_name => STRING\n *       config_value => NULLABLE_STRING\n *       read_only => BOOLEAN\n *       is_default => BOOLEAN\n *       is_sensitive => BOOLEAN\n */\n\n\nconst decodeConfigEntries = decoder => ({\n  configName: decoder.readString(),\n  configValue: decoder.readString(),\n  readOnly: decoder.readBoolean(),\n  isDefault: decoder.readBoolean(),\n  isSensitive: decoder.readBoolean()\n});\n\nconst decodeResources = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  configEntries: decoder.readArray(decodeConfigEntries)\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const resources = decoder.readArray(decodeResources);\n  return {\n    throttleTime,\n    resources\n  };\n};\n\nconst parse = async data => {\n  const resourcesWithError = data.resources.filter(({\n    errorCode\n  }) => failure(errorCode));\n\n  if (resourcesWithError.length > 0) {\n    throw createErrorFromCode(resourcesWithError[0].errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/describeConfigs/v0/response.js"],"names":["Decoder","require","failure","createErrorFromCode","decodeConfigEntries","decoder","configName","readString","configValue","readOnly","readBoolean","isDefault","isSensitive","decodeResources","errorCode","readInt16","errorMessage","resourceType","readInt8","resourceName","configEntries","readArray","decode","rawData","throttleTime","readInt32","resources","parse","data","resourcesWithError","filter","length","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAmCF,OAAO,CAAC,gBAAD,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,mBAAmB,GAAGC,OAAO,KAAK;AACtCC,EAAAA,UAAU,EAAED,OAAO,CAACE,UAAR,EAD0B;AAEtCC,EAAAA,WAAW,EAAEH,OAAO,CAACE,UAAR,EAFyB;AAGtCE,EAAAA,QAAQ,EAAEJ,OAAO,CAACK,WAAR,EAH4B;AAItCC,EAAAA,SAAS,EAAEN,OAAO,CAACK,WAAR,EAJ2B;AAKtCE,EAAAA,WAAW,EAAEP,OAAO,CAACK,WAAR;AALyB,CAAL,CAAnC;;AAQA,MAAMG,eAAe,GAAGR,OAAO,KAAK;AAClCS,EAAAA,SAAS,EAAET,OAAO,CAACU,SAAR,EADuB;AAElCC,EAAAA,YAAY,EAAEX,OAAO,CAACE,UAAR,EAFoB;AAGlCU,EAAAA,YAAY,EAAEZ,OAAO,CAACa,QAAR,EAHoB;AAIlCC,EAAAA,YAAY,EAAEd,OAAO,CAACE,UAAR,EAJoB;AAKlCa,EAAAA,aAAa,EAAEf,OAAO,CAACgB,SAAR,CAAkBjB,mBAAlB;AALmB,CAAL,CAA/B;;AAQA,MAAMkB,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMlB,OAAO,GAAG,IAAIL,OAAJ,CAAYuB,OAAZ,CAAhB;AACA,QAAMC,YAAY,GAAGnB,OAAO,CAACoB,SAAR,EAArB;AACA,QAAMC,SAAS,GAAGrB,OAAO,CAACgB,SAAR,CAAkBR,eAAlB,CAAlB;AAEA,SAAO;AACLW,IAAAA,YADK;AAELE,IAAAA;AAFK,GAAP;AAID,CATD;;AAWA,MAAMC,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,QAAMC,kBAAkB,GAAGD,IAAI,CAACF,SAAL,CAAeI,MAAf,CAAsB,CAAC;AAAEhB,IAAAA;AAAF,GAAD,KAAmBZ,OAAO,CAACY,SAAD,CAAhD,CAA3B;;AACA,MAAIe,kBAAkB,CAACE,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,UAAM5B,mBAAmB,CAAC0B,kBAAkB,CAAC,CAAD,CAAlB,CAAsBf,SAAvB,CAAzB;AACD;;AAED,SAAOc,IAAP;AACD,CAPD;;AASAI,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,MADe;AAEfK,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * DescribeConfigs Response (Version: 0) => throttle_time_ms [resources]\n *   throttle_time_ms => INT32\n *   resources => error_code error_message resource_type resource_name [config_entries]\n *     error_code => INT16\n *     error_message => NULLABLE_STRING\n *     resource_type => INT8\n *     resource_name => STRING\n *     config_entries => config_name config_value read_only is_default is_sensitive\n *       config_name => STRING\n *       config_value => NULLABLE_STRING\n *       read_only => BOOLEAN\n *       is_default => BOOLEAN\n *       is_sensitive => BOOLEAN\n */\n\nconst decodeConfigEntries = decoder => ({\n  configName: decoder.readString(),\n  configValue: decoder.readString(),\n  readOnly: decoder.readBoolean(),\n  isDefault: decoder.readBoolean(),\n  isSensitive: decoder.readBoolean(),\n})\n\nconst decodeResources = decoder => ({\n  errorCode: decoder.readInt16(),\n  errorMessage: decoder.readString(),\n  resourceType: decoder.readInt8(),\n  resourceName: decoder.readString(),\n  configEntries: decoder.readArray(decodeConfigEntries),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const resources = decoder.readArray(decodeResources)\n\n  return {\n    throttleTime,\n    resources,\n  }\n}\n\nconst parse = async data => {\n  const resourcesWithError = data.resources.filter(({ errorCode }) => failure(errorCode))\n  if (resourcesWithError.length > 0) {\n    throw createErrorFromCode(resourcesWithError[0].errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}