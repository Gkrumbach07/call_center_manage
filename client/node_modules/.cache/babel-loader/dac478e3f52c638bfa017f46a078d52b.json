{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  parse: parseV3\n} = require('../v3/response');\n/**\n * Produce Response (Version: 5) => [responses] throttle_time_ms\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition error_code base_offset log_append_time log_start_offset\n *       partition => INT32\n *       error_code => INT16\n *       base_offset => INT64\n *       log_append_time => INT64\n *       log_start_offset => INT64\n *   throttle_time_ms => INT32\n */\n\n\nconst partition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  baseOffset: decoder.readInt64().toString(),\n  logAppendTime: decoder.readInt64().toString(),\n  logStartOffset: decoder.readInt64().toString()\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const topics = decoder.readArray(decoder => ({\n    topicName: decoder.readString(),\n    partitions: decoder.readArray(partition)\n  }));\n  const throttleTime = decoder.readInt32();\n  return {\n    topics,\n    throttleTime\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse: parseV3\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/produce/v5/response.js"],"names":["Decoder","require","parse","parseV3","partition","decoder","readInt32","errorCode","readInt16","baseOffset","readInt64","toString","logAppendTime","logStartOffset","decode","rawData","topics","readArray","topicName","readString","partitions","throttleTime","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,KAAK,EAAEC;AAAT,IAAqBF,OAAO,CAAC,gBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,SAAS,GAAGC,OAAO,KAAK;AAC5BD,EAAAA,SAAS,EAAEC,OAAO,CAACC,SAAR,EADiB;AAE5BC,EAAAA,SAAS,EAAEF,OAAO,CAACG,SAAR,EAFiB;AAG5BC,EAAAA,UAAU,EAAEJ,OAAO,CAACK,SAAR,GAAoBC,QAApB,EAHgB;AAI5BC,EAAAA,aAAa,EAAEP,OAAO,CAACK,SAAR,GAAoBC,QAApB,EAJa;AAK5BE,EAAAA,cAAc,EAAER,OAAO,CAACK,SAAR,GAAoBC,QAApB;AALY,CAAL,CAAzB;;AAQA,MAAMG,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMV,OAAO,GAAG,IAAIL,OAAJ,CAAYe,OAAZ,CAAhB;AACA,QAAMC,MAAM,GAAGX,OAAO,CAACY,SAAR,CAAkBZ,OAAO,KAAK;AAC3Ca,IAAAA,SAAS,EAAEb,OAAO,CAACc,UAAR,EADgC;AAE3CC,IAAAA,UAAU,EAAEf,OAAO,CAACY,SAAR,CAAkBb,SAAlB;AAF+B,GAAL,CAAzB,CAAf;AAKA,QAAMiB,YAAY,GAAGhB,OAAO,CAACC,SAAR,EAArB;AAEA,SAAO;AACLU,IAAAA,MADK;AAELK,IAAAA;AAFK,GAAP;AAID,CAbD;;AAeAC,MAAM,CAACC,OAAP,GAAiB;AACfT,EAAAA,MADe;AAEfZ,EAAAA,KAAK,EAAEC;AAFQ,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV3 } = require('../v3/response')\n\n/**\n * Produce Response (Version: 5) => [responses] throttle_time_ms\n *   responses => topic [partition_responses]\n *     topic => STRING\n *     partition_responses => partition error_code base_offset log_append_time log_start_offset\n *       partition => INT32\n *       error_code => INT16\n *       base_offset => INT64\n *       log_append_time => INT64\n *       log_start_offset => INT64\n *   throttle_time_ms => INT32\n */\n\nconst partition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n  baseOffset: decoder.readInt64().toString(),\n  logAppendTime: decoder.readInt64().toString(),\n  logStartOffset: decoder.readInt64().toString(),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const topics = decoder.readArray(decoder => ({\n    topicName: decoder.readString(),\n    partitions: decoder.readArray(partition),\n  }))\n\n  const throttleTime = decoder.readInt32()\n\n  return {\n    topics,\n    throttleTime,\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV3,\n}\n"]},"metadata":{},"sourceType":"script"}