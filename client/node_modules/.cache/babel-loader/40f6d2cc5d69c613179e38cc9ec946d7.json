{"ast":null,"code":"const Encoder = require('../../../encoder');\n\nconst {\n  CreateTopics: apiKey\n} = require('../../apiKeys');\n/**\n * CreateTopics Request (Version: 0) => [create_topic_requests] timeout\n *   create_topic_requests => topic num_partitions replication_factor [replica_assignment] [config_entries]\n *     topic => STRING\n *     num_partitions => INT32\n *     replication_factor => INT16\n *     replica_assignment => partition [replicas]\n *       partition => INT32\n *       replicas => INT32\n *     config_entries => config_name config_value\n *       config_name => STRING\n *       config_value => NULLABLE_STRING\n *   timeout => INT32\n */\n\n\nmodule.exports = ({\n  topics,\n  timeout = 5000\n}) => ({\n  apiKey,\n  apiVersion: 0,\n  apiName: 'CreateTopics',\n  encode: async () => {\n    return new Encoder().writeArray(topics.map(encodeTopics)).writeInt32(timeout);\n  }\n});\n\nconst encodeTopics = ({\n  topic,\n  numPartitions = 1,\n  replicationFactor = 1,\n  replicaAssignment = [],\n  configEntries = []\n}) => {\n  return new Encoder().writeString(topic).writeInt32(numPartitions).writeInt16(replicationFactor).writeArray(replicaAssignment.map(encodeReplicaAssignment)).writeArray(configEntries.map(encodeConfigEntries));\n};\n\nconst encodeReplicaAssignment = ({\n  partition,\n  replicas\n}) => {\n  return new Encoder().writeInt32(partition).writeArray(replicas);\n};\n\nconst encodeConfigEntries = ({\n  name,\n  value\n}) => {\n  return new Encoder().writeString(name).writeString(value);\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/createTopics/v0/request.js"],"names":["Encoder","require","CreateTopics","apiKey","module","exports","topics","timeout","apiVersion","apiName","encode","writeArray","map","encodeTopics","writeInt32","topic","numPartitions","replicationFactor","replicaAssignment","configEntries","writeString","writeInt16","encodeReplicaAssignment","encodeConfigEntries","partition","replicas","name","value"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,YAAY,EAAEC;AAAhB,IAA2BF,OAAO,CAAC,eAAD,CAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,OAAO,GAAG;AAApB,CAAD,MAAiC;AAChDJ,EAAAA,MADgD;AAEhDK,EAAAA,UAAU,EAAE,CAFoC;AAGhDC,EAAAA,OAAO,EAAE,cAHuC;AAIhDC,EAAAA,MAAM,EAAE,YAAY;AAClB,WAAO,IAAIV,OAAJ,GAAcW,UAAd,CAAyBL,MAAM,CAACM,GAAP,CAAWC,YAAX,CAAzB,EAAmDC,UAAnD,CAA8DP,OAA9D,CAAP;AACD;AAN+C,CAAjC,CAAjB;;AASA,MAAMM,YAAY,GAAG,CAAC;AACpBE,EAAAA,KADoB;AAEpBC,EAAAA,aAAa,GAAG,CAFI;AAGpBC,EAAAA,iBAAiB,GAAG,CAHA;AAIpBC,EAAAA,iBAAiB,GAAG,EAJA;AAKpBC,EAAAA,aAAa,GAAG;AALI,CAAD,KAMf;AACJ,SAAO,IAAInB,OAAJ,GACJoB,WADI,CACQL,KADR,EAEJD,UAFI,CAEOE,aAFP,EAGJK,UAHI,CAGOJ,iBAHP,EAIJN,UAJI,CAIOO,iBAAiB,CAACN,GAAlB,CAAsBU,uBAAtB,CAJP,EAKJX,UALI,CAKOQ,aAAa,CAACP,GAAd,CAAkBW,mBAAlB,CALP,CAAP;AAMD,CAbD;;AAeA,MAAMD,uBAAuB,GAAG,CAAC;AAAEE,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA6B;AAC3D,SAAO,IAAIzB,OAAJ,GAAcc,UAAd,CAAyBU,SAAzB,EAAoCb,UAApC,CAA+Cc,QAA/C,CAAP;AACD,CAFD;;AAIA,MAAMF,mBAAmB,GAAG,CAAC;AAAEG,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAqB;AAC/C,SAAO,IAAI3B,OAAJ,GAAcoB,WAAd,CAA0BM,IAA1B,EAAgCN,WAAhC,CAA4CO,KAA5C,CAAP;AACD,CAFD","sourcesContent":["const Encoder = require('../../../encoder')\nconst { CreateTopics: apiKey } = require('../../apiKeys')\n\n/**\n * CreateTopics Request (Version: 0) => [create_topic_requests] timeout\n *   create_topic_requests => topic num_partitions replication_factor [replica_assignment] [config_entries]\n *     topic => STRING\n *     num_partitions => INT32\n *     replication_factor => INT16\n *     replica_assignment => partition [replicas]\n *       partition => INT32\n *       replicas => INT32\n *     config_entries => config_name config_value\n *       config_name => STRING\n *       config_value => NULLABLE_STRING\n *   timeout => INT32\n */\n\nmodule.exports = ({ topics, timeout = 5000 }) => ({\n  apiKey,\n  apiVersion: 0,\n  apiName: 'CreateTopics',\n  encode: async () => {\n    return new Encoder().writeArray(topics.map(encodeTopics)).writeInt32(timeout)\n  },\n})\n\nconst encodeTopics = ({\n  topic,\n  numPartitions = 1,\n  replicationFactor = 1,\n  replicaAssignment = [],\n  configEntries = [],\n}) => {\n  return new Encoder()\n    .writeString(topic)\n    .writeInt32(numPartitions)\n    .writeInt16(replicationFactor)\n    .writeArray(replicaAssignment.map(encodeReplicaAssignment))\n    .writeArray(configEntries.map(encodeConfigEntries))\n}\n\nconst encodeReplicaAssignment = ({ partition, replicas }) => {\n  return new Encoder().writeInt32(partition).writeArray(replicas)\n}\n\nconst encodeConfigEntries = ({ name, value }) => {\n  return new Encoder().writeString(name).writeString(value)\n}\n"]},"metadata":{},"sourceType":"script"}