{"ast":null,"code":"const ISOLATION_LEVEL = require('../../isolationLevel'); // For normal consumers, use -1\n\n\nconst REPLICA_ID = -1;\nconst versions = {\n  0: ({\n    replicaId = REPLICA_ID,\n    topics\n  }) => {\n    const request = require('./v0/request');\n\n    const response = require('./v0/response');\n\n    return {\n      request: request({\n        replicaId,\n        topics\n      }),\n      response\n    };\n  },\n  1: ({\n    replicaId = REPLICA_ID,\n    topics\n  }) => {\n    const request = require('./v1/request');\n\n    const response = require('./v1/response');\n\n    return {\n      request: request({\n        replicaId,\n        topics\n      }),\n      response\n    };\n  },\n  2: ({\n    replicaId = REPLICA_ID,\n    isolationLevel = ISOLATION_LEVEL.READ_COMMITTED,\n    topics\n  }) => {\n    const request = require('./v2/request');\n\n    const response = require('./v2/response');\n\n    return {\n      request: request({\n        replicaId,\n        isolationLevel,\n        topics\n      }),\n      response\n    };\n  },\n  3: ({\n    replicaId = REPLICA_ID,\n    isolationLevel = ISOLATION_LEVEL.READ_COMMITTED,\n    topics\n  }) => {\n    const request = require('./v3/request');\n\n    const response = require('./v3/response');\n\n    return {\n      request: request({\n        replicaId,\n        isolationLevel,\n        topics\n      }),\n      response\n    };\n  }\n};\nmodule.exports = {\n  versions: Object.keys(versions),\n  protocol: ({\n    version\n  }) => versions[version]\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/listOffsets/index.js"],"names":["ISOLATION_LEVEL","require","REPLICA_ID","versions","replicaId","topics","request","response","isolationLevel","READ_COMMITTED","module","exports","Object","keys","protocol","version"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAC,sBAAD,CAA/B,C,CAEA;;;AACA,MAAMC,UAAU,GAAG,CAAC,CAApB;AAEA,MAAMC,QAAQ,GAAG;AACf,KAAG,CAAC;AAAEC,IAAAA,SAAS,GAAGF,UAAd;AAA0BG,IAAAA;AAA1B,GAAD,KAAwC;AACzC,UAAMC,OAAO,GAAGL,OAAO,CAAC,cAAD,CAAvB;;AACA,UAAMM,QAAQ,GAAGN,OAAO,CAAC,eAAD,CAAxB;;AACA,WAAO;AAAEK,MAAAA,OAAO,EAAEA,OAAO,CAAC;AAAEF,QAAAA,SAAF;AAAaC,QAAAA;AAAb,OAAD,CAAlB;AAA2CE,MAAAA;AAA3C,KAAP;AACD,GALc;AAMf,KAAG,CAAC;AAAEH,IAAAA,SAAS,GAAGF,UAAd;AAA0BG,IAAAA;AAA1B,GAAD,KAAwC;AACzC,UAAMC,OAAO,GAAGL,OAAO,CAAC,cAAD,CAAvB;;AACA,UAAMM,QAAQ,GAAGN,OAAO,CAAC,eAAD,CAAxB;;AACA,WAAO;AAAEK,MAAAA,OAAO,EAAEA,OAAO,CAAC;AAAEF,QAAAA,SAAF;AAAaC,QAAAA;AAAb,OAAD,CAAlB;AAA2CE,MAAAA;AAA3C,KAAP;AACD,GAVc;AAWf,KAAG,CAAC;AAAEH,IAAAA,SAAS,GAAGF,UAAd;AAA0BM,IAAAA,cAAc,GAAGR,eAAe,CAACS,cAA3D;AAA2EJ,IAAAA;AAA3E,GAAD,KAAyF;AAC1F,UAAMC,OAAO,GAAGL,OAAO,CAAC,cAAD,CAAvB;;AACA,UAAMM,QAAQ,GAAGN,OAAO,CAAC,eAAD,CAAxB;;AACA,WAAO;AAAEK,MAAAA,OAAO,EAAEA,OAAO,CAAC;AAAEF,QAAAA,SAAF;AAAaI,QAAAA,cAAb;AAA6BH,QAAAA;AAA7B,OAAD,CAAlB;AAA2DE,MAAAA;AAA3D,KAAP;AACD,GAfc;AAgBf,KAAG,CAAC;AAAEH,IAAAA,SAAS,GAAGF,UAAd;AAA0BM,IAAAA,cAAc,GAAGR,eAAe,CAACS,cAA3D;AAA2EJ,IAAAA;AAA3E,GAAD,KAAyF;AAC1F,UAAMC,OAAO,GAAGL,OAAO,CAAC,cAAD,CAAvB;;AACA,UAAMM,QAAQ,GAAGN,OAAO,CAAC,eAAD,CAAxB;;AACA,WAAO;AAAEK,MAAAA,OAAO,EAAEA,OAAO,CAAC;AAAEF,QAAAA,SAAF;AAAaI,QAAAA,cAAb;AAA6BH,QAAAA;AAA7B,OAAD,CAAlB;AAA2DE,MAAAA;AAA3D,KAAP;AACD;AApBc,CAAjB;AAuBAG,MAAM,CAACC,OAAP,GAAiB;AACfR,EAAAA,QAAQ,EAAES,MAAM,CAACC,IAAP,CAAYV,QAAZ,CADK;AAEfW,EAAAA,QAAQ,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiBZ,QAAQ,CAACY,OAAD;AAFpB,CAAjB","sourcesContent":["const ISOLATION_LEVEL = require('../../isolationLevel')\n\n// For normal consumers, use -1\nconst REPLICA_ID = -1\n\nconst versions = {\n  0: ({ replicaId = REPLICA_ID, topics }) => {\n    const request = require('./v0/request')\n    const response = require('./v0/response')\n    return { request: request({ replicaId, topics }), response }\n  },\n  1: ({ replicaId = REPLICA_ID, topics }) => {\n    const request = require('./v1/request')\n    const response = require('./v1/response')\n    return { request: request({ replicaId, topics }), response }\n  },\n  2: ({ replicaId = REPLICA_ID, isolationLevel = ISOLATION_LEVEL.READ_COMMITTED, topics }) => {\n    const request = require('./v2/request')\n    const response = require('./v2/response')\n    return { request: request({ replicaId, isolationLevel, topics }), response }\n  },\n  3: ({ replicaId = REPLICA_ID, isolationLevel = ISOLATION_LEVEL.READ_COMMITTED, topics }) => {\n    const request = require('./v3/request')\n    const response = require('./v3/response')\n    return { request: request({ replicaId, isolationLevel, topics }), response }\n  },\n}\n\nmodule.exports = {\n  versions: Object.keys(versions),\n  protocol: ({ version }) => versions[version],\n}\n"]},"metadata":{},"sourceType":"script"}