{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  parse: parseV0\n} = require('../v0/response');\n/**\n * Metadata Response (Version: 1) => [brokers] controller_id [topic_metadata]\n *   brokers => node_id host port rack\n *     node_id => INT32\n *     host => STRING\n *     port => INT32\n *     rack => NULLABLE_STRING\n *   controller_id => INT32\n *   topic_metadata => topic_error_code topic is_internal [partition_metadata]\n *     topic_error_code => INT16\n *     topic => STRING\n *     is_internal => BOOLEAN\n *     partition_metadata => partition_error_code partition_id leader [replicas] [isr]\n *       partition_error_code => INT16\n *       partition_id => INT32\n *       leader => INT32\n *       replicas => INT32\n *       isr => INT32\n */\n\n\nconst broker = decoder => ({\n  nodeId: decoder.readInt32(),\n  host: decoder.readString(),\n  port: decoder.readInt32(),\n  rack: decoder.readString()\n});\n\nconst topicMetadata = decoder => ({\n  topicErrorCode: decoder.readInt16(),\n  topic: decoder.readString(),\n  isInternal: decoder.readBoolean(),\n  partitionMetadata: decoder.readArray(partitionMetadata)\n});\n\nconst partitionMetadata = decoder => ({\n  partitionErrorCode: decoder.readInt16(),\n  partitionId: decoder.readInt32(),\n  leader: decoder.readInt32(),\n  replicas: decoder.readArray(d => d.readInt32()),\n  isr: decoder.readArray(d => d.readInt32())\n});\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  return {\n    brokers: decoder.readArray(broker),\n    controllerId: decoder.readInt32(),\n    topicMetadata: decoder.readArray(topicMetadata)\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/metadata/v1/response.js"],"names":["Decoder","require","parse","parseV0","broker","decoder","nodeId","readInt32","host","readString","port","rack","topicMetadata","topicErrorCode","readInt16","topic","isInternal","readBoolean","partitionMetadata","readArray","partitionErrorCode","partitionId","leader","replicas","d","isr","decode","rawData","brokers","controllerId","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,KAAK,EAAEC;AAAT,IAAqBF,OAAO,CAAC,gBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMG,MAAM,GAAGC,OAAO,KAAK;AACzBC,EAAAA,MAAM,EAAED,OAAO,CAACE,SAAR,EADiB;AAEzBC,EAAAA,IAAI,EAAEH,OAAO,CAACI,UAAR,EAFmB;AAGzBC,EAAAA,IAAI,EAAEL,OAAO,CAACE,SAAR,EAHmB;AAIzBI,EAAAA,IAAI,EAAEN,OAAO,CAACI,UAAR;AAJmB,CAAL,CAAtB;;AAOA,MAAMG,aAAa,GAAGP,OAAO,KAAK;AAChCQ,EAAAA,cAAc,EAAER,OAAO,CAACS,SAAR,EADgB;AAEhCC,EAAAA,KAAK,EAAEV,OAAO,CAACI,UAAR,EAFyB;AAGhCO,EAAAA,UAAU,EAAEX,OAAO,CAACY,WAAR,EAHoB;AAIhCC,EAAAA,iBAAiB,EAAEb,OAAO,CAACc,SAAR,CAAkBD,iBAAlB;AAJa,CAAL,CAA7B;;AAOA,MAAMA,iBAAiB,GAAGb,OAAO,KAAK;AACpCe,EAAAA,kBAAkB,EAAEf,OAAO,CAACS,SAAR,EADgB;AAEpCO,EAAAA,WAAW,EAAEhB,OAAO,CAACE,SAAR,EAFuB;AAGpCe,EAAAA,MAAM,EAAEjB,OAAO,CAACE,SAAR,EAH4B;AAIpCgB,EAAAA,QAAQ,EAAElB,OAAO,CAACc,SAAR,CAAkBK,CAAC,IAAIA,CAAC,CAACjB,SAAF,EAAvB,CAJ0B;AAKpCkB,EAAAA,GAAG,EAAEpB,OAAO,CAACc,SAAR,CAAkBK,CAAC,IAAIA,CAAC,CAACjB,SAAF,EAAvB;AAL+B,CAAL,CAAjC;;AAQA,MAAMmB,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMtB,OAAO,GAAG,IAAIL,OAAJ,CAAY2B,OAAZ,CAAhB;AACA,SAAO;AACLC,IAAAA,OAAO,EAAEvB,OAAO,CAACc,SAAR,CAAkBf,MAAlB,CADJ;AAELyB,IAAAA,YAAY,EAAExB,OAAO,CAACE,SAAR,EAFT;AAGLK,IAAAA,aAAa,EAAEP,OAAO,CAACc,SAAR,CAAkBP,aAAlB;AAHV,GAAP;AAKD,CAPD;;AASAkB,MAAM,CAACC,OAAP,GAAiB;AACfL,EAAAA,MADe;AAEfxB,EAAAA,KAAK,EAAEC;AAFQ,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { parse: parseV0 } = require('../v0/response')\n\n/**\n * Metadata Response (Version: 1) => [brokers] controller_id [topic_metadata]\n *   brokers => node_id host port rack\n *     node_id => INT32\n *     host => STRING\n *     port => INT32\n *     rack => NULLABLE_STRING\n *   controller_id => INT32\n *   topic_metadata => topic_error_code topic is_internal [partition_metadata]\n *     topic_error_code => INT16\n *     topic => STRING\n *     is_internal => BOOLEAN\n *     partition_metadata => partition_error_code partition_id leader [replicas] [isr]\n *       partition_error_code => INT16\n *       partition_id => INT32\n *       leader => INT32\n *       replicas => INT32\n *       isr => INT32\n */\n\nconst broker = decoder => ({\n  nodeId: decoder.readInt32(),\n  host: decoder.readString(),\n  port: decoder.readInt32(),\n  rack: decoder.readString(),\n})\n\nconst topicMetadata = decoder => ({\n  topicErrorCode: decoder.readInt16(),\n  topic: decoder.readString(),\n  isInternal: decoder.readBoolean(),\n  partitionMetadata: decoder.readArray(partitionMetadata),\n})\n\nconst partitionMetadata = decoder => ({\n  partitionErrorCode: decoder.readInt16(),\n  partitionId: decoder.readInt32(),\n  leader: decoder.readInt32(),\n  replicas: decoder.readArray(d => d.readInt32()),\n  isr: decoder.readArray(d => d.readInt32()),\n})\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  return {\n    brokers: decoder.readArray(broker),\n    controllerId: decoder.readInt32(),\n    topicMetadata: decoder.readArray(topicMetadata),\n  }\n}\n\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"]},"metadata":{},"sourceType":"script"}