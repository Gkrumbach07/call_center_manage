{"ast":null,"code":"const sleep = require('./sleep');\n\nconst {\n  KafkaJSTimeout\n} = require('../errors');\n\nmodule.exports = (fn, {\n  delay = 50,\n  maxWait = 10000,\n  timeoutMessage = 'Timeout',\n  ignoreTimeout = false\n} = {}) => {\n  let timeoutId;\n  let totalWait = 0;\n  let fulfilled = false;\n\n  const checkCondition = async (resolve, reject) => {\n    totalWait += delay;\n    await sleep(delay);\n\n    try {\n      const result = await fn(totalWait);\n\n      if (result) {\n        fulfilled = true;\n        clearTimeout(timeoutId);\n        return resolve(result);\n      }\n\n      checkCondition(resolve, reject);\n    } catch (e) {\n      fulfilled = true;\n      clearTimeout(timeoutId);\n      reject(e);\n    }\n  };\n\n  return new Promise((resolve, reject) => {\n    checkCondition(resolve, reject);\n\n    if (ignoreTimeout) {\n      return;\n    }\n\n    timeoutId = setTimeout(() => {\n      if (!fulfilled) {\n        return reject(new KafkaJSTimeout(timeoutMessage));\n      }\n    }, maxWait);\n  });\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/utils/waitFor.js"],"names":["sleep","require","KafkaJSTimeout","module","exports","fn","delay","maxWait","timeoutMessage","ignoreTimeout","timeoutId","totalWait","fulfilled","checkCondition","resolve","reject","result","clearTimeout","e","Promise","setTimeout"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,SAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAqBD,OAAO,CAAC,WAAD,CAAlC;;AAEAE,MAAM,CAACC,OAAP,GAAiB,CACfC,EADe,EAEf;AAAEC,EAAAA,KAAK,GAAG,EAAV;AAAcC,EAAAA,OAAO,GAAG,KAAxB;AAA+BC,EAAAA,cAAc,GAAG,SAAhD;AAA2DC,EAAAA,aAAa,GAAG;AAA3E,IAAqF,EAFtE,KAGZ;AACH,MAAIC,SAAJ;AACA,MAAIC,SAAS,GAAG,CAAhB;AACA,MAAIC,SAAS,GAAG,KAAhB;;AAEA,QAAMC,cAAc,GAAG,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAChDJ,IAAAA,SAAS,IAAIL,KAAb;AACA,UAAMN,KAAK,CAACM,KAAD,CAAX;;AAEA,QAAI;AACF,YAAMU,MAAM,GAAG,MAAMX,EAAE,CAACM,SAAD,CAAvB;;AACA,UAAIK,MAAJ,EAAY;AACVJ,QAAAA,SAAS,GAAG,IAAZ;AACAK,QAAAA,YAAY,CAACP,SAAD,CAAZ;AACA,eAAOI,OAAO,CAACE,MAAD,CAAd;AACD;;AAEDH,MAAAA,cAAc,CAACC,OAAD,EAAUC,MAAV,CAAd;AACD,KATD,CASE,OAAOG,CAAP,EAAU;AACVN,MAAAA,SAAS,GAAG,IAAZ;AACAK,MAAAA,YAAY,CAACP,SAAD,CAAZ;AACAK,MAAAA,MAAM,CAACG,CAAD,CAAN;AACD;AACF,GAlBD;;AAoBA,SAAO,IAAIC,OAAJ,CAAY,CAACL,OAAD,EAAUC,MAAV,KAAqB;AACtCF,IAAAA,cAAc,CAACC,OAAD,EAAUC,MAAV,CAAd;;AAEA,QAAIN,aAAJ,EAAmB;AACjB;AACD;;AAEDC,IAAAA,SAAS,GAAGU,UAAU,CAAC,MAAM;AAC3B,UAAI,CAACR,SAAL,EAAgB;AACd,eAAOG,MAAM,CAAC,IAAIb,cAAJ,CAAmBM,cAAnB,CAAD,CAAb;AACD;AACF,KAJqB,EAInBD,OAJmB,CAAtB;AAKD,GAZM,CAAP;AAaD,CAzCD","sourcesContent":["const sleep = require('./sleep')\nconst { KafkaJSTimeout } = require('../errors')\n\nmodule.exports = (\n  fn,\n  { delay = 50, maxWait = 10000, timeoutMessage = 'Timeout', ignoreTimeout = false } = {}\n) => {\n  let timeoutId\n  let totalWait = 0\n  let fulfilled = false\n\n  const checkCondition = async (resolve, reject) => {\n    totalWait += delay\n    await sleep(delay)\n\n    try {\n      const result = await fn(totalWait)\n      if (result) {\n        fulfilled = true\n        clearTimeout(timeoutId)\n        return resolve(result)\n      }\n\n      checkCondition(resolve, reject)\n    } catch (e) {\n      fulfilled = true\n      clearTimeout(timeoutId)\n      reject(e)\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    checkCondition(resolve, reject)\n\n    if (ignoreTimeout) {\n      return\n    }\n\n    timeoutId = setTimeout(() => {\n      if (!fulfilled) {\n        return reject(new KafkaJSTimeout(timeoutMessage))\n      }\n    }, maxWait)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}