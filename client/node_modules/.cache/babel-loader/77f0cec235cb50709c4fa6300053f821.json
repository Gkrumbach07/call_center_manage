{"ast":null,"code":"/**\n * http://www.ietf.org/rfc/rfc2595.txt\n *\n * The mechanism consists of a single message from the client to the\n * server.  The client sends the authorization identity (identity to\n * login as), followed by a US-ASCII NUL character, followed by the\n * authentication identity (identity whose password will be used),\n * followed by a US-ASCII NUL character, followed by the clear-text\n * password.  The client may leave the authorization identity empty to\n * indicate that it is the same as the authentication identity.\n *\n * The server will verify the authentication identity and password with\n * the system authentication database and verify that the authentication\n * credentials permit the client to login as the authorization identity.\n * If both steps succeed, the user is logged in.\n */\nconst Encoder = require('../../encoder');\n\nconst US_ASCII_NULL_CHAR = '\\u0000';\n\nmodule.exports = ({\n  authorizationIdentity = null,\n  username,\n  password\n}) => ({\n  encode: async () => {\n    return new Encoder().writeBytes([authorizationIdentity, username, password].join(US_ASCII_NULL_CHAR));\n  }\n});","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/sasl/plain/request.js"],"names":["Encoder","require","US_ASCII_NULL_CHAR","module","exports","authorizationIdentity","username","password","encode","writeBytes","join"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,OAAO,GAAGC,OAAO,CAAC,eAAD,CAAvB;;AAEA,MAAMC,kBAAkB,GAAG,QAA3B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAAC;AAAEC,EAAAA,qBAAqB,GAAG,IAA1B;AAAgCC,EAAAA,QAAhC;AAA0CC,EAAAA;AAA1C,CAAD,MAA2D;AAC1EC,EAAAA,MAAM,EAAE,YAAY;AAClB,WAAO,IAAIR,OAAJ,GAAcS,UAAd,CACL,CAACJ,qBAAD,EAAwBC,QAAxB,EAAkCC,QAAlC,EAA4CG,IAA5C,CAAiDR,kBAAjD,CADK,CAAP;AAGD;AALyE,CAA3D,CAAjB","sourcesContent":["/**\n * http://www.ietf.org/rfc/rfc2595.txt\n *\n * The mechanism consists of a single message from the client to the\n * server.  The client sends the authorization identity (identity to\n * login as), followed by a US-ASCII NUL character, followed by the\n * authentication identity (identity whose password will be used),\n * followed by a US-ASCII NUL character, followed by the clear-text\n * password.  The client may leave the authorization identity empty to\n * indicate that it is the same as the authentication identity.\n *\n * The server will verify the authentication identity and password with\n * the system authentication database and verify that the authentication\n * credentials permit the client to login as the authorization identity.\n * If both steps succeed, the user is logged in.\n */\n\nconst Encoder = require('../../encoder')\n\nconst US_ASCII_NULL_CHAR = '\\u0000'\n\nmodule.exports = ({ authorizationIdentity = null, username, password }) => ({\n  encode: async () => {\n    return new Encoder().writeBytes(\n      [authorizationIdentity, username, password].join(US_ASCII_NULL_CHAR)\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"script"}