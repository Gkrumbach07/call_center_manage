{"ast":null,"code":"const Connection = require('../network/connection');\n\nconst {\n  KafkaJSConnectionError,\n  KafkaJSNonRetriableError\n} = require('../errors');\n\nmodule.exports = ({\n  socketFactory,\n  brokers,\n  ssl,\n  sasl,\n  clientId,\n  requestTimeout,\n  enforceRequestTimeout,\n  connectionTimeout,\n  maxInFlightRequests,\n  retry,\n  logger,\n  instrumentationEmitter = null\n}) => {\n  let index = 0;\n\n  const getBrokers = async () => {\n    if (!brokers) {\n      throw new KafkaJSNonRetriableError(`Failed to connect: brokers parameter should not be null`);\n    } // static list\n\n\n    if (Array.isArray(brokers)) {\n      if (!brokers.length) {\n        throw new KafkaJSNonRetriableError(`Failed to connect: brokers array is empty`);\n      }\n\n      return brokers;\n    } // dynamic brokers\n\n\n    let list;\n\n    try {\n      list = await brokers();\n    } catch (e) {\n      const wrappedError = new KafkaJSConnectionError(`Failed to connect: \"config.brokers\" threw: ${e.message}`);\n      wrappedError.stack = `${wrappedError.name}\\n  Caused by: ${e.stack}`;\n      throw wrappedError;\n    }\n\n    if (!list || list.length === 0) {\n      throw new KafkaJSConnectionError(`Failed to connect: \"config.brokers\" returned void or empty array`);\n    }\n\n    return list;\n  };\n\n  return {\n    build: async ({\n      host,\n      port,\n      rack\n    } = {}) => {\n      if (!host) {\n        const list = await getBrokers();\n        const randomBroker = list[index++ % list.length];\n        host = randomBroker.split(':')[0];\n        port = Number(randomBroker.split(':')[1]);\n      }\n\n      return new Connection({\n        host,\n        port,\n        rack,\n        sasl,\n        ssl,\n        clientId,\n        socketFactory,\n        connectionTimeout,\n        requestTimeout,\n        enforceRequestTimeout,\n        maxInFlightRequests,\n        instrumentationEmitter,\n        retry,\n        logger\n      });\n    }\n  };\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/cluster/connectionBuilder.js"],"names":["Connection","require","KafkaJSConnectionError","KafkaJSNonRetriableError","module","exports","socketFactory","brokers","ssl","sasl","clientId","requestTimeout","enforceRequestTimeout","connectionTimeout","maxInFlightRequests","retry","logger","instrumentationEmitter","index","getBrokers","Array","isArray","length","list","e","wrappedError","message","stack","name","build","host","port","rack","randomBroker","split","Number"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,uBAAD,CAA1B;;AACA,MAAM;AAAEC,EAAAA,sBAAF;AAA0BC,EAAAA;AAA1B,IAAuDF,OAAO,CAAC,WAAD,CAApE;;AAEAG,MAAM,CAACC,OAAP,GAAiB,CAAC;AAChBC,EAAAA,aADgB;AAEhBC,EAAAA,OAFgB;AAGhBC,EAAAA,GAHgB;AAIhBC,EAAAA,IAJgB;AAKhBC,EAAAA,QALgB;AAMhBC,EAAAA,cANgB;AAOhBC,EAAAA,qBAPgB;AAQhBC,EAAAA,iBARgB;AAShBC,EAAAA,mBATgB;AAUhBC,EAAAA,KAVgB;AAWhBC,EAAAA,MAXgB;AAYhBC,EAAAA,sBAAsB,GAAG;AAZT,CAAD,KAaX;AACJ,MAAIC,KAAK,GAAG,CAAZ;;AAEA,QAAMC,UAAU,GAAG,YAAY;AAC7B,QAAI,CAACZ,OAAL,EAAc;AACZ,YAAM,IAAIJ,wBAAJ,CAA8B,yDAA9B,CAAN;AACD,KAH4B,CAK7B;;;AACA,QAAIiB,KAAK,CAACC,OAAN,CAAcd,OAAd,CAAJ,EAA4B;AAC1B,UAAI,CAACA,OAAO,CAACe,MAAb,EAAqB;AACnB,cAAM,IAAInB,wBAAJ,CAA8B,2CAA9B,CAAN;AACD;;AACD,aAAOI,OAAP;AACD,KAX4B,CAa7B;;;AACA,QAAIgB,IAAJ;;AACA,QAAI;AACFA,MAAAA,IAAI,GAAG,MAAMhB,OAAO,EAApB;AACD,KAFD,CAEE,OAAOiB,CAAP,EAAU;AACV,YAAMC,YAAY,GAAG,IAAIvB,sBAAJ,CAClB,8CAA6CsB,CAAC,CAACE,OAAQ,EADrC,CAArB;AAGAD,MAAAA,YAAY,CAACE,KAAb,GAAsB,GAAEF,YAAY,CAACG,IAAK,kBAAiBJ,CAAC,CAACG,KAAM,EAAnE;AACA,YAAMF,YAAN;AACD;;AAED,QAAI,CAACF,IAAD,IAASA,IAAI,CAACD,MAAL,KAAgB,CAA7B,EAAgC;AAC9B,YAAM,IAAIpB,sBAAJ,CACH,kEADG,CAAN;AAGD;;AACD,WAAOqB,IAAP;AACD,GA/BD;;AAiCA,SAAO;AACLM,IAAAA,KAAK,EAAE,OAAO;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA;AAAd,QAAuB,EAA9B,KAAqC;AAC1C,UAAI,CAACF,IAAL,EAAW;AACT,cAAMP,IAAI,GAAG,MAAMJ,UAAU,EAA7B;AAEA,cAAMc,YAAY,GAAGV,IAAI,CAACL,KAAK,KAAKK,IAAI,CAACD,MAAhB,CAAzB;AAEAQ,QAAAA,IAAI,GAAGG,YAAY,CAACC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAP;AACAH,QAAAA,IAAI,GAAGI,MAAM,CAACF,YAAY,CAACC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAD,CAAb;AACD;;AAED,aAAO,IAAIlC,UAAJ,CAAe;AACpB8B,QAAAA,IADoB;AAEpBC,QAAAA,IAFoB;AAGpBC,QAAAA,IAHoB;AAIpBvB,QAAAA,IAJoB;AAKpBD,QAAAA,GALoB;AAMpBE,QAAAA,QANoB;AAOpBJ,QAAAA,aAPoB;AAQpBO,QAAAA,iBARoB;AASpBF,QAAAA,cAToB;AAUpBC,QAAAA,qBAVoB;AAWpBE,QAAAA,mBAXoB;AAYpBG,QAAAA,sBAZoB;AAapBF,QAAAA,KAboB;AAcpBC,QAAAA;AAdoB,OAAf,CAAP;AAgBD;AA3BI,GAAP;AA6BD,CA9ED","sourcesContent":["const Connection = require('../network/connection')\nconst { KafkaJSConnectionError, KafkaJSNonRetriableError } = require('../errors')\n\nmodule.exports = ({\n  socketFactory,\n  brokers,\n  ssl,\n  sasl,\n  clientId,\n  requestTimeout,\n  enforceRequestTimeout,\n  connectionTimeout,\n  maxInFlightRequests,\n  retry,\n  logger,\n  instrumentationEmitter = null,\n}) => {\n  let index = 0\n\n  const getBrokers = async () => {\n    if (!brokers) {\n      throw new KafkaJSNonRetriableError(`Failed to connect: brokers parameter should not be null`)\n    }\n\n    // static list\n    if (Array.isArray(brokers)) {\n      if (!brokers.length) {\n        throw new KafkaJSNonRetriableError(`Failed to connect: brokers array is empty`)\n      }\n      return brokers\n    }\n\n    // dynamic brokers\n    let list\n    try {\n      list = await brokers()\n    } catch (e) {\n      const wrappedError = new KafkaJSConnectionError(\n        `Failed to connect: \"config.brokers\" threw: ${e.message}`\n      )\n      wrappedError.stack = `${wrappedError.name}\\n  Caused by: ${e.stack}`\n      throw wrappedError\n    }\n\n    if (!list || list.length === 0) {\n      throw new KafkaJSConnectionError(\n        `Failed to connect: \"config.brokers\" returned void or empty array`\n      )\n    }\n    return list\n  }\n\n  return {\n    build: async ({ host, port, rack } = {}) => {\n      if (!host) {\n        const list = await getBrokers()\n\n        const randomBroker = list[index++ % list.length]\n\n        host = randomBroker.split(':')[0]\n        port = Number(randomBroker.split(':')[1])\n      }\n\n      return new Connection({\n        host,\n        port,\n        rack,\n        sasl,\n        ssl,\n        clientId,\n        socketFactory,\n        connectionTimeout,\n        requestTimeout,\n        enforceRequestTimeout,\n        maxInFlightRequests,\n        instrumentationEmitter,\n        retry,\n        logger,\n      })\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"script"}