{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst Encoder = require('../../../encoder');\n\nconst {\n  failure,\n  createErrorFromCode,\n  failIfVersionNotSupported,\n  errorCodes\n} = require('../../../error');\n\nconst {\n  KafkaJSProtocolError\n} = require('../../../../errors');\n\nconst SASL_AUTHENTICATION_FAILED = 58;\nconst protocolAuthError = errorCodes.find(e => e.code === SASL_AUTHENTICATION_FAILED);\n/**\n * SaslAuthenticate Response (Version: 0) => error_code error_message sasl_auth_bytes\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   sasl_auth_bytes => BYTES\n */\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const errorCode = decoder.readInt16();\n  failIfVersionNotSupported(errorCode);\n  const errorMessage = decoder.readString(); // This is necessary to make the response compatible with the original\n  // mechanism protocols. They expect a byte response, which starts with\n  // the size\n\n  const authBytesEncoder = new Encoder().writeBytes(decoder.readBytes());\n  const authBytes = authBytesEncoder.buffer;\n  return {\n    errorCode,\n    errorMessage,\n    authBytes\n  };\n};\n\nconst parse = async data => {\n  if (data.errorCode === SASL_AUTHENTICATION_FAILED && data.errorMessage) {\n    throw new KafkaJSProtocolError({ ...protocolAuthError,\n      message: data.errorMessage\n    });\n  }\n\n  if (failure(data.errorCode)) {\n    throw createErrorFromCode(data.errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/saslAuthenticate/v0/response.js"],"names":["Decoder","require","Encoder","failure","createErrorFromCode","failIfVersionNotSupported","errorCodes","KafkaJSProtocolError","SASL_AUTHENTICATION_FAILED","protocolAuthError","find","e","code","decode","rawData","decoder","errorCode","readInt16","errorMessage","readString","authBytesEncoder","writeBytes","readBytes","authBytes","buffer","parse","data","message","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AACJE,EAAAA,OADI;AAEJC,EAAAA,mBAFI;AAGJC,EAAAA,yBAHI;AAIJC,EAAAA;AAJI,IAKFL,OAAO,CAAC,gBAAD,CALX;;AAOA,MAAM;AAAEM,EAAAA;AAAF,IAA2BN,OAAO,CAAC,oBAAD,CAAxC;;AACA,MAAMO,0BAA0B,GAAG,EAAnC;AACA,MAAMC,iBAAiB,GAAGH,UAAU,CAACI,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACC,IAAF,KAAWJ,0BAAhC,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMK,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,OAAO,GAAG,IAAIf,OAAJ,CAAYc,OAAZ,CAAhB;AACA,QAAME,SAAS,GAAGD,OAAO,CAACE,SAAR,EAAlB;AAEAZ,EAAAA,yBAAyB,CAACW,SAAD,CAAzB;AACA,QAAME,YAAY,GAAGH,OAAO,CAACI,UAAR,EAArB,CAL8B,CAO9B;AACA;AACA;;AACA,QAAMC,gBAAgB,GAAG,IAAIlB,OAAJ,GAAcmB,UAAd,CAAyBN,OAAO,CAACO,SAAR,EAAzB,CAAzB;AACA,QAAMC,SAAS,GAAGH,gBAAgB,CAACI,MAAnC;AAEA,SAAO;AACLR,IAAAA,SADK;AAELE,IAAAA,YAFK;AAGLK,IAAAA;AAHK,GAAP;AAKD,CAlBD;;AAoBA,MAAME,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,MAAIA,IAAI,CAACV,SAAL,KAAmBR,0BAAnB,IAAiDkB,IAAI,CAACR,YAA1D,EAAwE;AACtE,UAAM,IAAIX,oBAAJ,CAAyB,EAC7B,GAAGE,iBAD0B;AAE7BkB,MAAAA,OAAO,EAAED,IAAI,CAACR;AAFe,KAAzB,CAAN;AAID;;AAED,MAAIf,OAAO,CAACuB,IAAI,CAACV,SAAN,CAAX,EAA6B;AAC3B,UAAMZ,mBAAmB,CAACsB,IAAI,CAACV,SAAN,CAAzB;AACD;;AAED,SAAOU,IAAP;AACD,CAbD;;AAeAE,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,MADe;AAEfY,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst Encoder = require('../../../encoder')\nconst {\n  failure,\n  createErrorFromCode,\n  failIfVersionNotSupported,\n  errorCodes,\n} = require('../../../error')\n\nconst { KafkaJSProtocolError } = require('../../../../errors')\nconst SASL_AUTHENTICATION_FAILED = 58\nconst protocolAuthError = errorCodes.find(e => e.code === SASL_AUTHENTICATION_FAILED)\n\n/**\n * SaslAuthenticate Response (Version: 0) => error_code error_message sasl_auth_bytes\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   sasl_auth_bytes => BYTES\n */\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const errorCode = decoder.readInt16()\n\n  failIfVersionNotSupported(errorCode)\n  const errorMessage = decoder.readString()\n\n  // This is necessary to make the response compatible with the original\n  // mechanism protocols. They expect a byte response, which starts with\n  // the size\n  const authBytesEncoder = new Encoder().writeBytes(decoder.readBytes())\n  const authBytes = authBytesEncoder.buffer\n\n  return {\n    errorCode,\n    errorMessage,\n    authBytes,\n  }\n}\n\nconst parse = async data => {\n  if (data.errorCode === SASL_AUTHENTICATION_FAILED && data.errorMessage) {\n    throw new KafkaJSProtocolError({\n      ...protocolAuthError,\n      message: data.errorMessage,\n    })\n  }\n\n  if (failure(data.errorCode)) {\n    throw createErrorFromCode(data.errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}