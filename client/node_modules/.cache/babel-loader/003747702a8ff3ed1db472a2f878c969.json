{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst Encoder = require('../../../encoder');\n\nconst {\n  parse: parseV0\n} = require('../v0/response');\n\nconst {\n  failIfVersionNotSupported\n} = require('../../../error');\n/**\n * SaslAuthenticate Response (Version: 1) => error_code error_message sasl_auth_bytes\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   sasl_auth_bytes => BYTES\n *   session_lifetime_ms => INT64\n */\n\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const errorCode = decoder.readInt16();\n  failIfVersionNotSupported(errorCode);\n  const errorMessage = decoder.readString(); // This is necessary to make the response compatible with the original\n  // mechanism protocols. They expect a byte response, which starts with\n  // the size\n\n  const authBytesEncoder = new Encoder().writeBytes(decoder.readBytes());\n  const authBytes = authBytesEncoder.buffer;\n  const sessionLifetimeMs = decoder.readInt64().toString();\n  return {\n    errorCode,\n    errorMessage,\n    authBytes,\n    sessionLifetimeMs\n  };\n};\n\nmodule.exports = {\n  decode,\n  parse: parseV0\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/saslAuthenticate/v1/response.js"],"names":["Decoder","require","Encoder","parse","parseV0","failIfVersionNotSupported","decode","rawData","decoder","errorCode","readInt16","errorMessage","readString","authBytesEncoder","writeBytes","readBytes","authBytes","buffer","sessionLifetimeMs","readInt64","toString","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEE,EAAAA,KAAK,EAAEC;AAAT,IAAqBH,OAAO,CAAC,gBAAD,CAAlC;;AACA,MAAM;AAAEI,EAAAA;AAAF,IAAgCJ,OAAO,CAAC,gBAAD,CAA7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMK,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,OAAO,GAAG,IAAIR,OAAJ,CAAYO,OAAZ,CAAhB;AACA,QAAME,SAAS,GAAGD,OAAO,CAACE,SAAR,EAAlB;AAEAL,EAAAA,yBAAyB,CAACI,SAAD,CAAzB;AACA,QAAME,YAAY,GAAGH,OAAO,CAACI,UAAR,EAArB,CAL8B,CAO9B;AACA;AACA;;AACA,QAAMC,gBAAgB,GAAG,IAAIX,OAAJ,GAAcY,UAAd,CAAyBN,OAAO,CAACO,SAAR,EAAzB,CAAzB;AACA,QAAMC,SAAS,GAAGH,gBAAgB,CAACI,MAAnC;AACA,QAAMC,iBAAiB,GAAGV,OAAO,CAACW,SAAR,GAAoBC,QAApB,EAA1B;AAEA,SAAO;AACLX,IAAAA,SADK;AAELE,IAAAA,YAFK;AAGLK,IAAAA,SAHK;AAILE,IAAAA;AAJK,GAAP;AAMD,CApBD;;AAqBAG,MAAM,CAACC,OAAP,GAAiB;AACfhB,EAAAA,MADe;AAEfH,EAAAA,KAAK,EAAEC;AAFQ,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst Encoder = require('../../../encoder')\nconst { parse: parseV0 } = require('../v0/response')\nconst { failIfVersionNotSupported } = require('../../../error')\n\n/**\n * SaslAuthenticate Response (Version: 1) => error_code error_message sasl_auth_bytes\n *   error_code => INT16\n *   error_message => NULLABLE_STRING\n *   sasl_auth_bytes => BYTES\n *   session_lifetime_ms => INT64\n */\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const errorCode = decoder.readInt16()\n\n  failIfVersionNotSupported(errorCode)\n  const errorMessage = decoder.readString()\n\n  // This is necessary to make the response compatible with the original\n  // mechanism protocols. They expect a byte response, which starts with\n  // the size\n  const authBytesEncoder = new Encoder().writeBytes(decoder.readBytes())\n  const authBytes = authBytesEncoder.buffer\n  const sessionLifetimeMs = decoder.readInt64().toString()\n\n  return {\n    errorCode,\n    errorMessage,\n    authBytes,\n    sessionLifetimeMs,\n  }\n}\nmodule.exports = {\n  decode,\n  parse: parseV0,\n}\n"]},"metadata":{},"sourceType":"script"}