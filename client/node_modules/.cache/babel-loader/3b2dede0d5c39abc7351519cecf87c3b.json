{"ast":null,"code":"const Decoder = require('../../../decoder');\n\nconst {\n  failure,\n  createErrorFromCode\n} = require('../../../error');\n/**\n * TxnOffsetCommit Response (Version: 0) => throttle_time_ms [topics]\n *   throttle_time_ms => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition error_code\n *       partition => INT32\n *       error_code => INT16\n */\n\n\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData);\n  const throttleTime = decoder.readInt32();\n  const topics = await decoder.readArrayAsync(decodeTopic);\n  return {\n    throttleTime,\n    topics\n  };\n};\n\nconst decodeTopic = async decoder => ({\n  topic: decoder.readString(),\n  partitions: await decoder.readArrayAsync(decodePartition)\n});\n\nconst decodePartition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16()\n});\n\nconst parse = async data => {\n  const topicsWithErrors = data.topics.map(({\n    partitions\n  }) => ({\n    partitionsWithErrors: partitions.filter(({\n      errorCode\n    }) => failure(errorCode))\n  })).filter(({\n    partitionsWithErrors\n  }) => partitionsWithErrors.length);\n\n  if (topicsWithErrors.length > 0) {\n    throw createErrorFromCode(topicsWithErrors[0].partitionsWithErrors[0].errorCode);\n  }\n\n  return data;\n};\n\nmodule.exports = {\n  decode,\n  parse\n};","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/node_modules/kafkajs/src/protocol/requests/txnOffsetCommit/v0/response.js"],"names":["Decoder","require","failure","createErrorFromCode","decode","rawData","decoder","throttleTime","readInt32","topics","readArrayAsync","decodeTopic","topic","readString","partitions","decodePartition","partition","errorCode","readInt16","parse","data","topicsWithErrors","map","partitionsWithErrors","filter","length","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAmCF,OAAO,CAAC,gBAAD,CAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,MAAM,GAAG,MAAMC,OAAN,IAAiB;AAC9B,QAAMC,OAAO,GAAG,IAAIN,OAAJ,CAAYK,OAAZ,CAAhB;AACA,QAAME,YAAY,GAAGD,OAAO,CAACE,SAAR,EAArB;AACA,QAAMC,MAAM,GAAG,MAAMH,OAAO,CAACI,cAAR,CAAuBC,WAAvB,CAArB;AAEA,SAAO;AACLJ,IAAAA,YADK;AAELE,IAAAA;AAFK,GAAP;AAID,CATD;;AAWA,MAAME,WAAW,GAAG,MAAML,OAAN,KAAkB;AACpCM,EAAAA,KAAK,EAAEN,OAAO,CAACO,UAAR,EAD6B;AAEpCC,EAAAA,UAAU,EAAE,MAAMR,OAAO,CAACI,cAAR,CAAuBK,eAAvB;AAFkB,CAAlB,CAApB;;AAKA,MAAMA,eAAe,GAAGT,OAAO,KAAK;AAClCU,EAAAA,SAAS,EAAEV,OAAO,CAACE,SAAR,EADuB;AAElCS,EAAAA,SAAS,EAAEX,OAAO,CAACY,SAAR;AAFuB,CAAL,CAA/B;;AAKA,MAAMC,KAAK,GAAG,MAAMC,IAAN,IAAc;AAC1B,QAAMC,gBAAgB,GAAGD,IAAI,CAACX,MAAL,CACtBa,GADsB,CAClB,CAAC;AAAER,IAAAA;AAAF,GAAD,MAAqB;AACxBS,IAAAA,oBAAoB,EAAET,UAAU,CAACU,MAAX,CAAkB,CAAC;AAAEP,MAAAA;AAAF,KAAD,KAAmBf,OAAO,CAACe,SAAD,CAA5C;AADE,GAArB,CADkB,EAItBO,MAJsB,CAIf,CAAC;AAAED,IAAAA;AAAF,GAAD,KAA8BA,oBAAoB,CAACE,MAJpC,CAAzB;;AAMA,MAAIJ,gBAAgB,CAACI,MAAjB,GAA0B,CAA9B,EAAiC;AAC/B,UAAMtB,mBAAmB,CAACkB,gBAAgB,CAAC,CAAD,CAAhB,CAAoBE,oBAApB,CAAyC,CAAzC,EAA4CN,SAA7C,CAAzB;AACD;;AAED,SAAOG,IAAP;AACD,CAZD;;AAcAM,MAAM,CAACC,OAAP,GAAiB;AACfvB,EAAAA,MADe;AAEfe,EAAAA;AAFe,CAAjB","sourcesContent":["const Decoder = require('../../../decoder')\nconst { failure, createErrorFromCode } = require('../../../error')\n\n/**\n * TxnOffsetCommit Response (Version: 0) => throttle_time_ms [topics]\n *   throttle_time_ms => INT32\n *   topics => topic [partitions]\n *     topic => STRING\n *     partitions => partition error_code\n *       partition => INT32\n *       error_code => INT16\n */\nconst decode = async rawData => {\n  const decoder = new Decoder(rawData)\n  const throttleTime = decoder.readInt32()\n  const topics = await decoder.readArrayAsync(decodeTopic)\n\n  return {\n    throttleTime,\n    topics,\n  }\n}\n\nconst decodeTopic = async decoder => ({\n  topic: decoder.readString(),\n  partitions: await decoder.readArrayAsync(decodePartition),\n})\n\nconst decodePartition = decoder => ({\n  partition: decoder.readInt32(),\n  errorCode: decoder.readInt16(),\n})\n\nconst parse = async data => {\n  const topicsWithErrors = data.topics\n    .map(({ partitions }) => ({\n      partitionsWithErrors: partitions.filter(({ errorCode }) => failure(errorCode)),\n    }))\n    .filter(({ partitionsWithErrors }) => partitionsWithErrors.length)\n\n  if (topicsWithErrors.length > 0) {\n    throw createErrorFromCode(topicsWithErrors[0].partitionsWithErrors[0].errorCode)\n  }\n\n  return data\n}\n\nmodule.exports = {\n  decode,\n  parse,\n}\n"]},"metadata":{},"sourceType":"script"}