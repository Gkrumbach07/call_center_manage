{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/gagekrumbach/Documents/call-center-manage/client/src/ClientComponent.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://127.0.0.1:4001\";\nexport default function ClientComponent() {\n  _s();\n\n  const [response, setResponse] = useState(\"\");\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"FromKafka\", data => {\n      setResponse(data);\n    }); // CLEAN UP THE EFFECT\n\n    return () => socket.disconnect();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Its \", response]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ClientComponent, \"EwSunp3mKlAPh2RJzEcLl6pzGvU=\");\n\n_c = ClientComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClientComponent\");","map":{"version":3,"sources":["/Users/gagekrumbach/Documents/call-center-manage/client/src/ClientComponent.js"],"names":["React","useEffect","useState","socketIOClient","ENDPOINT","ClientComponent","response","setResponse","socket","on","data","disconnect"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,MAAMC,QAAQ,GAAG,uBAAjB;AAEA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AACxC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,MAAM,GAAGL,cAAc,CAACC,QAAD,CAA7B;AACAI,IAAAA,MAAM,CAACC,EAAP,CAAU,WAAV,EAAuBC,IAAI,IAAI;AAC7BH,MAAAA,WAAW,CAACG,IAAD,CAAX;AACD,KAFD,EAFc,CAMd;;AACA,WAAO,MAAMF,MAAM,CAACG,UAAP,EAAb;AAED,GATQ,EASN,EATM,CAAT;AAWA,sBACE;AAAA,uBACOL,QADP;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAnBuBD,e;;KAAAA,e","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://127.0.0.1:4001\";\n\nexport default function ClientComponent() {\n  const [response, setResponse] = useState(\"\");\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"FromKafka\", data => {\n      setResponse(data);\n    });\n\n    // CLEAN UP THE EFFECT\n    return () => socket.disconnect();\n\n  }, []);\n\n  return (\n    <p>\n      Its {response}\n    </p>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}